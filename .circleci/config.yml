# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/hoverfly-java-grpc

    environment:
      # Customize the JVM maximum heap limit
#      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: ./gradlew dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      - run: echo ${TEST_SERVICE_ACCOUNT} > test-service-account.json
      - run:
          name: Install Hoverfly cert
          command: sudo $JAVA_HOME/bin/keytool -import -alias hoverfly -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass ${KEY_STORE_PASS} -noprompt -file cert.pem

      # run tests!
      - run: ./gradlew test
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - hoverfly-java-grpc/

  deploy:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/hoverfly-java-grpc
    steps:
      - checkout
      - run:
          name: Config release dependencies
          command: |
            sudo apt-get install gnupg2 -y
            git config core.filemode false
            mkdir ~/.gnupg
            echo 'use-agent' >> ~/.gnupg/gpg.conf
            echo 'pinentry-mode loopback' >> ~/.gnupg/gpg.conf
            echo 'allow-loopback-pinentry' >> ~/.gnupg/gpg-agent.conf
            echo RELOADAGENT | gpg-connect-agent
            chmod +x maven-release.sh
            echo ${GPG_PRIVATE_KEY} | base64 --decode -i | gpg2 --import --passphrase ${MAVEN_GPG_PASSPHRASE}
            gpg --export-secret-keys > ~/.gnupg/secring.gpg --passphrase ${MAVEN_GPG_PASSPHRASE}
      - run:
          name: Run Maven release
          command: ./maven-release.sh

workflows:
  version: 2
  build:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master