import java.util.regex.Pattern

plugins {
    id "de.undercouch.download" version "3.4.2"
    id 'net.researchgate.release' version '2.4.0'
    id 'java'
}

group 'io.specto'
archivesBaseName = 'hoverfly-java-grpc'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    compile 'io.specto:hoverfly-java:0.12.0-SNAPSHOT'
    testCompile 'junit:junit:4.12'
    testCompile group: 'com.google.guava', name: 'guava', version: '20.0'
    testCompile 'org.assertj:assertj-core:3.11.1'
    testCompile 'net.javacrumbs.json-unit:json-unit:1.31.1'
    testCompile 'net.javacrumbs.json-unit:json-unit-fluent:1.31.1'
    testCompile 'org.springframework:spring-web:4.3.20.RELEASE'
    testCompile 'com.google.cloud:google-cloud-monitoring:1.46.0'
    testCompile 'com.google.cloud:google-cloud-pubsub:1.46.0'
    testCompile 'com.google.cloud:google-cloud-spanner:1.10.0'
}

ext."release.useAutomaticVersion" = true
ext."signing.keyId" = "$System.env.MAVEN_GPG_KEYNAME"
ext."signing.password" = "$System.env.MAVEN_GPG_PASSPHRASE"
ext."signing.secretKeyRingFile" = "$System.env.HOME/.gnupg/secring.gpg"
ext.ossrhUsername = "$System.env.MAVEN_CENTRAL_USERNAME"
ext.ossrhPassword = "$System.env.MAVEN_CENTRAL_PASSWORD"

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'java'
apply plugin: 'net.researchgate.release'

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

def isSnapshot = project.version.contains('SNAPSHOT')

afterEvaluate {
    if (!isSnapshot) {
        signing {
            sign configurations.archives
        }
    }
}

afterReleaseBuild.dependsOn uploadArchives

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: "$ossrhUsername", password: "$ossrhPassword")
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: "$ossrhUsername", password: "$ossrhPassword")
            }

            pom.project {
                name 'Hoverfly Java gRPC'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Hoverfy Java extension for supporting gRPC simulate and capture'
                url 'https://github.com/SpectoLabs/hoverfly-java-grpc'

                scm {
                    connection 'scm:git:git@github.com:SpectoLabs/hoverfly-java-grpc.git'
                    developerConnection 'scm:git:git@github.com:SpectoLabs/hoverfly-java-grpc.git'
                    url 'git@github.com:SpectoLabs/hoverfly-java-grpc.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        name 'Tommy Situ'
                        email 'tommy.situ@specto.io'
                        organization 'Specto Labs'
                        organizationUrl 'http://www.specto.io'
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}

task (updateHoverflyBinaries) {
    doLast {
        def downloadUrl = 'https://storage.googleapis.com/hoverfly2-master-builds/latest'
        def downloadDir = "$buildDir/tmp/dist"
        println "Downloading latest Hoverfly2 if needed"
        download {
            src([
                    "$downloadUrl/hoverfly2_bundle_linux_386.zip",
                    "$downloadUrl/hoverfly2_bundle_linux_amd64.zip",
                    "$downloadUrl/hoverfly2_bundle_OSX_amd64.zip",
                    "$downloadUrl/hoverfly2_bundle_windows_386.zip",
                    "$downloadUrl/hoverfly2_bundle_windows_amd64.zip"
            ])
            dest "$downloadDir"
            onlyIfNewer true
            quiet true
        }
        println "Unzipping Hoverfly binaries"

        def distDir = file("$downloadDir")
        def extractBinary = { FileTree zip ->
            copy {
                from zip
                into 'src/main/resources/binaries'
                rename { String filename ->
                    def p1 = Pattern.compile('hoverfly(.*)')
                    def m1 = p1.matcher(filename)
                    def extension = m1.find() ? m1.group(1) : ''
                    def p2 = Pattern.compile('hoverfly2_bundle(.+?)\\.zip')
                    def m2 = p2.matcher(zip.asPath)
                    def type = m2.find() ? m2.group(1) : ''
                    filename = 'hoverfly2' + type + extension
                }
            }
        }

        distDir.listFiles()
                .findAll { it.name.endsWith('.zip') }
                .collect { zipTree(it).matching { include 'hoverfly*' } }
                .each { zip -> extractBinary(zip) }
    }
}

task (cleanHoverflyBinaries, type: Delete) {
    delete fileTree(dir: 'src/main/resources/binaries')
}

processResources {
    dependsOn updateHoverflyBinaries
}


test {
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        exceptionFormat "full"
    }
}