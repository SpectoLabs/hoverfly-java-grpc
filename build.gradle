import java.util.regex.Pattern

plugins {
    id 'java'
}

group 'io.specto'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    compile 'io.specto:hoverfly-java:0.11.4-SNAPSHOT'
    testCompile 'junit:junit:4.12'
    testCompile group: 'com.google.guava', name: 'guava', version: '20.0'
    testCompile 'org.assertj:assertj-core:3.11.1'
    testCompile 'net.javacrumbs.json-unit:json-unit:1.31.1'
    testCompile 'net.javacrumbs.json-unit:json-unit-fluent:1.31.1'
    testCompile 'org.springframework:spring-web:4.3.20.RELEASE'
    testCompile 'com.google.cloud:google-cloud-monitoring:1.46.0'
    testCompile 'com.google.cloud:google-cloud-pubsub:1.46.0'
    testCompile 'com.google.cloud:google-cloud-spanner:1.10.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}

task (updateHoverflyBinaries) {
    doLast {
        println "Unzipping Hoverfly binaries"

        def downloadDir = "$buildDir/tmp/dist"
        def distDir = file("$downloadDir")
        def extractBinary = { FileTree zip ->
            copy {
                from zip
                into 'src/main/resources/binaries'
                rename { String filename ->
                    def p1 = Pattern.compile('hoverfly(.*)')
                    def m1 = p1.matcher(filename)
                    def extension = m1.find() ? m1.group(1) : ''
                    def p2 = Pattern.compile('hoverfly2_bundle(.+?)\\.zip')
                    def m2 = p2.matcher(zip.asPath)
                    def type = m2.find() ? m2.group(1) : ''
                    filename = 'hoverfly2' + type + extension
                }
            }
        }

        distDir.listFiles()
                .findAll { it.name.endsWith('.zip') }
                .collect { zipTree(it).matching { include 'hoverfly*' } }
                .each { zip -> extractBinary(zip) }
    }
}

task (cleanHoverflyBinaries, type: Delete) {
    delete fileTree(dir: 'src/main/resources/binaries')
}


test {
    testLogging {
        events "PASSED", "STARTED", "FAILED", "SKIPPED"
        exceptionFormat "full"
    }
}