{
  "data" : {
    "pairs" : [ {
      "request" : {
        "path" : [ {
          "matcher" : "exact",
          "value" : "/google.monitoring.v3.MetricService/ListTimeSeries"
        } ],
        "method" : [ {
          "matcher" : "exact",
          "value" : "POST"
        } ],
        "destination" : [ {
          "matcher" : "exact",
          "value" : "monitoring.googleapis.com:443"
        } ],
        "scheme" : [ {
          "matcher" : "exact",
          "value" : "https"
        } ],
        "query" : { },
        "body" : [ {
          "matcher" : "exact",
          "value" : "AAAAAHcSPW1ldHJpYy50eXBlPSJjb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbiIiEAoGCNCT8OQFEgYIgJ3w5AU4AVIicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNQ=="
        } ]
      },
      "response" : {
        "status" : 200,
        "body" : "AAAABZMK8gEKdxJECg1pbnN0YW5jZV9uYW1lEjNna2UtaG92ZXJmbHktY2xvdWQtY2x1c3QtZGVmYXVsdC1wb29sLWZjNTRjYTdhLXQzcjgaL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvY3B1L3V0aWxpemF0aW9uEnMKDGdjZV9pbnN0YW5jZRIiCgtpbnN0YW5jZV9pZBITMjM4NjU4NjYxODQ5Mzc1MDA5NxIWCgR6b25lEg5ldXJvcGUtd2VzdDEtYhInCgpwcm9qZWN0X2lkEhlob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1GAEgAwryAQp3EkQKDWluc3RhbmNlX25hbWUSM2drZS1ob3ZlcmZseS1jbG91ZC1jbHVzdC1kZWZhdWx0LXBvb2wtZmM1NGNhN2EtajhubRovY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9jcHUvdXRpbGl6YXRpb24ScwoMZ2NlX2luc3RhbmNlEhYKBHpvbmUSDmV1cm9wZS13ZXN0MS1iEicKCnByb2plY3RfaWQSGWhvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUSIgoLaW5zdGFuY2VfaWQSEzQwMzEwODA0MjczNDY1NDU0ODkYASADCscBCkwSGQoNaW5zdGFuY2VfbmFtZRIIZGVwbG95ZXIaL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvY3B1L3V0aWxpemF0aW9uEnMKDGdjZV9pbnN0YW5jZRIiCgtpbnN0YW5jZV9pZBITODEyNjM1MjI4NjkyMDA4OTE4NBIWCgR6b25lEg5ldXJvcGUtd2VzdDEtYhInCgpwcm9qZWN0X2lkEhlob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1GAEgAwryAQp3EkQKDWluc3RhbmNlX25hbWUSM2drZS1ob3ZlcmZseS1jbG91ZC1jbHVzdC1kZWZhdWx0LXBvb2wtZmM1NGNhN2EtMjQ1ZBovY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9jcHUvdXRpbGl6YXRpb24ScwoMZ2NlX2luc3RhbmNlEhYKBHpvbmUSDmV1cm9wZS13ZXN0MS1iEicKCnByb2plY3RfaWQSGWhvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUSIgoLaW5zdGFuY2VfaWQSEzg0ODYzOTI3Mjk1MDQzMzcyMjUYASADCvIBCncSRAoNaW5zdGFuY2VfbmFtZRIzZ2tlLWhvdmVyZmx5LWNsb3VkLWNsdXN0LWRlZmF1bHQtcG9vbC1mYzU0Y2E3YS1wOWQ3Gi9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbhJzCgxnY2VfaW5zdGFuY2USIgoLaW5zdGFuY2VfaWQSEzg5MDE4MDg2NDA3OTM4NTY4NDkSFgoEem9uZRIOZXVyb3BlLXdlc3QxLWISJwoKcHJvamVjdF9pZBIZaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNRgBIAMK8gEKdxJECg1pbnN0YW5jZV9uYW1lEjNna2UtaG92ZXJmbHktY2xvdWQtY2x1c3QtZGVmYXVsdC1wb29sLWZjNTRjYTdhLXgyazkaL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvY3B1L3V0aWxpemF0aW9uEnMKDGdjZV9pbnN0YW5jZRIiCgtpbnN0YW5jZV9pZBITOTA3ODU4MzIyODMzOTkzMTk4NRIWCgR6b25lEg5ldXJvcGUtd2VzdDEtYhInCgpwcm9qZWN0X2lkEhlob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1GAEgAw==",
        "encodedBody" : true,
        "templated" : false,
        "headers" : {
          "Alt-Svc" : [ "quic=\":443\"; ma=2592000; v=\"46,44,43,39\"" ],
          "Content-Disposition" : [ "attachment" ],
          "Content-Type" : [ "application/grpc" ],
          "Date" : [ "Tue, 09 Apr 2019 12:50:56 GMT" ],
          "Grpc-Status" : [ "0" ],
          "Hoverfly" : [ "Was-Here" ],
          "Trailer" : [ "Grpc-Status", "Content-Disposition" ]
        }
      }
    }, {
      "request" : {
        "path" : [ {
          "matcher" : "exact",
          "value" : "/google.monitoring.v3.MetricService/ListMonitoredResourceDescriptors"
        } ],
        "method" : [ {
          "matcher" : "exact",
          "value" : "POST"
        } ],
        "destination" : [ {
          "matcher" : "exact",
          "value" : "monitoring.googleapis.com:443"
        } ],
        "scheme" : [ {
          "matcher" : "exact",
          "value" : "https"
        } ],
        "query" : { },
        "body" : [ {
          "matcher" : "exact",
          "value" : "\u0000\u0000\u0000\u0000$*\"projects/hoverfly-cloud-dev-162815"
        } ]
      },
      "response" : {
        "status" : 200,
        "body" : "",
        "encodedBody" : true,
        "templated" : false,
        "headers" : {
          "Alt-Svc" : [ "quic=\":443\"; ma=2592000; v=\"46,44,43,39\"" ],
          "Content-Disposition" : [ "attachment" ],
          "Content-Type" : [ "application/grpc" ],
          "Date" : [ "Tue, 09 Apr 2019 12:51:02 GMT" ],
          "Grpc-Status" : [ "0" ],
          "Hoverfly" : [ "Was-Here" ],
          "Trailer" : [ "Grpc-Status", "Content-Disposition" ]
        }
      }
    }, {
      "request" : {
        "path" : [ {
          "matcher" : "exact",
          "value" : "/google.monitoring.v3.MetricService/ListTimeSeries"
        } ],
        "method" : [ {
          "matcher" : "exact",
          "value" : "POST"
        } ],
        "destination" : [ {
          "matcher" : "exact",
          "value" : "monitoring.googleapis.com:443"
        } ],
        "scheme" : [ {
          "matcher" : "exact",
          "value" : "https"
        } ],
        "query" : { },
        "body" : [ {
          "matcher" : "exact",
          "value" : "AAAAAIASPW1ldHJpYy50eXBlPSJjb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbiIiEAoGCNCT8OQFEgYIgJ3w5AUqCQoDCNgEEAwgAVIicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNQ=="
        } ]
      },
      "response" : {
        "status" : 200,
        "body" : "AAAAALEKrgEKMRovY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9jcHUvdXRpbGl6YXRpb24SNwoMZ2NlX2luc3RhbmNlEicKCnByb2plY3RfaWQSGWhvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUYASADKh0KEAoGCICd8OQFEgYIgJ3w5AUSCRlBhkKswXS/PyodChAKBgiomPDkBRIGCKiY8OQFEgkZAd9gyxBJxD8=",
        "encodedBody" : true,
        "templated" : false,
        "headers" : {
          "Alt-Svc" : [ "quic=\":443\"; ma=2592000; v=\"46,44,43,39\"" ],
          "Content-Disposition" : [ "attachment" ],
          "Content-Type" : [ "application/grpc" ],
          "Date" : [ "Tue, 09 Apr 2019 12:51:08 GMT" ],
          "Grpc-Status" : [ "0" ],
          "Hoverfly" : [ "Was-Here" ],
          "Trailer" : [ "Grpc-Status", "Content-Disposition" ]
        }
      }
    }, {
      "request" : {
        "path" : [ {
          "matcher" : "exact",
          "value" : "/google.monitoring.v3.MetricService/ListTimeSeries"
        } ],
        "method" : [ {
          "matcher" : "exact",
          "value" : "POST"
        } ],
        "destination" : [ {
          "matcher" : "exact",
          "value" : "monitoring.googleapis.com:443"
        } ],
        "scheme" : [ {
          "matcher" : "exact",
          "value" : "https"
        } ],
        "query" : { },
        "body" : [ {
          "matcher" : "exact",
          "value" : "AAAAAH4SPW1ldHJpYy50eXBlPSJjb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbiIiEAoGCNCT8OQFEgYIgJ3w5AUqBwoDCNgEEAxSInByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTU="
        } ]
      },
      "response" : {
        "status" : 200,
        "body" : "AAAABwcKsAIKdxJECg1pbnN0YW5jZV9uYW1lEjNna2UtaG92ZXJmbHktY2xvdWQtY2x1c3QtZGVmYXVsdC1wb29sLWZjNTRjYTdhLXQzcjgaL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvY3B1L3V0aWxpemF0aW9uEnMKDGdjZV9pbnN0YW5jZRIiCgtpbnN0YW5jZV9pZBITMjM4NjU4NjYxODQ5Mzc1MDA5NxIWCgR6b25lEg5ldXJvcGUtd2VzdDEtYhInCgpwcm9qZWN0X2lkEhlob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1GAEgAyodChAKBgiAnfDkBRIGCICd8OQFEgkZThuouWtkvz8qHQoQCgYIqJjw5AUSBgiomPDkBRIJGXsUbmdtk78/CrACCncSRAoNaW5zdGFuY2VfbmFtZRIzZ2tlLWhvdmVyZmx5LWNsb3VkLWNsdXN0LWRlZmF1bHQtcG9vbC1mYzU0Y2E3YS1qOG5tGi9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbhJzCgxnY2VfaW5zdGFuY2USIgoLaW5zdGFuY2VfaWQSEzQwMzEwODA0MjczNDY1NDU0ODkSFgoEem9uZRIOZXVyb3BlLXdlc3QxLWISJwoKcHJvamVjdF9pZBIZaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNRgBIAMqHQoQCgYIgJ3w5AUSBgiAnfDkBRIJGQrXoxVb2sE/Kh0KEAoGCKiY8OQFEgYIqJjw5AUSCRlbjyJn8uPBPwqFAgpMEhkKDWluc3RhbmNlX25hbWUSCGRlcGxveWVyGi9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbhJzCgxnY2VfaW5zdGFuY2USIgoLaW5zdGFuY2VfaWQSEzgxMjYzNTIyODY5MjAwODkxODQSFgoEem9uZRIOZXVyb3BlLXdlc3QxLWISJwoKcHJvamVjdF9pZBIZaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNRgBIAMqHQoQCgYIgJ3w5AUSBgiAnfDkBRIJGVNV1dcRJZ8/Kh0KEAoGCKiY8OQFEgYIqJjw5AUSCRmnDfQ/6p+yPwqwAgp3EkQKDWluc3RhbmNlX25hbWUSM2drZS1ob3ZlcmZseS1jbG91ZC1jbHVzdC1kZWZhdWx0LXBvb2wtZmM1NGNhN2EtMjQ1ZBovY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9jcHUvdXRpbGl6YXRpb24ScwoMZ2NlX2luc3RhbmNlEiIKC2luc3RhbmNlX2lkEhM4NDg2MzkyNzI5NTA0MzM3MjI1EhYKBHpvbmUSDmV1cm9wZS13ZXN0MS1iEicKCnByb2plY3RfaWQSGWhvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUYASADKh0KEAoGCICd8OQFEgYIgJ3w5AUSCRlyPdK1W5nAPyodChAKBgiomPDkBRIGCKiY8OQFEgkZ7+72tJaFwD8KsAIKdxJECg1pbnN0YW5jZV9uYW1lEjNna2UtaG92ZXJmbHktY2xvdWQtY2x1c3QtZGVmYXVsdC1wb29sLWZjNTRjYTdhLXA5ZDcaL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvY3B1L3V0aWxpemF0aW9uEnMKDGdjZV9pbnN0YW5jZRIiCgtpbnN0YW5jZV9pZBITODkwMTgwODY0MDc5Mzg1Njg0ORIWCgR6b25lEg5ldXJvcGUtd2VzdDEtYhInCgpwcm9qZWN0X2lkEhlob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1GAEgAyodChAKBgiAnfDkBRIGCICd8OQFEgkZVVW1OvfAyD8qHQoQCgYIqJjw5AUSBgiomPDkBRIJGdMGsuojJtc/CrACCncSRAoNaW5zdGFuY2VfbmFtZRIzZ2tlLWhvdmVyZmx5LWNsb3VkLWNsdXN0LWRlZmF1bHQtcG9vbC1mYzU0Y2E3YS14Mms5Gi9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbhJzCgxnY2VfaW5zdGFuY2USIgoLaW5zdGFuY2VfaWQSEzkwNzg1ODMyMjgzMzk5MzE5ODUSFgoEem9uZRIOZXVyb3BlLXdlc3QxLWISJwoKcHJvamVjdF9pZBIZaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNRgBIAMqHQoQCgYIgJ3w5AUSBgiAnfDkBRIJGUjhms19Jb8/Kh0KEAoGCKiY8OQFEgYIqJjw5AUSCRkFOi3+z82/Pw==",
        "encodedBody" : true,
        "templated" : false,
        "headers" : {
          "Alt-Svc" : [ "quic=\":443\"; ma=2592000; v=\"46,44,43,39\"" ],
          "Content-Disposition" : [ "attachment" ],
          "Content-Type" : [ "application/grpc" ],
          "Date" : [ "Tue, 09 Apr 2019 12:51:14 GMT" ],
          "Grpc-Status" : [ "0" ],
          "Hoverfly" : [ "Was-Here" ],
          "Trailer" : [ "Content-Disposition", "Grpc-Status" ]
        }
      }
    }, {
      "request" : {
        "path" : [ {
          "matcher" : "exact",
          "value" : "/google.monitoring.v3.MetricService/GetMonitoredResourceDescriptor"
        } ],
        "method" : [ {
          "matcher" : "exact",
          "value" : "POST"
        } ],
        "destination" : [ {
          "matcher" : "exact",
          "value" : "monitoring.googleapis.com:443"
        } ],
        "scheme" : [ {
          "matcher" : "exact",
          "value" : "https"
        } ],
        "query" : { },
        "body" : [ {
          "matcher" : "exact",
          "value" : "\u0000\u0000\u0000\u0000S\u001AQprojects/hoverfly-cloud-dev-162815/monitoredResourceDescriptors/cloudsql_database"
        } ]
      },
      "response" : {
        "status" : 200,
        "body" : "AAAAAXkKEWNsb3Vkc3FsX2RhdGFiYXNlEhJDbG91ZCBTUUwgRGF0YWJhc2UaJkEgZGF0YWJhc2UgaG9zdGVkIGluIEdvb2dsZSBDbG91ZCBTUUwuImQKCnByb2plY3RfaWQaVlRoZSBpZGVudGlmaWVyIG9mIHRoZSBHQ1AgcHJvamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyByZXNvdXJjZSwgc3VjaCBhcyAibXktcHJvamVjdCIuIiYKC2RhdGFiYXNlX2lkGhdUaGUgSUQgb2YgdGhlIGRhdGFiYXNlLiJHCgZyZWdpb24aPVRoZSBHb29nbGUgQ2xvdWQgU1FMIHJlZ2lvbiBpbiB3aGljaCB0aGUgZGF0YWJhc2UgaXMgcnVubmluZy4qUXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbW9uaXRvcmVkUmVzb3VyY2VEZXNjcmlwdG9ycy9jbG91ZHNxbF9kYXRhYmFzZQ==",
        "encodedBody" : true,
        "templated" : false,
        "headers" : {
          "Alt-Svc" : [ "quic=\":443\"; ma=2592000; v=\"46,44,43,39\"" ],
          "Content-Disposition" : [ "attachment" ],
          "Content-Type" : [ "application/grpc" ],
          "Date" : [ "Tue, 09 Apr 2019 12:51:20 GMT" ],
          "Grpc-Status" : [ "0" ],
          "Hoverfly" : [ "Was-Here" ],
          "Trailer" : [ "Grpc-Status", "Content-Disposition" ]
        }
      }
    }, {
      "request" : {
        "path" : [ {
          "matcher" : "exact",
          "value" : "/google.monitoring.v3.MetricService/ListMetricDescriptors"
        } ],
        "method" : [ {
          "matcher" : "exact",
          "value" : "POST"
        } ],
        "destination" : [ {
          "matcher" : "exact",
          "value" : "monitoring.googleapis.com:443"
        } ],
        "scheme" : [ {
          "matcher" : "exact",
          "value" : "https"
        } ],
        "query" : { },
        "body" : [ {
          "matcher" : "exact",
          "value" : "\u0000\u0000\u0000\u0000$*\"projects/hoverfly-cloud-dev-162815"
        } ]
      },
      "response" : {
        "status" : 200,
        "body" : "AAAG9ZQKggIKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vYWdlbnQvYXBpX3JlcXVlc3RfY291bnQSFgoFc3RhdGUaDVJlcXVlc3Qgc3RhdGUYAyACKgExMiJNb25pdG9yaW5nIGFnZW50IEFQSSByZXF1ZXN0IGNvdW50OiJNb25pdG9yaW5nIEFnZW50IEFQSSBSZXF1ZXN0IENvdW50QixhZ2VudC5nb29nbGVhcGlzLmNvbS9hZ2VudC9hcGlfcmVxdWVzdF9jb3VudFIICAQSAgg8GgAKgwIKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vYWdlbnQvbG9nX2VudHJ5X2NvdW50EiMKDXJlc3BvbnNlX2NvZGUaEkhUVFAgcmVzcG9uc2UgY29kZRgDIAIqATEyH0NvdW50IG9mIGFnZW50IGxvZyBlbnRyeSB3cml0ZXM6HUxvZ2dpbmcgQWdlbnQgTG9nIEVudHJ5IENvdW50QiphZ2VudC5nb29nbGVhcGlzLmNvbS9hZ2VudC9sb2dfZW50cnlfY291bnRSCAgEEgIIPBoACqYCCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2FnZW50L2xvZ19lbnRyeV9yZXRyeV9jb3VudBIjCg1yZXNwb25zZV9jb2RlGhJIVFRQIHJlc3BvbnNlIGNvZGUYAyACKgExMidDb3VudCBvZiBhZ2VudCByZXRyaWVkIGxvZyBlbnRyeSB3cml0ZXM6LExvZ2dpbmcgQWdlbnQgUmV0cmllZCBMb2cgRW50cnkgV3JpdGVzIENvdW50QjBhZ2VudC5nb29nbGVhcGlzLmNvbS9hZ2VudC9sb2dfZW50cnlfcmV0cnlfY291bnRSCAgEEgIIPBoACs0BClxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2FnZW50L21lbW9yeV91c2FnZRgBIAMqAkJ5MhNBZ2VudCBtZW1vcnkgaW4gdXNlOh1Nb25pdG9yaW5nIEFnZW50IE1lbW9yeSBVc2FnZUInYWdlbnQuZ29vZ2xlYXBpcy5jb20vYWdlbnQvbWVtb3J5X3VzYWdlUggIBBICCDwaAAqJAgpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9hZ2VudC9yZXF1ZXN0X2NvdW50EiMKDXJlc3BvbnNlX2NvZGUaEkhUVFAgcmVzcG9uc2UgY29kZRgDIAIqATEyJ0NvdW50IG9mIGFnZW50IFdyaXRlTG9nRW50cmllcyByZXF1ZXN0czofTG9nZ2luZyBBZ2VudCBBUEkgUmVxdWVzdCBDb3VudEIoYWdlbnQuZ29vZ2xlYXBpcy5jb20vYWdlbnQvcmVxdWVzdF9jb3VudFIICAQSAgg8GgAKiwIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vYWdlbnQvc3RyZWFtc3BhY2Vfc2l6ZRgBIAMqAkJ5MkJFc3RpbWF0ZWQgdG90YWwgc2l6ZSBvZiBhZ2VudCBwcm9jZXNzIGxhYmVscyBvdmVyIGEgMjQtaG91ciB3aW5kb3c6JE1vbml0b3JpbmcgQWdlbnQgUHJvY2VzcyBMYWJlbHMgU2l6ZUIrYWdlbnQuZ29vZ2xlYXBpcy5jb20vYWdlbnQvc3RyZWFtc3BhY2Vfc2l6ZVIICAQSAgg8GgAKmwIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vYWdlbnQvc3RyZWFtc3BhY2Vfc2l6ZV90aHJvdHRsaW5nGAEgAyoBMTI5V2hldGhlciB0aGUgYWdlbnQgaXMgY3VycmVudGx5IHRocm90dGxpbmcgcHJvY2VzcyBtZXRyaWNzOihNb25pdG9yaW5nIEFnZW50IGlzIFRocm90dGxpbmcgUHJvY2Vzc2VzQjZhZ2VudC5nb29nbGVhcGlzLmNvbS9hZ2VudC9zdHJlYW1zcGFjZV9zaXplX3Rocm90dGxpbmdSCAgEEgIIPBoACtgBClZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2FnZW50L3VwdGltZRIYCgd2ZXJzaW9uGg1BZ2VudCB2ZXJzaW9uGAMgAioBczIXQWdlbnQgdXB0aW1lIGluIHNlY29uZHM6F01vbml0b3JpbmcgQWdlbnQgVXB0aW1lQiFhZ2VudC5nb29nbGVhcGlzLmNvbS9hZ2VudC91cHRpbWVSCAgEEgIIPBoACqcCClxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2FwYWNoZS9jb25uZWN0aW9ucxIyCgtzZXJ2ZXJfbmFtZRojVGhlIG5hbWUgb2YgdGhlIEFwYWNoZSBIVFRQIHNlcnZlci4YASADKgExMkdUaGUgbnVtYmVyIG9mIGFjdGl2ZSBjb25uZWN0aW9ucyBjdXJyZW50bHkgYXR0YWNoZWQgdG8gdGhlIEhUVFAgc2VydmVyLjoQT3BlbiBjb25uZWN0aW9uc0InYWdlbnQuZ29vZ2xlYXBpcy5jb20vYXBhY2hlL2Nvbm5lY3Rpb25zUggIBBICCDwaAAqfAgpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9hcGFjaGUvaWRsZV93b3JrZXJzEjIKC3NlcnZlcl9uYW1lGiNUaGUgbmFtZSBvZiB0aGUgQXBhY2hlIEhUVFAgc2VydmVyLhgBIAMqATEyQVRoZSBudW1iZXIgb2YgaWRsZSB3b3JrZXJzIGN1cnJlbnRseSBhdHRhY2hlZCB0byB0aGUgSFRUUCBzZXJ2ZXIuOgxJZGxlIHdvcmtlcnNCKGFnZW50Lmdvb2dsZWFwaXMuY29tL2FwYWNoZS9pZGxlX3dvcmtlcnNSCAgEEgIIPBoACocCCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2FwYWNoZS9yZXF1ZXN0X2NvdW50EjIKC3NlcnZlcl9uYW1lGiNUaGUgbmFtZSBvZiB0aGUgQXBhY2hlIEhUVFAgc2VydmVyLhgDIAIqATEyK1RvdGFsIHJlcXVlc3RzIHNlcnZpY2VkIGJ5IHRoZSBIVFRQIHNlcnZlci46CFJlcXVlc3RzQilhZ2VudC5nb29nbGVhcGlzLmNvbS9hcGFjaGUvcmVxdWVzdF9jb3VudFIICAQSAgg8GgAKogIKW3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vYXBhY2hlL3Njb3JlYm9hcmQSMgoLc2VydmVyX25hbWUaI1RoZSBuYW1lIG9mIHRoZSBBcGFjaGUgSFRUUCBzZXJ2ZXIuEiMKBXN0YXRlGhpUaGUgc2NvcmVib2FyZCBzdGF0ZSBuYW1lLhgBIAMqATEyJUFwYWNoZSBIVFRQIHNlcnZlciBzY29yZWJvYXJkIHZhbHVlcy46ClNjb3JlYm9hcmRCJmFnZW50Lmdvb2dsZWFwaXMuY29tL2FwYWNoZS9zY29yZWJvYXJkUggIBBICCDwaAArqAQpYcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9hcGFjaGUvdHJhZmZpYxIyCgtzZXJ2ZXJfbmFtZRojVGhlIG5hbWUgb2YgdGhlIEFwYWNoZSBIVFRQIHNlcnZlci4YAyACKgJCeTIaVG90YWwgSFRUUCBzZXJ2ZXIgdHJhZmZpYy46B1RyYWZmaWNCI2FnZW50Lmdvb2dsZWFwaXMuY29tL2FwYWNoZS90cmFmZmljUggIBBICCDwaAArsAQpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9jYXNzYW5kcmEvY2FjaGUvaGl0cxIfCgVjYWNoZRoWVGhlIG5hbWUgb2YgdGhlIGNhY2hlLhgDIAIqATEyIktleSBjYWNoZSBoaXQgY291bnQgZm9yIHRoZSB0YWJsZS46CUhpdCBjb3VudEIpYWdlbnQuZ29vZ2xlYXBpcy5jb20vY2Fzc2FuZHJhL2NhY2hlL2hpdHNSCAgEEgIIPBoACpkCCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9jbGllbnRfcmVxdWVzdC9sYXRlbmN5LzUwcBIoCglvcGVyYXRpb24aG1RoZSBzdG9yYWdlIG9wZXJhdGlvbiBuYW1lLhgBIAMqAnVzMiJMYXRlbmN5IG9mIHN0YW5kYXJkIHJlYWQgcmVxdWVzdHMuOgxSZWFkIGxhdGVuY3lCOWFnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9jbGllbnRfcmVxdWVzdC9sYXRlbmN5LzUwcFIICAQSAgg8GgAKmQIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vY2Fzc2FuZHJhL2NsaWVudF9yZXF1ZXN0L2xhdGVuY3kvOTVwEigKCW9wZXJhdGlvbhobVGhlIHN0b3JhZ2Ugb3BlcmF0aW9uIG5hbWUuGAEgAyoCdXMyIkxhdGVuY3kgb2Ygc3RhbmRhcmQgcmVhZCByZXF1ZXN0cy46DFJlYWQgbGF0ZW5jeUI5YWdlbnQuZ29vZ2xlYXBpcy5jb20vY2Fzc2FuZHJhL2NsaWVudF9yZXF1ZXN0L2xhdGVuY3kvOTVwUggIBBICCDwaAAqZAgpucHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9jYXNzYW5kcmEvY2xpZW50X3JlcXVlc3QvbGF0ZW5jeS85OXASKAoJb3BlcmF0aW9uGhtUaGUgc3RvcmFnZSBvcGVyYXRpb24gbmFtZS4YASADKgJ1czIiTGF0ZW5jeSBvZiBzdGFuZGFyZCByZWFkIHJlcXVlc3RzLjoMUmVhZCBsYXRlbmN5QjlhZ2VudC5nb29nbGVhcGlzLmNvbS9jYXNzYW5kcmEvY2xpZW50X3JlcXVlc3QvbGF0ZW5jeS85OXBSCAgEEgIIPBoACpkCCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9jbGllbnRfcmVxdWVzdC9sYXRlbmN5L21heBIoCglvcGVyYXRpb24aG1RoZSBzdG9yYWdlIG9wZXJhdGlvbiBuYW1lLhgBIAMqAnVzMiJMYXRlbmN5IG9mIHN0YW5kYXJkIHJlYWQgcmVxdWVzdHMuOgxSZWFkIGxhdGVuY3lCOWFnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9jbGllbnRfcmVxdWVzdC9sYXRlbmN5L21heFIICAQSAgg8GgAKhgIKc3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vY2Fzc2FuZHJhL2NvbHVtbl9mYW1pbHkvY29tcHJlc3Npb25fcmF0aW8YASADKgExMitDdXJyZW50IGNvbXByZXNzaW9uIHJhdGlvIGZvciBhbGwgU1NUYWJsZXMuOhFDb21wcmVzc2lvbiByYXRpb0I+YWdlbnQuZ29vZ2xlYXBpcy5jb20vY2Fzc2FuZHJhL2NvbHVtbl9mYW1pbHkvY29tcHJlc3Npb25fcmF0aW9SCAgEEgIIPBoACu8BCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9jb2x1bW5fZmFtaWx5L21heF9yb3dfc2l6ZRgBIAMqAkJ5MiJTaXplIG9mIHRoZSBsYXJnZXN0IGNvbXBhY3RlZCByb3cuOgxNYXggcm93IHNpemVCOWFnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9jb2x1bW5fZmFtaWx5L21heF9yb3dfc2l6ZVIICAQSAgg8GgAK8QEKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vY2Fzc2FuZHJhL2NvbW1pdGxvZ190b3RhbF9zaXplGAEgAyoCQnkyLUN1cnJlbnQgZGF0YSBzaXplIG9mIGFsbCBjb21taXQgbG9nIHNlZ21lbnRzLjoPQ29tbWl0IGxvZyBzaXplQjNhZ2VudC5nb29nbGVhcGlzLmNvbS9jYXNzYW5kcmEvY29tbWl0bG9nX3RvdGFsX3NpemVSCAgEEgIIPBoACogCCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9jb21wbGV0ZWRfdGFza3MSKgoKc3RhZ2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIHF1ZXVlIHN0YWdlLhgDIAIqATEyI051bWJlciBvZiBjb21wbGV0ZWQgdGFza3MgaW4gcXVldWUuOg9Db21wbGV0ZWQgdGFza3NCLmFnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9jb21wbGV0ZWRfdGFza3NSCAgEEgIIPBoACsUCCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9jdXJyZW50X3Rhc2tzEioKCnN0YWdlX25hbWUaHFRoZSBuYW1lIG9mIHRoZSBxdWV1ZSBzdGFnZS4SOAoLdGFza19zdGF0dXMaKVRoZSBzdGF0dXMgb2YgdGhlIHRhc2sgKHBlbmRpbmcsIGFjdGl2ZSkuGAEgAyoBMTI0TnVtYmVyIG9mIHRhc2tzIGluIHF1ZXVlIHdpdGggdGhlIGdpdmVuIHRhc2sgc3RhdHVzLjoFVGFza3NCLGFnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9jdXJyZW50X3Rhc2tzUggIBBICCDwaAAqyAgpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9jYXNzYW5kcmEvZHJvcHBlZF9tZXNzYWdlL2Ryb3BwZWRfY291bnQSKAoJb3BlcmF0aW9uGhtUaGUgc3RvcmFnZSBvcGVyYXRpb24gbmFtZS4YAyACKgExMjJUb3RhbCBudW1iZXIgb2YgZHJvcHBlZCBtZXNzYWdlcyBmb3IgdGhlIG11dGF0aW9uLjoQRHJvcHBlZCBtZXNzYWdlc0I8YWdlbnQuZ29vZ2xlYXBpcy5jb20vY2Fzc2FuZHJhL2Ryb3BwZWRfbWVzc2FnZS9kcm9wcGVkX2NvdW50UggIBBICCDwaAAqOAgpzcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9jYXNzYW5kcmEvc3RvcmFnZV9zZXJ2aWNlX2V4Y2VwdGlvbl9jb3VudBgDIAIqATEyOlRoZSBudW1iZXIgb2YgZXhjZXB0aW9ucyB0aHJvd24gYnkgdGhlIHN0b3JhZ2Ugb3BlcmF0aW9ucy46CkV4Y2VwdGlvbnNCPmFnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9zdG9yYWdlX3NlcnZpY2VfZXhjZXB0aW9uX2NvdW50UggIBBICCDwaAArlAQpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9jYXNzYW5kcmEvc3RvcmFnZV9zZXJ2aWNlX2xvYWQYASADKgJCeTIkVG90YWwgZGlzayBzcGFjZSB1c2VkIGZvciB0aGlzIG5vZGUuOgxTdG9yYWdlIGxvYWRCM2FnZW50Lmdvb2dsZWFwaXMuY29tL2Nhc3NhbmRyYS9zdG9yYWdlX3NlcnZpY2VfbG9hZFIICAQSAgg8GgAK/gEKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vY291Y2hkYi9hdmVyYWdlX3JlcXVlc3RfdGltZRInCgtzZXJ2ZXJfbmFtZRoYVGhlIGNvdWNoZGIgc2VydmVyIG5hbWUuGAEgAyoCbXMyFUF2ZXJhZ2UgcmVxdWVzdCB0aW1lLjoPUmVxdWVzdCBsYXRlbmN5QjFhZ2VudC5nb29nbGVhcGlzLmNvbS9jb3VjaGRiL2F2ZXJhZ2VfcmVxdWVzdF90aW1lUggIBBICCDwaAAqCAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9jb3VjaGRiL2h0dHBkL2J1bGtfcmVxdWVzdF9jb3VudBInCgtzZXJ2ZXJfbmFtZRoYVGhlIGNvdWNoZGIgc2VydmVyIG5hbWUuGAMgAioBMTIUQnVsayByZXF1ZXN0cyBjb3VudC46DUJ1bGsgcmVxdWVzdHNCNWFnZW50Lmdvb2dsZWFwaXMuY29tL2NvdWNoZGIvaHR0cGQvYnVsa19yZXF1ZXN0X2NvdW50UggIBBICCDwaAAruAQplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9jb3VjaGRiL2h0dHBkL3JlcXVlc3RfY291bnQSJwoLc2VydmVyX25hbWUaGFRoZSBjb3VjaGRiIHNlcnZlciBuYW1lLhgDIAIqATEyD1JlcXVlc3RzIGNvdW50LjoIUmVxdWVzdHNCMGFnZW50Lmdvb2dsZWFwaXMuY29tL2NvdWNoZGIvaHR0cGQvcmVxdWVzdF9jb3VudFIICAQSAgg8GgAKtgIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vY291Y2hkYi9odHRwZC9yZXF1ZXN0X21ldGhvZF9jb3VudBInCgtzZXJ2ZXJfbmFtZRoYVGhlIGNvdWNoZGIgc2VydmVyIG5hbWUuEiYKC2h0dHBfbWV0aG9kGhdBbiBIVFRQIHJlcXVlc3QgbWV0aG9kLhgDIAIqATEyGkhUVFAgcmVxdWVzdCBtZXRob2QgY291bnQuOg9SZXF1ZXN0IG1ldGhvZHNCN2FnZW50Lmdvb2dsZWFwaXMuY29tL2NvdWNoZGIvaHR0cGQvcmVxdWVzdF9tZXRob2RfY291bnRSCAgEEgIIPBoACrgCCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2NvdWNoZGIvaHR0cGQvcmVzcG9uc2VfY29kZV9jb3VudBInCgtzZXJ2ZXJfbmFtZRoYVGhlIGNvdWNoZGIgc2VydmVyIG5hbWUuEiUKDXJlc3BvbnNlX2NvZGUaFEFuIEhUVFAgc3RhdHVzIGNvZGUuGAMgAioBMTIgSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZSBjb3VudC46DlJlc3BvbnNlIGNvZGVzQjZhZ2VudC5nb29nbGVhcGlzLmNvbS9jb3VjaGRiL2h0dHBkL3Jlc3BvbnNlX2NvZGVfY291bnRSCAgEEgIIPBoACpkCCnFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2NvdWNoZGIvaHR0cGQvdGVtcG9yYXJ5X3ZpZXdfcmVhZF9jb3VudBInCgtzZXJ2ZXJfbmFtZRoYVGhlIGNvdWNoZGIgc2VydmVyIG5hbWUuGAMgAioBMTIbVGVtcG9yYXJ5IHZpZXcgcmVhZHMgY291bnQuOg9UZW1wIHZpZXcgcmVhZHNCPGFnZW50Lmdvb2dsZWFwaXMuY29tL2NvdWNoZGIvaHR0cGQvdGVtcG9yYXJ5X3ZpZXdfcmVhZF9jb3VudFIICAQSAgg8GgAK9gEKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vY291Y2hkYi9odHRwZC92aWV3X3JlYWRfY291bnQSJwoLc2VydmVyX25hbWUaGFRoZSBjb3VjaGRiIHNlcnZlciBuYW1lLhgDIAIqATEyEVZpZXcgcmVhZHMgY291bnQuOgpWaWV3IHJlYWRzQjJhZ2VudC5nb29nbGVhcGlzLmNvbS9jb3VjaGRiL2h0dHBkL3ZpZXdfcmVhZF9jb3VudFIICAQSAgg8GgAK9AEKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vY291Y2hkYi9vcGVuX2RhdGFiYXNlcxInCgtzZXJ2ZXJfbmFtZRoYVGhlIGNvdWNoZGIgc2VydmVyIG5hbWUuGAEgAyoBMTIZTnVtYmVyIG9mIG9wZW4gZGF0YWJhc2VzLjoOT3BlbiBkYXRhYmFzZXNCK2FnZW50Lmdvb2dsZWFwaXMuY29tL2NvdWNoZGIvb3Blbl9kYXRhYmFzZXNSCAgEEgIIPBoACuQBClxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2NvdWNoZGIvb3Blbl9maWxlcxInCgtzZXJ2ZXJfbmFtZRoYVGhlIGNvdWNoZGIgc2VydmVyIG5hbWUuGAEgAyoBMTIVTnVtYmVyIG9mIG9wZW4gZmlsZXMuOgpPcGVuIGZpbGVzQidhZ2VudC5nb29nbGVhcGlzLmNvbS9jb3VjaGRiL29wZW5fZmlsZXNSCAgEEgIIPBoACt4BClxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2NvdWNoZGIvcmVhZF9jb3VudBInCgtzZXJ2ZXJfbmFtZRoYVGhlIGNvdWNoZGIgc2VydmVyIG5hbWUuGAMgAioBMTIURGF0YWJhc2UgcmVhZCBjb3VudC46BVJlYWRzQidhZ2VudC5nb29nbGVhcGlzLmNvbS9jb3VjaGRiL3JlYWRfY291bnRSCAgEEgIIPBoACuIBCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2NvdWNoZGIvd3JpdGVfY291bnQSJwoLc2VydmVyX25hbWUaGFRoZSBjb3VjaGRiIHNlcnZlciBuYW1lLhgDIAIqATEyFURhdGFiYXNlIHdyaXRlIGNvdW50LjoGV3JpdGVzQihhZ2VudC5nb29nbGVhcGlzLmNvbS9jb3VjaGRiL3dyaXRlX2NvdW50UggIBBICCDwaAAq8AQpWcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9jcHUvbG9hZF8xNW0YASADKgExMh5DUFUgTG9hZCAoMTUgbWludXRlIGludGVydmFscyk6DkNQVSBsb2FkICgxNW0pQiFhZ2VudC5nb29nbGVhcGlzLmNvbS9jcHUvbG9hZF8xNW1SCAgEEgIIPBoACrgBClVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2NwdS9sb2FkXzFtGAEgAyoBMTIdQ1BVIExvYWQgKDEgbWludXRlIGludGVydmFscyk6DUNQVSBsb2FkICgxbSlCIGFnZW50Lmdvb2dsZWFwaXMuY29tL2NwdS9sb2FkXzFtUggIBBICCDwaAAq4AQpVcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9jcHUvbG9hZF81bRgBIAMqATEyHUNQVSBMb2FkICg1IG1pbnV0ZSBpbnRlcnZhbHMpOg1DUFUgbG9hZCAoNW0pQiBhZ2VudC5nb29nbGVhcGlzLmNvbS9jcHUvbG9hZF81bVIICAQSAgg8GgAKgwIKWHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vY3B1L3VzYWdlX3RpbWUSKAoKY3B1X251bWJlchoaQ1BVIG51bWJlciAoMCwgMSwgMiwgZXRjLikSMQoJY3B1X3N0YXRlGiRDUFUgc3RhdGUgKHVzZXIsIHN5c3RlbSwgd2FpdCwgZXRjLikYAyACKgFzMglDUFUgVXNhZ2U6CUNQVSB1c2FnZUIjYWdlbnQuZ29vZ2xlYXBpcy5jb20vY3B1L3VzYWdlX3RpbWVSCAgEEgIIPBoACpUCCllwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2NwdS91dGlsaXphdGlvbhIoCgpjcHVfbnVtYmVyGhpDUFUgbnVtYmVyICgwLCAxLCAyLCBldGMuKRIxCgljcHVfc3RhdGUaJENQVSBzdGF0ZSAodXNlciwgc3lzdGVtLCB3YWl0LCBldGMuKRgBIAMqASUyE0NQVSBVc2FnZSAocGVyY2VudCk6D0NQVSB1dGlsaXphdGlvbkIkYWdlbnQuZ29vZ2xlYXBpcy5jb20vY3B1L3V0aWxpemF0aW9uUggIBBICCDwaAAr3AQpZcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9kaXNrL2J5dGVzX3VzZWQSFgoGZGV2aWNlGgxEZXZpY2UgbmFtZS4SLQoFc3RhdGUaJFR5cGUgb2YgdXNhZ2UgKGZyZWUsIHVzZWQsIHJlc2VydmVkKRgBIAMqAkJ5Mg9EaXNrIGJ5dGVzIHVzZWQ6CkRpc2sgdXNhZ2VCJGFnZW50Lmdvb2dsZWFwaXMuY29tL2Rpc2svYnl0ZXNfdXNlZFIICAQSAgg8GgAK6wEKVnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vZGlzay9pb190aW1lEhYKBmRldmljZRoMRGV2aWNlIG5hbWUuGAMgAioBczIuQXZlcmFnZSB0aW1lIGFuIEkvTy1vcGVyYXRpb24gdG9vayB0byBjb21wbGV0ZToVRGlzayBhdmVyYWdlIEkvTyB0aW1lQiFhZ2VudC5nb29nbGVhcGlzLmNvbS9kaXNrL2lvX3RpbWVSCAgEEgIIPBoACo8CCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2Rpc2svbWVyZ2VkX29wZXJhdGlvbnMSFgoGZGV2aWNlGgxEZXZpY2UgbmFtZS4SJAoJZGlyZWN0aW9uGhdEaXJlY3Rpb24gKHJlYWQsIHdyaXRlKRgDIAIqATEyF01lcmdlZCBPcGVyYXRpb25zIENvdW50OhZEaXNrIG1lcmdlZCBvcGVyYXRpb25zQithZ2VudC5nb29nbGVhcGlzLmNvbS9kaXNrL21lcmdlZF9vcGVyYXRpb25zUggIBBICCDwaAAqCAgpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9kaXNrL29wZXJhdGlvbl9jb3VudBIWCgZkZXZpY2UaDERldmljZSBuYW1lLhIkCglkaXJlY3Rpb24aF0RpcmVjdGlvbiAocmVhZCwgd3JpdGUpGAMgAioBMTIVRGlzayBPcGVyYXRpb25zIENvdW50Og9EaXNrIG9wZXJhdGlvbnNCKWFnZW50Lmdvb2dsZWFwaXMuY29tL2Rpc2svb3BlcmF0aW9uX2NvdW50UggIBBICCDwaAAqMAgpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9kaXNrL29wZXJhdGlvbl90aW1lEhYKBmRldmljZRoMRGV2aWNlIG5hbWUuEiQKCWRpcmVjdGlvbhoXRGlyZWN0aW9uIChyZWFkLCB3cml0ZSkYAyACKgFzMh1UaW1lIFNwZW50IEluIERpc2sgT3BlcmF0aW9uczoTRGlzayBvcGVyYXRpb24gdGltZUIoYWdlbnQuZ29vZ2xlYXBpcy5jb20vZGlzay9vcGVyYXRpb25fdGltZVIICAQSAgg8GgAK7QEKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vZGlzay9wZW5kaW5nX29wZXJhdGlvbnMSFgoGZGV2aWNlGgxEZXZpY2UgbmFtZS4YASADKgExMhhQZW5kaW5nIE9wZXJhdGlvbnMgQ291bnQ6F0Rpc2sgcGVuZGluZyBvcGVyYXRpb25zQixhZ2VudC5nb29nbGVhcGlzLmNvbS9kaXNrL3BlbmRpbmdfb3BlcmF0aW9uc1IICAQSAgg8GgAKggIKW3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vZGlzay9wZXJjZW50X3VzZWQSFgoGZGV2aWNlGgxEZXZpY2UgbmFtZS4SLQoFc3RhdGUaJFR5cGUgb2YgdXNhZ2UgKGZyZWUsIHVzZWQsIHJlc2VydmVkKRgBIAMqASUyEURpc2sgcGVyY2VudCB1c2VkOhBEaXNrIHV0aWxpemF0aW9uQiZhZ2VudC5nb29nbGVhcGlzLmNvbS9kaXNrL3BlcmNlbnRfdXNlZFIICAQSAgg8GgAK2QEKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vZGlzay9yZWFkX2J5dGVzX2NvdW50EhYKBmRldmljZRoMRGV2aWNlIG5hbWUuGAMgAioCQnkyD0Rpc2sgQnl0ZXMgUmVhZDoPRGlzayBieXRlcyByZWFkQiphZ2VudC5nb29nbGVhcGlzLmNvbS9kaXNrL3JlYWRfYnl0ZXNfY291bnRSCAgEEgIIPBoACuEBCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2Rpc2svd2VpZ2h0ZWRfaW9fdGltZRIWCgZkZXZpY2UaDERldmljZSBuYW1lLhgDIAIqAXMyEVdlaWdodGVkIEkvTyB0aW1lOhZEaXNrIHdlaWdodGVkIEkvTyB0aW1lQiphZ2VudC5nb29nbGVhcGlzLmNvbS9kaXNrL3dlaWdodGVkX2lvX3RpbWVSCAgEEgIIPBoACuUBCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2Rpc2svd3JpdGVfYnl0ZXNfY291bnQSFgoGZGV2aWNlGgxEZXZpY2UgbmFtZS4YAyACKgJCeTIWRGlzayBCeXRlcyBUcmFuc2ZlcnJlZDoSRGlzayBieXRlcyB3cml0dGVuQithZ2VudC5nb29nbGVhcGlzLmNvbS9kaXNrL3dyaXRlX2J5dGVzX2NvdW50UggIBBICCDwaAArGAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9lbGFzdGljc2VhcmNoL2NhY2hlX21lbW9yeV91c2FnZRItCgtzZXJ2ZXJfbmFtZRoeVGhlIGVsYXN0aWNzZWFyY2ggc2VydmVyIG5hbWUuEjYKCmNhY2hlX25hbWUaKENhY2hlIG5hbWUgKGVpdGhlciAnZmllbGQnIG9yICdmaWx0ZXInKS4YASADKgJCeTIcU2l6ZSBpbiBieXRlcyBvZiB0aGUgY2FjaGVzLjoKQ2FjaGUgc2l6ZUI1YWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC9jYWNoZV9tZW1vcnlfdXNhZ2VSCAgEEgIIPBoACpQCCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvZmllbGRfZXZpY3Rpb25fY291bnQSLQoLc2VydmVyX25hbWUaHlRoZSBlbGFzdGljc2VhcmNoIHNlcnZlciBuYW1lLhgDIAIqATEyGkV2aWN0aW9ucyBmcm9tIGZpZWxkIGNhY2hlOg9GaWVsZCBldmljdGlvbnNCN2FnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvZmllbGRfZXZpY3Rpb25fY291bnRSCAgEEgIIPBoACqQCCnNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvZmlsdGVyX2NhY2hlX2V2aWN0aW9uX2NvdW50Ei0KC3NlcnZlcl9uYW1lGh5UaGUgZWxhc3RpY3NlYXJjaCBzZXJ2ZXIgbmFtZS4YAyACKgExMhtFdmljdGlvbnMgZnJvbSBmaWx0ZXIgY2FjaGU6EEZpbHRlciBldmljdGlvbnNCPmFnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvZmlsdGVyX2NhY2hlX2V2aWN0aW9uX2NvdW50UggIBBICCDwaAAqJAgprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9lbGFzdGljc2VhcmNoL2djX2NvbGxlY3Rpb25fY291bnQSLQoLc2VydmVyX25hbWUaHlRoZSBlbGFzdGljc2VhcmNoIHNlcnZlciBuYW1lLhgDIAIqATEyGEdhcmJhZ2UgY29sbGVjdGlvbiBjb3VudDoIR0MgY291bnRCNmFnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvZ2NfY29sbGVjdGlvbl9jb3VudFIICAQSAgg8GgAKoQIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC9tZW1vcnlfdXNhZ2USLQoLc2VydmVyX25hbWUaHlRoZSBlbGFzdGljc2VhcmNoIHNlcnZlciBuYW1lLhIfCgttZW1vcnlfdHlwZRoQVGhlIG1lbW9yeSB0eXBlLhgBIAMqAkJ5MhhTaXplIGluIGJ5dGVzIG9mIG1lbW9yeS46DE1lbW9yeSB1c2FnZUIvYWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC9tZW1vcnlfdXNhZ2VSCAgEEgIIPBoACsACCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvbmV0d29yaxItCgtzZXJ2ZXJfbmFtZRoeVGhlIGVsYXN0aWNzZWFyY2ggc2VydmVyIG5hbWUuEiYKCWRpcmVjdGlvbhoZRGF0YSBkaXJlY3Rpb24sIHJ4IG9yIHR4LhgDIAIqAkJ5MjdOdW1iZXIgb2YgYnl0ZXMgdHJhbnNtaXR0ZWQgYW5kIHJlY2VpdmVkIG9uIHRoZSBuZXR3b3JrOg9OZXR3b3JrIHRyYWZmaWNCKmFnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvbmV0d29ya1IICAQSAgg8GgAKzAIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC9udW1fY3VycmVudF9kb2N1bWVudHMSLQoLc2VydmVyX25hbWUaHlRoZSBlbGFzdGljc2VhcmNoIHNlcnZlciBuYW1lLhIlCg1kb2N1bWVudF90eXBlGhREb2N1bWVudCBjb3VudCB0eXBlLhgBIAMqATEyL051bWJlciBvZiBkb2N1bWVudHMgaW4gdGhlIGluZGV4ZXMgb24gdGhpcyBub2RlOglEb2N1bWVudHNCOGFnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvbnVtX2N1cnJlbnRfZG9jdW1lbnRzUggIBBICCDwaAAqMAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9lbGFzdGljc2VhcmNoL251bV9kYXRhX25vZGVzEi0KC3NlcnZlcl9uYW1lGh5UaGUgZWxhc3RpY3NlYXJjaCBzZXJ2ZXIgbmFtZS4YASADKgExMiNOdW1iZXIgb2YgZGF0YSBub2RlcyBpbiB0aGUgY2x1c3RlcjoKRGF0YSBub2Rlc0IxYWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC9udW1fZGF0YV9ub2Rlc1IICAQSAgg8GgAKpwIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC9udW1faHR0cF9jb25uZWN0aW9ucxItCgtzZXJ2ZXJfbmFtZRoeVGhlIGVsYXN0aWNzZWFyY2ggc2VydmVyIG5hbWUuGAEgAyoBMTIsTnVtYmVyIG9mIG9wZW4gSFRUUCBjb25uZWN0aW9ucyB0byB0aGlzIG5vZGU6EE9wZW4gY29ubmVjdGlvbnNCN2FnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvbnVtX2h0dHBfY29ubmVjdGlvbnNSCAgEEgIIPBoACvgBCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvbnVtX25vZGVzEi0KC3NlcnZlcl9uYW1lGh5UaGUgZWxhc3RpY3NlYXJjaCBzZXJ2ZXIgbmFtZS4YASADKgExMh5OdW1iZXIgb2Ygbm9kZXMgaW4gdGhlIGNsdXN0ZXI6BU5vZGVzQixhZ2VudC5nb29nbGVhcGlzLmNvbS9lbGFzdGljc2VhcmNoL251bV9ub2Rlc1IICAQSAgg8GgAKowIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC9udW1fb3Blbl9maWxlcxItCgtzZXJ2ZXJfbmFtZRoeVGhlIGVsYXN0aWNzZWFyY2ggc2VydmVyIG5hbWUuGAEgAyoBMTI6TnVtYmVyIG9mIG9wZW4gZmlsZSBkZXNjcmlwdG9ycyBoZWxkIGJ5IHRoZSBzZXJ2ZXIgcHJvY2VzczoKT3BlbiBmaWxlc0IxYWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC9udW1fb3Blbl9maWxlc1IICAQSAgg8GgAKrwIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC9udW1fc2VydmVyX2Nvbm5lY3Rpb25zEi0KC3NlcnZlcl9uYW1lGh5UaGUgZWxhc3RpY3NlYXJjaCBzZXJ2ZXIgbmFtZS4YASADKgExMjBOdW1iZXIgb2Ygb3BlbiBuZXR3b3JrIGNvbm5lY3Rpb25zIHRvIHRoZSBzZXJ2ZXI6EE9wZW4gY29ubmVjdGlvbnNCOWFnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvbnVtX3NlcnZlcl9jb25uZWN0aW9uc1IICAQSAgg8GgAKwAIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC9udW1fc2hhcmRzEi0KC3NlcnZlcl9uYW1lGh5UaGUgZWxhc3RpY3NlYXJjaCBzZXJ2ZXIgbmFtZS4SUAoKc2hhcmRfdHlwZRpCU3RhdGUgb2YgdGhlIHNoYXJkIChhY3RpdmUsIHJlbG9jYXRpbmcsIGluaXRpYWxpemluZywgdW5hc3NpZ25lZCkuGAEgAyoBMTIRTnVtYmVyIG9mIHNoYXJkcy46BlNoYXJkc0ItYWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC9udW1fc2hhcmRzUggIBBICCDwaAAq1AgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9lbGFzdGljc2VhcmNoL29wZXJhdGlvbl9jb3VudBItCgtzZXJ2ZXJfbmFtZRoeVGhlIGVsYXN0aWNzZWFyY2ggc2VydmVyIG5hbWUuEiAKCW9wZXJhdGlvbhoTVGhlIG9wZXJhdGlvbiB0eXBlLhgDIAIqATEyHk51bWJlciBvZiBvcGVyYXRpb25zIGNvbXBsZXRlZDoUQ29tcGxldGVkIG9wZXJhdGlvbnNCMmFnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvb3BlcmF0aW9uX2NvdW50UggIBBICCDwaAAquAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9lbGFzdGljc2VhcmNoL29wZXJhdGlvbl90aW1lEi0KC3NlcnZlcl9uYW1lGh5UaGUgZWxhc3RpY3NlYXJjaCBzZXJ2ZXIgbmFtZS4SIAoJb3BlcmF0aW9uGhNUaGUgb3BlcmF0aW9uIHR5cGUuGAMgAioCbXMyHlRpbWUgaW4gbXMgc3BlbnQgb24gb3BlcmF0aW9uczoOT3BlcmF0aW9uIHRpbWVCMWFnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvb3BlcmF0aW9uX3RpbWVSCAgEEgIIPBoACr8CCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvcGVha190aHJlYWRzEi0KC3NlcnZlcl9uYW1lGh5UaGUgZWxhc3RpY3NlYXJjaCBzZXJ2ZXIgbmFtZS4YASADKgExMllNYXhpbXVtIG51bWJlciBvZiBvcGVuIHRocmVhZHMgdGhhdCBoYXZlIGJlZW4gb3BlbiBjb25jdXJyZW50bHkgaW4gdGhlIHNlcnZlciBKVk0gcHJvY2VzczoLTWF4IHRocmVhZHNCL2FnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvcGVha190aHJlYWRzUggIBBICCDwaAAqaAgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9lbGFzdGljc2VhcmNoL3N0b3JhZ2Vfc2l6ZRItCgtzZXJ2ZXJfbmFtZRoeVGhlIGVsYXN0aWNzZWFyY2ggc2VydmVyIG5hbWUuGAEgAyoCQnkyMlNpemUgaW4gYnl0ZXMgb2YgdGhlIGRvY3VtZW50IHN0b3JhZ2Ugb24gdGhpcyBub2RlOgxTdG9yYWdlIHNpemVCL2FnZW50Lmdvb2dsZWFwaXMuY29tL2VsYXN0aWNzZWFyY2gvc3RvcmFnZV9zaXplUggIBBICCDwaAAqIAgpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9lbGFzdGljc2VhcmNoL3RocmVhZHMSLQoLc2VydmVyX25hbWUaHlRoZSBlbGFzdGljc2VhcmNoIHNlcnZlciBuYW1lLhgBIAMqATEyME51bWJlciBvZiBvcGVuIHRocmVhZHMgaW4gdGhlIHNlcnZlciBKVk0gcHJvY2VzczoHVGhyZWFkc0IqYWdlbnQuZ29vZ2xlYXBpcy5jb20vZWxhc3RpY3NlYXJjaC90aHJlYWRzUggIBBICCDwaAArQAQpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9pcGMvY29ubmVjdGlvbnMYASADKgExMh9UaGUgbnVtYmVyIG9mIG9wZW4gY29ubmVjdGlvbnMuOg9JUEMgY29ubmVjdGlvbnNCKmFnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL2lwYy9jb25uZWN0aW9uc1IICAQSAgg8GgAK1AEKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvaXBjL3F1ZXVlX2xlbmd0aBgBIAMqATEyIlRoZSBjdXJyZW50IHNpemUgb2YgdGhlIElQQyBxdWV1ZS46DklQQyBxdWV1ZSBzaXplQithZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9pcGMvcXVldWVfbGVuZ3RoUggIBBICCDwaAAqPAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9pcGMvdHJhZmZpY19jb3VudBImCglkaXJlY3Rpb24aGURhdGEgZGlyZWN0aW9uLCByeCBvciB0eC4YAyACKgJCeTI1VGhlIG51bWJlciBvZiBieXRlcyB0cmFuc21pdHRlZCBhbmQgcmVjZWl2ZWQgdmlhIElQQy46C0lQQyB0cmFmZmljQixhZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9pcGMvdHJhZmZpY19jb3VudFIICAQSAgg8GgAKxgEKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvbWFzdGVyL2F2ZXJhZ2VfbG9hZBgBIAMqATEyGFRoZSBhdmVyYWdlIG1hc3RlciBsb2FkLjoETG9hZEIuYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvbWFzdGVyL2F2ZXJhZ2VfbG9hZFIICAQSAgg8GgAK7QEKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvbWFzdGVyL2RlYWRfcmVnaW9uX3NlcnZlcnMYASADKgExMiJUaGUgbnVtYmVyIG9mIGRlYWQgcmVnaW9uIHNlcnZlcnMuOhNEZWFkIHJlZ2lvbiBzZXJ2ZXJzQjVhZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9tYXN0ZXIvZGVhZF9yZWdpb25fc2VydmVyc1IICAQSAgg8GgAK7QEKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvbWFzdGVyL2xpdmVfcmVnaW9uX3NlcnZlcnMYASADKgExMiJUaGUgbnVtYmVyIG9mIGxpdmUgcmVnaW9uIHNlcnZlcnMuOhNMaXZlIHJlZ2lvbiBzZXJ2ZXJzQjVhZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9tYXN0ZXIvbGl2ZV9yZWdpb25fc2VydmVyc1IICAQSAgg8GgAKxwIKdXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvcmVnaW9uc2VydmVyL2Jsb2NrX2NhY2hlL2FjY2Vzc19jb3VudBIeCgRraW5kGhZUaGUgY2FjaGUgYWNjZXNzIGtpbmQuGAMgAioBMTJFVGhlIG51bWJlciBvZiBibG9ja3Mgb2YgU3RvcmVGaWxlcyAoSEZpbGVzKSByZXF1ZXN0ZWQgZnJvbSB0aGUgY2FjaGUuOhRCbG9jayBjYWNoZSBhY2Nlc3Nlc0JAYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvcmVnaW9uc2VydmVyL2Jsb2NrX2NhY2hlL2FjY2Vzc19jb3VudFIICAQSAgg8GgAKzwIKfXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvcmVnaW9uc2VydmVyL2Jsb2NrX2NhY2hlL2V2aWN0ZWRfYmxvY2tzX2NvdW50GAMgAioBMTJeVGhlIG51bWJlciBvZiBibG9ja3MgdGhhdCBoYWQgdG8gYmUgZXZpY3RlZCBmcm9tIHRoZSBibG9jayBjYWNoZSBkdWUgdG8gaGVhcCBzaXplIGNvbnN0cmFpbnRzLjoTRXZpY3RlZCBibG9jayBjb3VudEJIYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvcmVnaW9uc2VydmVyL2Jsb2NrX2NhY2hlL2V2aWN0ZWRfYmxvY2tzX2NvdW50UggIBBICCDwaAAqaAgp6cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvYmxvY2tfY2FjaGUvaGl0X3JhdGlvX3BlcmNlbnQYASADKgElMi1UaGUgcnVubmluZyBibG9jayBjYWNoZSBoaXQgcmF0aW8gKDAgdG8gMTAwKS46FUJsb2NrIGNhY2hlIGhpdCByYXRpb0JFYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvcmVnaW9uc2VydmVyL2Jsb2NrX2NhY2hlL2hpdF9yYXRpb19wZXJjZW50UggIBBICCDwaAAqcAgpvcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvYmxvY2tfY2FjaGUvbWVtb3J5EicKCnVzYWdlX2tpbmQaGVRoZSBraW5kIG9mIG1lbW9yeSB1c2FnZS4YASADKgJCeTIgTWVtb3J5IHVzYWdlIGJ5IHRoZSBibG9jayBjYWNoZS46EEJsb2NrIGNhY2hlIHNpemVCOmFnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3JlZ2lvbnNlcnZlci9ibG9ja19jYWNoZS9tZW1vcnlSCAgEEgIIPBoACowCCnJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3JlZ2lvbnNlcnZlci9ibG9ja19jYWNoZS9udW1faXRlbXMYASADKgExMjlUaGUgbnVtYmVyIG9mIGJsb2NrcyBvZiBTdG9yZUZpbGVzIChIRmlsZXMpIGluIHRoZSBjYWNoZS46C0Jsb2NrIGNvdW50Qj1hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvYmxvY2tfY2FjaGUvbnVtX2l0ZW1zUggIBBICCDwaAArsAQpucHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvY2FsbF9xdWV1ZS9sZW5ndGgYASADKgExMh1UaGUgbGVuZ3RoIG9mIHRoZSBjYWxsIHF1ZXVlLjoPQ2FsbCBxdWV1ZSBzaXplQjlhZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvY2FsbF9xdWV1ZS9sZW5ndGhSCAgEEgIIPBoACsICCnRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3JlZ2lvbnNlcnZlci9jb21wYWN0aW9uX3F1ZXVlL2xlbmd0aBgBIAMqATEyYVRoZSBsZW5ndGggb2YgdGhlIGNvbXBhY3Rpb24gcXVldWUgKHRoZSBudW1iZXIgb2Ygc3RvcmVzIHRoYXQgaGF2ZSBiZWVuIHRhcmdldGVkIGZvciBjb21wYWN0aW9uKS46FUNvbXBhY3Rpb24gcXVldWUgc2l6ZUI/YWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvcmVnaW9uc2VydmVyL2NvbXBhY3Rpb25fcXVldWUvbGVuZ3RoUggIBBICCDwaAAqQAgpvcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvZmx1c2hfcXVldWUvbGVuZ3RoGAEgAyoBMTI+VGhlIG51bWJlciBvZiBlbnF1ZXVlZCByZWdpb25zIGluIHRoZSBNZW1TdG9yZSBhd2FpdGluZyBmbHVzaC46EEZsdXNoIHF1ZXVlIHNpemVCOmFnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3JlZ2lvbnNlcnZlci9mbHVzaF9xdWV1ZS9sZW5ndGhSCAgEEgIIPBoACu8BCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3JlZ2lvbnNlcnZlci9tZW1vcnkvaGVhcF91c2FnZRgBIAMqAkJ5MiRIZWFwIHNwYWNlIHVzZWQgYnkgdGhlIHJlZ2lvbnNlcnZlci46CkhlYXAgdXNhZ2VCOWFnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3JlZ2lvbnNlcnZlci9tZW1vcnkvaGVhcF91c2FnZVIICAQSAgg8GgAK9gEKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvcmVnaW9uc2VydmVyL21lbXN0b3JlL2ZpbGVzGAEgAyoBMTIuVGhlIG51bWJlciBvZiBzdG9yZSBmaWxlcyBvbiB0aGUgcmVnaW9uc2VydmVyLjoOTWVtc3RvcmUgZmlsZXNCNmFnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3JlZ2lvbnNlcnZlci9tZW1zdG9yZS9maWxlc1IICAQSAgg8GgAKjQIKcHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvcmVnaW9uc2VydmVyL21lbXN0b3JlL2luZGV4X3NpemUYASADKgJCeTI1VGhlIHNpemUgb2YgdGhlIHN0b3JlIGZpbGUgaW5kZXggb24gdGhlIHJlZ2lvbnNlcnZlci46E01lbXN0b3JlIGluZGV4IHNpemVCO2FnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3JlZ2lvbnNlcnZlci9tZW1zdG9yZS9pbmRleF9zaXplUggIBBICCDwaAAqIAgpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvbWVtc3RvcmUvb3Blbl9zdG9yZXMYASADKgExMi5UaGUgbnVtYmVyIG9mIHN0b3JlcyBvcGVuIG9uIHRoZSByZWdpb25zZXJ2ZXIuOhRNZW1zdG9yZSBvcGVuIHN0b3Jlc0I8YWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvcmVnaW9uc2VydmVyL21lbXN0b3JlL29wZW5fc3RvcmVzUggIBBICCDwaAAr8AQpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvbWVtc3RvcmUvc2l6ZRgBIAMqAkJ5MjZUaGUgc3VtIG9mIGFsbCB0aGUgbWVtc3RvcmUgc2l6ZXMgaW4gdGhlIHJlZ2lvbnNlcnZlci46DU1lbXN0b3JlIHNpemVCNWFnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3JlZ2lvbnNlcnZlci9tZW1zdG9yZS9zaXplUggIBBICCDwaAAr5AQprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvb25saW5lX3JlZ2lvbnMYASADKgExMjFUaGUgbnVtYmVyIG9mIGFjdGl2ZSByZWdpb25zIGluIHRoZSByZWdpb25zZXJ2ZXIuOg5PbmxpbmUgcmVnaW9uc0I2YWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvcmVnaW9uc2VydmVyL29ubGluZV9yZWdpb25zUggIBBICCDwaAAqCAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvcmVxdWVzdF9jb3VudBIkCgxyZXF1ZXN0X3R5cGUaFFRoZSB0eXBlIG9mIHJlcXVlc3QuGAMgAioBMTIXVGhlIG51bWJlciBvZiByZXF1ZXN0cy46DVJlcXVlc3QgY291bnRCNWFnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3JlZ2lvbnNlcnZlci9yZXF1ZXN0X2NvdW50UggIBBICCDwaAAqJAgpwcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvcmVxdWVzdHMvdG90YWxfcmF0ZRgBIAMqAzEvczIzVGhlIHBvaW50LWluLXRpbWUgbnVtYmVyIG9mIFJlZ2lvblNlcnZlciBSUEMgY2FsbHMuOhBSUEMgcmVxdWVzdCByYXRlQjthZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvcmVxdWVzdHMvdG90YWxfcmF0ZVIICAQSAgg8GgAKqgIKcXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvcmVnaW9uc2VydmVyL3Nsb3dfb3BlcmF0aW9uX2NvdW50EjEKCW9wZXJhdGlvbhokVGhlIG9wZXJhdGlvbiBuYW1lIChlLmcuLCBnZXQsIHB1dCkuGAMgAioBMTIiVGhlIG51bWJlciBvZiBzbG93IGxvZyBvcGVyYXRpb25zLjoPU2xvdyBvcGVyYXRpb25zQjxhZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS9yZWdpb25zZXJ2ZXIvc2xvd19vcGVyYXRpb25fY291bnRSCAgEEgIIPBoACt0CCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3RocmlmdC9iYXRjaF9sYXRlbmN5L2F2ZXJhZ2USMQoJb3BlcmF0aW9uGiRUaGUgb3BlcmF0aW9uIG5hbWUgKGUuZy4sIGdldCwgcHV0KS4SKwoJdGhyaWZ0X2lkGh5UaGUgaWQgb2YgdGhlIHRocmlmdCBpbnN0YW5jZS4YASADKgJuczIkVGhyaWZ0IGxhdGVuY3kgZm9yIGJhdGNoIG9wZXJhdGlvbnMuOhxUaHJpZnQgYXZlcmFnZSBiYXRjaCBsYXRlbmN5QjdhZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS90aHJpZnQvYmF0Y2hfbGF0ZW5jeS9hdmVyYWdlUggIBBICCDwaAAqgAgprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS90aHJpZnQvY2FsbF9sYXRlbmN5L2F2ZXJhZ2USKwoJdGhyaWZ0X2lkGh5UaGUgaWQgb2YgdGhlIHRocmlmdCBpbnN0YW5jZS4YASADKgJuczIdVGhyaWZ0IGxhdGVuY3kgZm9yIGFsbCBjYWxscy46G1RocmlmdCBhdmVyYWdlIGNhbGwgbGF0ZW5jeUI2YWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvdGhyaWZ0L2NhbGxfbGF0ZW5jeS9hdmVyYWdlUggIBBICCDwaAAqQAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS90aHJpZnQvY2FsbF9xdWV1ZS9sZW5ndGgSKwoJdGhyaWZ0X2lkGh5UaGUgaWQgb2YgdGhlIHRocmlmdCBpbnN0YW5jZS4YASADKgExMhlUaHJpZnQgY2FsbCBxdWV1ZSBsZW5ndGguOhZUaHJpZnQgY2FsbCBxdWV1ZSBzaXplQjNhZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS90aHJpZnQvY2FsbF9xdWV1ZS9sZW5ndGhSCAgEEgIIPBoACrACCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3RocmlmdC9zbG93X2NhbGxfbGF0ZW5jeS9hdmVyYWdlEisKCXRocmlmdF9pZBoeVGhlIGlkIG9mIHRoZSB0aHJpZnQgaW5zdGFuY2UuGAEgAyoCbnMyHlRocmlmdCBsYXRlbmN5IGZvciBzbG93IGNhbGxzLjogVGhyaWZ0IGF2ZXJhZ2Ugc2xvdyBjYWxsIGxhdGVuY3lCO2FnZW50Lmdvb2dsZWFwaXMuY29tL2hiYXNlL3RocmlmdC9zbG93X2NhbGxfbGF0ZW5jeS9hdmVyYWdlUggIBBICCDwaAAqhAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9oYmFzZS90aHJpZnQvdGltZV9pbl9xdWV1ZS9hdmVyYWdlEisKCXRocmlmdF9pZBoeVGhlIGlkIG9mIHRoZSB0aHJpZnQgaW5zdGFuY2UuGAEgAyoCbnMyG1RocmlmdCB0aW1lIHNwZW50IGluIHF1ZXVlLjocVGhyaWZ0IGF2ZXJhZ2UgdGltZSBpbiBxdWV1ZUI3YWdlbnQuZ29vZ2xlYXBpcy5jb20vaGJhc2UvdGhyaWZ0L3RpbWVfaW5fcXVldWUvYXZlcmFnZVIICAQSAgg8GgAK2wEKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaWlzL2N1cnJlbnRfY29ubmVjdGlvbnMYASADKgExMiFDdXJyZW50bHkgb3BlbiBjb25uZWN0aW9ucyB0byBJSVM6FElJUyBvcGVuIGNvbm5lY3Rpb25zQixhZ2VudC5nb29nbGVhcGlzLmNvbS9paXMvY3VycmVudF9jb25uZWN0aW9uc1IICAQSAgg8GgAKnQIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaWlzL25ldHdvcmsvdHJhbnNmZXJyZWRfYnl0ZXNfY291bnQSJwoJZGlyZWN0aW9uGhpEaXJlY3Rpb24gKHNlbnQsIHJlY2VpdmVkKRgDIAIqAkJ5MiBOZXR3b3JrIGJ5dGVzIHRyYW5zZmVycmVkIGJ5IElJUzoVSUlTIHRyYW5zZmVycmVkIGJ5dGVzQjhhZ2VudC5nb29nbGVhcGlzLmNvbS9paXMvbmV0d29yay90cmFuc2ZlcnJlZF9ieXRlc19jb3VudFIICAQSAgg8GgAK0AEKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaWlzL25ld19jb25uZWN0aW9uX2NvdW50GAMgAioBMTIZQ29ubmVjdGlvbnMgb3BlbmVkIHRvIElJUzoPSUlTIGNvbm5lY3Rpb25zQi1hZ2VudC5nb29nbGVhcGlzLmNvbS9paXMvbmV3X2Nvbm5lY3Rpb25fY291bnRSCAgEEgIIPBoACoQCCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2lpcy9yZXF1ZXN0X2NvdW50EkgKC2h0dHBfbWV0aG9kGjlIdHRwIG1ldGhvZCAocG9zdCwgcHV0LCBnZXQsIGRlbGV0ZSwgb3B0aW9uLCB0cmFjZSwgaGVhZCkYAyACKgExMhRSZXF1ZXN0cyBtYWRlIHRvIElJUzoMSUlTIHJlcXVlc3RzQiZhZ2VudC5nb29nbGVhcGlzLmNvbS9paXMvcmVxdWVzdF9jb3VudFIICAQSAgg8GgAKmgIKWnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaW50ZXJmYWNlL2Vycm9ycxIpCgZkZXZpY2UaH1RoZSBuYW1lIG9mIHRoZSBuZXR3b3JrIGRldmljZS4SMgoJZGlyZWN0aW9uGiVUaGUgZGlyZWN0aW9uIG9mIHRoZSBuZXR3b3JrIHRyYWZmaWMuGAMgAioBMTIVTmV0d29yayBlcnJvciBjb3VudHMuOg5OZXR3b3JrIGVycm9yc0IlYWdlbnQuZ29vZ2xlYXBpcy5jb20vaW50ZXJmYWNlL2Vycm9yc1IICAQSAgg8GgAKogIKW3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vaW50ZXJmYWNlL3BhY2tldHMSKQoGZGV2aWNlGh9UaGUgbmFtZSBvZiB0aGUgbmV0d29yayBkZXZpY2UuEjIKCWRpcmVjdGlvbholVGhlIGRpcmVjdGlvbiBvZiB0aGUgbmV0d29yayB0cmFmZmljLhgDIAIqATEyGlBhY2tldHMgc2VudCBvdmVyIG5ldHdvcmsuOg9OZXR3b3JrIHBhY2tldHNCJmFnZW50Lmdvb2dsZWFwaXMuY29tL2ludGVyZmFjZS9wYWNrZXRzUggIBBICCDwaAAqsAgpbcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9pbnRlcmZhY2UvdHJhZmZpYxIpCgZkZXZpY2UaH1RoZSBuYW1lIG9mIHRoZSBuZXR3b3JrIGRldmljZS4SMgoJZGlyZWN0aW9uGiVUaGUgZGlyZWN0aW9uIG9mIHRoZSBuZXR3b3JrIHRyYWZmaWMuGAMgAioCQnkyI1RyYWZmaWMgb2YgYnl0ZXMgc2VudCBvdmVyIG5ldHdvcmsuOg9OZXR3b3JrIHRyYWZmaWNCJmFnZW50Lmdvb2dsZWFwaXMuY29tL2ludGVyZmFjZS90cmFmZmljUggIBBICCDwaAAqDAgpWcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9qdm0vZ2MvY291bnQSNgoHZ2NfbmFtZRorVGhlIG5hbWUgb2YgdGhlIGdhcmJhZ2UgY29sbGVjdG9yIGludm9sdmVkLhgDIAIqATEyM1RoZSB0b3RhbCBudW1iZXIgb2YgY29sbGVjdGlvbnMgdGhhdCBoYXZlIG9jY3VycmVkLjoIR0MgY291bnRCIWFnZW50Lmdvb2dsZWFwaXMuY29tL2p2bS9nYy9jb3VudFIICAQSAgg8GgAKhgIKVXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vanZtL2djL3RpbWUSNgoHZ2NfbmFtZRorVGhlIG5hbWUgb2YgdGhlIGdhcmJhZ2UgY29sbGVjdG9yIGludm9sdmVkLhgDIAIqAm1zMjhUaGUgYWNjdW11bGF0ZWQgY29sbGVjdGlvbiBlbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzLjoHR0MgdGltZUIgYWdlbnQuZ29vZ2xlYXBpcy5jb20vanZtL2djL3RpbWVSCAgEEgIIPBoACocCClpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2p2bS9tZW1vcnkvdXNhZ2USJgoLbWVtb3J5X3R5cGUaF1RoZSB0eXBlIG9mIHRoZSBtZW1vcnkuEicKCnVzYWdlX2tpbmQaGVRoZSBraW5kIG9mIG1lbW9yeSB1c2FnZS4YASADKgJCeTIRVGhlIG1lbW9yeSB1c2FnZS46DE1lbW9yeSB1c2FnZUIlYWdlbnQuZ29vZ2xlYXBpcy5jb20vanZtL21lbW9yeS91c2FnZVIICAQSAgg8GgAK7QEKWXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vanZtL29zL2NwdV90aW1lGAMgAioCbnMyTlRoZSBDUFUgdGltZSB1c2VkIGJ5IHRoZSBwcm9jZXNzIG9uIHdoaWNoIHRoZSBKYXZhIHZpcnR1YWwgbWFjaGluZSBpcyBydW5uaW5nLjoIQ1BVIHRpbWVCJGFnZW50Lmdvb2dsZWFwaXMuY29tL2p2bS9vcy9jcHVfdGltZVIICAQSAgg8GgAKyAEKW3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vanZtL29zL29wZW5fZmlsZXMYASADKgExMiRUaGUgbnVtYmVyIG9mIG9wZW4gZmlsZSBkZXNjcmlwdG9ycy46Ck9wZW4gZmlsZXNCJmFnZW50Lmdvb2dsZWFwaXMuY29tL2p2bS9vcy9vcGVuX2ZpbGVzUggIBBICCDwaAAraAQpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9qdm0vdGhyZWFkL251bV9kYWVtb24YASADKgExMipUaGUgY3VycmVudCBudW1iZXIgb2YgbGl2ZSBkYWVtb24gdGhyZWFkcy46DkRhZW1vbiB0aHJlYWRzQiphZ2VudC5nb29nbGVhcGlzLmNvbS9qdm0vdGhyZWFkL251bV9kYWVtb25SCAgEEgIIPBoACsgBCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2p2bS90aHJlYWQvbnVtX2xpdmUYASADKgExMiNUaGUgY3VycmVudCBudW1iZXIgb2YgbGl2ZSB0aHJlYWRzLjoHVGhyZWFkc0IoYWdlbnQuZ29vZ2xlYXBpcy5jb20vanZtL3RocmVhZC9udW1fbGl2ZVIICAQSAgg8GgAKwQEKWXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vanZtL3RocmVhZC9wZWFrGAEgAyoBMTIgVGhlIHBlYWsgbnVtYmVyIG9mIGxpdmUgdGhyZWFkcy46C01heCB0aHJlYWRzQiRhZ2VudC5nb29nbGVhcGlzLmNvbS9qdm0vdGhyZWFkL3BlYWtSCAgEEgIIPBoACroBClRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2p2bS91cHRpbWUYAyACKgJtczInVGhlIHVwdGltZSBvZiB0aGUgSmF2YSB2aXJ0dWFsIG1hY2hpbmUuOgZVcHRpbWVCH2FnZW50Lmdvb2dsZWFwaXMuY29tL2p2bS91cHRpbWVSCAgEEgIIPBoACrECCnJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2thZmthL2Jyb2tlci90b3BpY3MvZmFpbGVkX3JlcXVlc3RfY291bnQSOgoMcmVxdWVzdF90eXBlGipUaGUgdHlwZSBvZiB0aGUgcmVxdWVzdCwgZmV0Y2ggb3IgcHJvZHVjZS4YAyACKgExMh5UaGUgbnVtYmVyIG9mIGZhaWxlZCByZXF1ZXN0cy46D0ZhaWxlZCByZXF1ZXN0c0I9YWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvYnJva2VyL3RvcGljcy9mYWlsZWRfcmVxdWVzdF9jb3VudFIICAQSAgg8GgAKiwIKdHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvYnJva2VyL3RvcGljcy9pbmNvbWluZ19tZXNzYWdlX2NvdW50GAMgAioBMTIuVGhlIG51bWJlciBvZiBpbmNvbWluZyBtZXNzYWdlcyBpbiBhbGwgdG9waWNzLjoRSW5jb21pbmcgbWVzc2FnZXNCP2FnZW50Lmdvb2dsZWFwaXMuY29tL2thZmthL2Jyb2tlci90b3BpY3MvaW5jb21pbmdfbWVzc2FnZV9jb3VudFIICAQSAgg8GgAKkwIKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvYnJva2VyL3RvcGljcy90cmFmZmljEicKCWRpcmVjdGlvbhoaRGF0YSBkaXJlY3Rpb24sIGluIG9yIG91dC4YAyACKgJCeTI0VGhlIG51bWJlciBvZiBieXRlcyBzZW50IGFuZCByZWNlaXZlZCBpbiBhbGwgdG9waWNzLjoHVHJhZmZpY0IwYWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvYnJva2VyL3RvcGljcy90cmFmZmljUggIBBICCDwaAAr0AQpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9rYWZrYS9jb250cm9sbGVyL2thZmthL2FjdGl2ZRgBIAMqATEyMFRoZSBudW1iZXIgb2YgYWN0aXZlIGNvbnRyb2xsZXJzIGluIHRoZSBjbHVzdGVyLjoSQWN0aXZlIGNvbnRyb2xsZXJzQjJhZ2VudC5nb29nbGVhcGlzLmNvbS9rYWZrYS9jb250cm9sbGVyL2thZmthL2FjdGl2ZVIICAQSAgg8GgAKvwIKc3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvY29udHJvbGxlci9rYWZrYS9vZmZsaW5lX3BhcnRpdGlvbnMYASADKgExMmNUaGUgbnVtYmVyIG9mIHBhcnRpdGlvbnMgdGhhdCBkb27igJl0IGhhdmUgYW4gYWN0aXZlIGxlYWRlciBhbmQgYXJlIGhlbmNlIG5vdCB3cml0YWJsZSBvciByZWFkYWJsZS46Ek9mZmxpbmUgcGFydGl0aW9uc0I+YWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvY29udHJvbGxlci9rYWZrYS9vZmZsaW5lX3BhcnRpdGlvbnNSCAgEEgIIPBoACo0CCnpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2thZmthL2NvbnRyb2xsZXIvbGVhZGVyX2VsZWN0aW9ucy9lbGVjdGlvbl9jb3VudBgDIAIqATEyJVRoZSB0b3RhbCBudW1iZXIgb2YgbGVhZGVyIGVsZWN0aW9ucy46EExlYWRlciBlbGVjdGlvbnNCRWFnZW50Lmdvb2dsZWFwaXMuY29tL2thZmthL2NvbnRyb2xsZXIvbGVhZGVyX2VsZWN0aW9ucy9lbGVjdGlvbl9jb3VudFIICAQSAgg8GgAKsQIKeXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvY29udHJvbGxlci9sZWFkZXJfZWxlY3Rpb25zL3VuY2xlYW5fY291bnQYAyACKgExMkVUaGUgdG90YWwgbnVtYmVyIG9mIGxlYWRlciBlbGVjdGlvbnMgd2hlcmUgdGhlIGxlYWRlciBpcyBvdXQtb2Ytc3luYy46FlN0YWxlIGxlYWRlciBlbGVjdGlvbnNCRGFnZW50Lmdvb2dsZWFwaXMuY29tL2thZmthL2NvbnRyb2xsZXIvbGVhZGVyX2VsZWN0aW9ucy91bmNsZWFuX2NvdW50UggIBBICCDwaAArDAQpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9rYWZrYS9sb2cvZmx1c2hfY291bnQYAyACKgExMhpUaGUgbnVtYmVyIG9mIGxvZyBmbHVzaGVzLjoHRmx1c2hlc0IqYWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvbG9nL2ZsdXNoX2NvdW50UggIBBICCDwaAAqJAgplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9rYWZrYS9uZXR3b3JrL3JlcXVlc3RfY291bnQSOgoMcmVxdWVzdF90eXBlGipUaGUgdHlwZSBvZiB0aGUgcmVxdWVzdCwgZmV0Y2ggb3IgcHJvZHVjZS4YAyACKgExMhdUaGUgbnVtYmVyIG9mIHJlcXVlc3RzLjoIUmVxdWVzdHNCMGFnZW50Lmdvb2dsZWFwaXMuY29tL2thZmthL25ldHdvcmsvcmVxdWVzdF9jb3VudFIICAQSAgg8GgAKygIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvcHVyZ2F0b3J5L251bV9kZWxheWVkX3JlcXVlc3RzEjoKDHJlcXVlc3RfdHlwZRoqVGhlIHR5cGUgb2YgdGhlIHJlcXVlc3QsIGZldGNoIG9yIHByb2R1Y2UuGAEgAyoBMTI0VGhlIGN1cnJlbnQgbnVtYmVyIG9mIGRlbGF5ZWQgcmVxdWVzdHMgaW4gcHVyZ2F0b3J5LjoaRGVsYXllZCBwdXJnYXRvcnkgcmVxdWVzdHNCOWFnZW50Lmdvb2dsZWFwaXMuY29tL2thZmthL3B1cmdhdG9yeS9udW1fZGVsYXllZF9yZXF1ZXN0c1IICAQSAgg8GgAKmgIKXnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvcHVyZ2F0b3J5L3NpemUSOgoMcmVxdWVzdF90eXBlGipUaGUgdHlwZSBvZiB0aGUgcmVxdWVzdCwgZmV0Y2ggb3IgcHJvZHVjZS4YASADKgExMixUaGUgY3VycmVudCBudW1iZXIgb2YgcmVxdWVzdHMgaW4gcHVyZ2F0b3J5LjoSUHVyZ2F0b3J5IHJlcXVlc3RzQilhZ2VudC5nb29nbGVhcGlzLmNvbS9rYWZrYS9wdXJnYXRvcnkvc2l6ZVIICAQSAgg8GgAKggIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvcmVwbGljYV9mZXRjaGVyL21heF9sYWcYASADKgExMkVUaGUgbWF4aW11bSBsYWcgaW4gbWVzc2FnZXMgYmV0d2VlbiB0aGUgZm9sbG93ZXIgYW5kIGxlYWRlciByZXBsaWNhcy46C01heGltdW0gbGFnQjJhZ2VudC5nb29nbGVhcGlzLmNvbS9rYWZrYS9yZXBsaWNhX2ZldGNoZXIvbWF4X2xhZ1IICAQSAgg8GgAKpwIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvcmVwbGljYV9mZXRjaGVyL21pbl9mZXRjaF9yYXRlGAEgAyoDMS9zMlNUaGUgbWluaW11bSByYXRlIGF0IHdoaWNoIHRoZSBmb2xsb3dlciByZXBsaWNhcyBzZW5kIGZldGNoIHJlcXVlc3RzIHRvIHRoZSBsZWFkZXJzLjoSTWluaW11bSBmZXRjaCByYXRlQjlhZ2VudC5nb29nbGVhcGlzLmNvbS9rYWZrYS9yZXBsaWNhX2ZldGNoZXIvbWluX2ZldGNoX3JhdGVSCAgEEgIIPBoACo8CCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2thZmthL3JlcGxpY2FfbWFuYWdlci9pc3IvZXhwYW5kX2NvdW50GAMgAioBMTI7VGhlIG51bWJlciBvZiByZXBsaWNhcyBjYXRjaGluZyB1cCAoSVNSID0gaW4tc3luYyByZXBsaWNhKS46EEdhaW5pbmcgcmVwbGljYXNCO2FnZW50Lmdvb2dsZWFwaXMuY29tL2thZmthL3JlcGxpY2FfbWFuYWdlci9pc3IvZXhwYW5kX2NvdW50UggIBBICCDwaAAqSAgpwcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9rYWZrYS9yZXBsaWNhX21hbmFnZXIvaXNyL3Nocmlua19jb3VudBgDIAIqATEyPlRoZSBudW1iZXIgb2YgcmVwbGljYXMgbGFnZ2luZyBiZWhpbmQgKElTUiA9IGluLXN5bmMgcmVwbGljYSkuOhBMYWdnaW5nIHJlcGxpY2FzQjthZ2VudC5nb29nbGVhcGlzLmNvbS9rYWZrYS9yZXBsaWNhX21hbmFnZXIvaXNyL3Nocmlua19jb3VudFIICAQSAgg8GgAK5gEKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvcmVwbGljYV9tYW5hZ2VyL2xlYWRlcnMYASADKgExMi1UaGUgY3VycmVudCBudW1iZXIgb2YgbGVhZGVycyBvbiB0aGlzIGJyb2tlci46B0xlYWRlcnNCMmFnZW50Lmdvb2dsZWFwaXMuY29tL2thZmthL3JlcGxpY2FfbWFuYWdlci9sZWFkZXJzUggIBBICCDwaAAryAQpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9rYWZrYS9yZXBsaWNhX21hbmFnZXIvcGFydGl0aW9ucxgBIAMqATEyMFRoZSBjdXJyZW50IG51bWJlciBvZiBwYXJ0aXRpb25zIG9uIHRoaXMgYnJva2VyLjoKUGFydGl0aW9uc0I1YWdlbnQuZ29vZ2xlYXBpcy5jb20va2Fma2EvcmVwbGljYV9tYW5hZ2VyL3BhcnRpdGlvbnNSCAgEEgIIPBoACqECCntwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL2thZmthL3JlcGxpY2FfbWFuYWdlci91bmRlcl9yZXBsaWNhdGVkX3BhcnRpdGlvbnMYASADKgExMjJUaGUgY3VycmVudCBudW1iZXIgb2YgdW5kZXItcmVwbGljYXRlZCBwYXJ0aXRpb25zLjoVVW5yZWxpYWJsZSBwYXJ0aXRpb25zQkZhZ2VudC5nb29nbGVhcGlzLmNvbS9rYWZrYS9yZXBsaWNhX21hbmFnZXIvdW5kZXJfcmVwbGljYXRlZF9wYXJ0aXRpb25zUggIBBICCDwaAAqIAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9tZW1jYWNoZWQvY29tbWFuZF9jb3VudBIgCgpjYWNoZV9uYW1lGhJUaGUgbWVtY2FjaGUgbmFtZS4SJAoHY29tbWFuZBoZQSBtZW1jYWNoZWQgY29tbWFuZCBuYW1lLhgDIAIqATEyEkNvbW1hbmRzIGV4ZWN1dGVkLjoIQ29tbWFuZHNCLGFnZW50Lmdvb2dsZWFwaXMuY29tL21lbWNhY2hlZC9jb21tYW5kX2NvdW50UggIBBICCDwaAAqKAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9tZW1jYWNoZWQvY3VycmVudF9jb25uZWN0aW9ucxIgCgpjYWNoZV9uYW1lGhJUaGUgbWVtY2FjaGUgbmFtZS4YASADKgExMitOdW1iZXIgb2YgY3VycmVudCBjb25uZWN0aW9ucyB0byB0aGUgY2FjaGUuOgtDb25uZWN0aW9uc0IyYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL2N1cnJlbnRfY29ubmVjdGlvbnNSCAgEEgIIPBoACvsBCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL21lbWNhY2hlZC9jdXJyZW50X2l0ZW1zEiAKCmNhY2hlX25hbWUaElRoZSBtZW1jYWNoZSBuYW1lLhgBIAMqATEyLk51bWJlciBvZiBpdGVtcyBjdXJyZW50bHkgc3RvcmVkIGluIHRoZSBjYWNoZS46BUl0ZW1zQixhZ2VudC5nb29nbGVhcGlzLmNvbS9tZW1jYWNoZWQvY3VycmVudF9pdGVtc1IICAQSAgg8GgAK6AEKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL2V2aWN0aW9uX2NvdW50EiAKCmNhY2hlX25hbWUaElRoZSBtZW1jYWNoZSBuYW1lLhgDIAIqATEyFUNhY2hlIGl0ZW0gZXZpY3Rpb25zLjoJRXZpY3Rpb25zQi1hZ2VudC5nb29nbGVhcGlzLmNvbS9tZW1jYWNoZWQvZXZpY3Rpb25fY291bnRSCAgEEgIIPBoACoECClpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL21lbWNhY2hlZC9tZW1vcnkSIAoKY2FjaGVfbmFtZRoSVGhlIG1lbWNhY2hlIG5hbWUuEisKDG1lbV9jYXRlZ29yeRobTWVtb3J5IGZyZWUgb3IgbWVtb3J5IHVzZWQuGAEgAyoCQnkyDU1lbW9yeSB1c2FnZS46DE1lbW9yeSB1c2FnZUIlYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL21lbW9yeVIICAQSAgg8GgAKjwIKW3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL25ldHdvcmsSIAoKY2FjaGVfbmFtZRoSVGhlIG1lbWNhY2hlIG5hbWUuEiYKCWRpcmVjdGlvbhoZRGF0YSBkaXJlY3Rpb24sIHJ4IG9yIHR4LhgDIAIqAkJ5MiNCeXRlcyB0cmFuc2ZlcnJlZCBvdmVyIHRoZSBuZXR3b3JrLjoHVHJhZmZpY0ImYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL25ldHdvcmtSCAgEEgIIPBoACosDCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL21lbWNhY2hlZC9vcGVyYXRpb25fY291bnQSIAoKY2FjaGVfbmFtZRoSVGhlIG1lbWNhY2hlIG5hbWUuEkoKCW9wZXJhdGlvbho9QSBtZW1jYWNoZWQgb3BlcmF0aW9uIG5hbWUgKGVpdGhlciAnaW5jcicsICdkZWNyJywgb3IgJ2dldCcpLhJDCgR0eXBlGjtBIG1lbWNhY2hlZCBvcGVyYXRpb24gc3RhdGlzdGljIChlaXRoZXIgJ2hpdHMnIG9yICdtaXNzZXMnKRgDIAIqATEyJE1lbWNhY2hlZCBvcGVyYXRpb24gaGl0L21pc3MgY291bnRzLjoKT3BlcmF0aW9uc0IuYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL29wZXJhdGlvbl9jb3VudFIICAQSAgg8GgAKygIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL29wZXJhdGlvbl9oaXRyYXRpbxIgCgpjYWNoZV9uYW1lGhJUaGUgbWVtY2FjaGUgbmFtZS4SSgoJb3BlcmF0aW9uGj1BIG1lbWNhY2hlZCBvcGVyYXRpb24gbmFtZSAoZWl0aGVyICdpbmNyJywgJ2RlY3InLCBvciAnZ2V0JykuGAEgAyoBJTIjSGl0IHJhdGlvIGZvciBtZW1jYWNoZWQgb3BlcmF0aW9ucy46CUhpdCByYXRpb0IxYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL29wZXJhdGlvbl9oaXRyYXRpb1IICAQSAgg8GgAKoAIKWnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL3J1c2FnZRIgCgpjYWNoZV9uYW1lGhJUaGUgbWVtY2FjaGUgbmFtZS4SOwoKdXNhZ2VfdHlwZRotU3lzdGVtIHV0aWxpemF0aW9uIChlaXRoZXIgJ3VzZXInIG9yICdzeXN0JykuGAMgAioBczIhQWNjdW11bGF0ZWQgdXNlciBhbmQgc3lzdGVtIHRpbWUuOghDUFUgdGltZUIlYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL3J1c2FnZVIICAQSAgg8GgAK9AEKW3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL3RocmVhZHMSIAoKY2FjaGVfbmFtZRoSVGhlIG1lbWNhY2hlIG5hbWUuGAEgAyoBMTIxTnVtYmVyIG9mIHRocmVhZHMgdXNlZCBieSB0aGUgbWVtY2FjaGVkIGluc3RhbmNlLjoHVGhyZWFkc0ImYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGVkL3RocmVhZHNSCAgEEgIIPBoACtsCCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL21lbW9yeS9ieXRlc191c2VkEkEKBXN0YXRlGjhPbmUgb2YgdGhlIGZvbGxvd2luZzogYnVmZmVyZWQsIGNhY2hlZCwgZnJlZSwgc2xhYiwgdXNlZBgBIAMqAkJ5MnFNZW1vcnkgdXNhZ2UgYnkgZWFjaCBtZW1vcnkgc3RhdGUsIGluIEJ5dGVzLiBTdW1taW5nIHZhbHVlcyBvZiBhbGwgc3RhdGVzIHlpZWxkcyB0aGUgdG90YWwgbWVtb3J5IG9uIHRoZSBtYWNoaW5lLjoMTWVtb3J5IHVzYWdlQiZhZ2VudC5nb29nbGVhcGlzLmNvbS9tZW1vcnkvYnl0ZXNfdXNlZFIICAQSAgg8GgAK2AIKXXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbWVtb3J5L3BlcmNlbnRfdXNlZBJBCgVzdGF0ZRo4T25lIG9mIHRoZSBmb2xsb3dpbmc6IGJ1ZmZlcmVkLCBjYWNoZWQsIGZyZWUsIHNsYWIsIHVzZWQYASADKgElMmVQZXJjZW50YWdlIG9mIG1lbW9yeSB1c2VkIGJ5IGVhY2ggbWVtb3J5IHN0YXRlLiBTdW1taW5nIHBlcmNlbnRhZ2VzIG9mIGFsbCBzdGF0ZXMgeWllbGRzIDEwMCBwZXJjZW50LjoSTWVtb3J5IHV0aWxpemF0aW9uQihhZ2VudC5nb29nbGVhcGlzLmNvbS9tZW1vcnkvcGVyY2VudF91c2VkUggIBBICCDwaAAq/AQpccHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9tb25nb2RiL2NhY2hlL2hpdHMYAyACKgExMhlUaGUgbnVtYmVyIG9mIGNhY2hlIGhpdHMuOgpDYWNoZSBoaXRzQidhZ2VudC5nb29nbGVhcGlzLmNvbS9tb25nb2RiL2NhY2hlL2hpdHNSCAgEEgIIPBoACscBCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL21vbmdvZGIvY2FjaGUvbWlzc2VzGAMgAioBMTIbVGhlIG51bWJlciBvZiBjYWNoZSBtaXNzZXMuOgxDYWNoZSBtaXNzZXNCKWFnZW50Lmdvb2dsZWFwaXMuY29tL21vbmdvZGIvY2FjaGUvbWlzc2VzUggIBBICCDwaAAr3AQpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9tb25nb2RiL2NvbGxlY3Rpb25zEjIKDWRhdGFiYXNlX25hbWUaIVRoZSBuYW1lIG9mIHRoZSBNb25nb0RCIGRhdGFiYXNlLhgBIAMqATEyGlRoZSBudW1iZXIgb2YgY29sbGVjdGlvbnMuOgtDb2xsZWN0aW9uc0IoYWdlbnQuZ29vZ2xlYXBpcy5jb20vbW9uZ29kYi9jb2xsZWN0aW9uc1IICAQSAgg8GgAKgwIKXXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbW9uZ29kYi9jb25uZWN0aW9ucxIwCg1kYXRhYmFzZV9uYW1lGh9UaGUgbmFtZSBvZiB0aGUgTW9uZ29EQiBzZXJ2ZXIuGAEgAyoBMTIoVGhlIG51bWJlciBvZiBhY3RpdmUgc2VydmVyIGNvbm5lY3Rpb25zLjoLQ29ubmVjdGlvbnNCKGFnZW50Lmdvb2dsZWFwaXMuY29tL21vbmdvZGIvY29ubmVjdGlvbnNSCAgEEgIIPBoACvABCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL21vbmdvZGIvZGF0YV9zaXplEjIKDWRhdGFiYXNlX25hbWUaIVRoZSBuYW1lIG9mIHRoZSBNb25nb0RCIGRhdGFiYXNlLhgBIAMqAkJ5MhhUaGUgZGF0YSBzaXplLCBpbiBieXRlcy46CURhdGEgc2l6ZUImYWdlbnQuZ29vZ2xlYXBpcy5jb20vbW9uZ29kYi9kYXRhX3NpemVSCAgEEgIIPBoACucBCllwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL21vbmdvZGIvZXh0ZW50cxIyCg1kYXRhYmFzZV9uYW1lGiFUaGUgbmFtZSBvZiB0aGUgTW9uZ29EQiBkYXRhYmFzZS4YASADKgExMhZUaGUgbnVtYmVyIG9mIGV4dGVudHMuOgdFeHRlbnRzQiRhZ2VudC5nb29nbGVhcGlzLmNvbS9tb25nb2RiL2V4dGVudHNSCAgEEgIIPBoACukBCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL21vbmdvZGIvZ2xvYmFsX2xvY2tfaG9sZF90aW1lGAMgAioBczInVGhlIHRpbWUgdGhlIGdsb2JhbCBsb2NrIGhhcyBiZWVuIGhlbGQuOhBHbG9iYWwgbG9jayB0aW1lQjJhZ2VudC5nb29nbGVhcGlzLmNvbS9tb25nb2RiL2dsb2JhbF9sb2NrX2hvbGRfdGltZVIICAQSAgg8GgAK9AEKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbW9uZ29kYi9pbmRleF9zaXplEjIKDWRhdGFiYXNlX25hbWUaIVRoZSBuYW1lIG9mIHRoZSBNb25nb0RCIGRhdGFiYXNlLhgBIAMqAkJ5MhlUaGUgaW5kZXggc2l6ZSwgaW4gYnl0ZXMuOgpJbmRleCBzaXplQidhZ2VudC5nb29nbGVhcGlzLmNvbS9tb25nb2RiL2luZGV4X3NpemVSCAgEEgIIPBoACucBCllwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL21vbmdvZGIvaW5kZXhlcxIyCg1kYXRhYmFzZV9uYW1lGiFUaGUgbmFtZSBvZiB0aGUgTW9uZ29EQiBkYXRhYmFzZS4YASADKgExMhZUaGUgbnVtYmVyIG9mIGluZGV4ZXMuOgdJbmRleGVzQiRhZ2VudC5nb29nbGVhcGlzLmNvbS9tb25nb2RiL2luZGV4ZXNSCAgEEgIIPBoACrQCCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL21vbmdvZGIvbWVtb3J5X3VzYWdlEjAKDWRhdGFiYXNlX25hbWUaH1RoZSBuYW1lIG9mIHRoZSBNb25nb0RCIHNlcnZlci4SOAoLbWVtb3J5X3R5cGUaKU1lbW9yeSB1c2FnZSAobWFwcGVkLCByZXNpZGVudCwgdmlydHVhbCkuGAEgAyoETWlCeTIZTWViaWJ5dGVzIG9mIG1lbW9yeSB1c2VkLjoMTWVtb3J5IHVzYWdlQilhZ2VudC5nb29nbGVhcGlzLmNvbS9tb25nb2RiL21lbW9yeV91c2FnZVIICAQSAgg8GgAK5wEKWXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbW9uZ29kYi9vYmplY3RzEjIKDWRhdGFiYXNlX25hbWUaIVRoZSBuYW1lIG9mIHRoZSBNb25nb0RCIGRhdGFiYXNlLhgBIAMqATEyFlRoZSBudW1iZXIgb2Ygb2JqZWN0cy46B09iamVjdHNCJGFnZW50Lmdvb2dsZWFwaXMuY29tL21vbmdvZGIvb2JqZWN0c1IICAQSAgg8GgAK+wEKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbW9uZ29kYi9vcGVyYXRpb25fY291bnQSJwoJb3BlcmF0aW9uGhpBIGRhdGFiYXNlIG9wZXJhdGlvbiBuYW1lLhgDIAIqATEyIlRoZSBudW1iZXIgb2Ygb3BlcmF0aW9ucyBleGVjdXRlZC46Ck9wZXJhdGlvbnNCLGFnZW50Lmdvb2dsZWFwaXMuY29tL21vbmdvZGIvb3BlcmF0aW9uX2NvdW50UggIBBICCDwaAAr8AQpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9tb25nb2RiL3N0b3JhZ2Vfc2l6ZRIyCg1kYXRhYmFzZV9uYW1lGiFUaGUgbmFtZSBvZiB0aGUgTW9uZ29EQiBkYXRhYmFzZS4YASADKgJCeTIbVGhlIHN0b3JhZ2Ugc2l6ZSwgaW4gYnl0ZXMuOgxTdG9yYWdlIHNpemVCKWFnZW50Lmdvb2dsZWFwaXMuY29tL21vbmdvZGIvc3RvcmFnZV9zaXplUggIBBICCDwaAArnAQpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9tc3NxbC9jb25uZWN0aW9ucy91c2VyGAEgAyoBMTIoQ3VycmVudGx5IG9wZW4gY29ubmVjdGlvbnMgdG8gU1FMIHNlcnZlcjobU1FMIFNlcnZlciBvcGVuIGNvbm5lY3Rpb25zQithZ2VudC5nb29nbGVhcGlzLmNvbS9tc3NxbC9jb25uZWN0aW9ucy91c2VyUggIBBICCDwaAArpAQpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9tc3NxbC90cmFuc2FjdGlvbl9yYXRlGAEgAyoDMS9zMihTUUwgc2VydmVyIHRvdGFsIHRyYW5zYWN0aW9ucyBwZXIgc2Vjb25kOhtTUUwgU2VydmVyIHRyYW5zYWN0aW9uIHJhdGVCK2FnZW50Lmdvb2dsZWFwaXMuY29tL21zc3FsL3RyYW5zYWN0aW9uX3JhdGVSCAgEEgIIPBoACvsBCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL21zc3FsL3dyaXRlX3RyYW5zYWN0aW9uX3JhdGUYASADKgMxL3MyKFNRTCBzZXJ2ZXIgd3JpdGUgdHJhbnNhY3Rpb25zIHBlciBzZWNvbmQ6IVNRTCBTZXJ2ZXIgd3JpdGUgdHJhbnNhY3Rpb24gcmF0ZUIxYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXNzcWwvd3JpdGVfdHJhbnNhY3Rpb25fcmF0ZVIICAQSAgg8GgAKoAIKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvYnVmZmVyX3Bvb2wvbnVtX3BhZ2VzEiQKCGRhdGFiYXNlGhhUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2USIgoEa2luZBoaVGhlIGJ1ZmZlciBwb29sIHBhZ2Uga2luZC4YASADKgExMhdCdWZmZXIgcG9vbCBwYWdlIGNvdW50LjoRQnVmZmVyIHBvb2wgcGFnZXNCMGFnZW50Lmdvb2dsZWFwaXMuY29tL215c3FsL2J1ZmZlcl9wb29sL251bV9wYWdlc1IICAQSAgg8GgAKuwIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvYnVmZmVyX3Bvb2wvb3BlcmF0aW9uX2NvdW50EiQKCGRhdGFiYXNlGhhUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2USJwoJb3BlcmF0aW9uGhpUaGUgYnVmZmVyIHBvb2wgb3BlcmF0aW9uLhgDIAIqATEyHEJ1ZmZlciBwb29sIG9wZXJhdGlvbiBjb3VudC46FkJ1ZmZlciBwb29sIG9wZXJhdGlvbnNCNmFnZW50Lmdvb2dsZWFwaXMuY29tL215c3FsL2J1ZmZlcl9wb29sL29wZXJhdGlvbl9jb3VudFIICAQSAgg8GgAKjQIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvYnVmZmVyX3Bvb2xfc2l6ZRIkCghkYXRhYmFzZRoYVGhlIG5hbWUgb2YgdGhlIGRhdGFiYXNlEh8KBGtpbmQaF0J1ZmZlciBwb29sIGJ5dGVzIGtpbmQuGAEgAyoCQnkyEUJ1ZmZlciBwb29sIHNpemUuOhBCdWZmZXIgcG9vbCBzaXplQithZ2VudC5nb29nbGVhcGlzLmNvbS9teXNxbC9idWZmZXJfcG9vbF9zaXplUggIBBICCDwaAAr7AQpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9teXNxbC9jb21tYW5kX2NvdW50EiQKCGRhdGFiYXNlGhhUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2USGQoHY29tbWFuZBoOTXlTUUwgY29tbWFuZC4YAyACKgExMhRNeVNRTCBjb21tYW5kIGNvdW50LjoIQ29tbWFuZHNCKGFnZW50Lmdvb2dsZWFwaXMuY29tL215c3FsL2NvbW1hbmRfY291bnRSCAgEEgIIPBoACv0BCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL215c3FsL2hhbmRsZXJfY291bnQSJAoIZGF0YWJhc2UaGFRoZSBuYW1lIG9mIHRoZSBkYXRhYmFzZRIbCgRraW5kGhNNeVNRTCBoYW5kbGVyIGtpbmQuGAMgAioBMTIUTXlTUUwgaGFuZGxlciBjb3VudC46CEhhbmRsZXJzQihhZ2VudC5nb29nbGVhcGlzLmNvbS9teXNxbC9oYW5kbGVyX2NvdW50UggIBBICCDwaAAqiAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9teXNxbC9pbm5vZGIvZG91Ymxld3JpdGVfY291bnQSJAoIZGF0YWJhc2UaGFRoZSBuYW1lIG9mIHRoZSBkYXRhYmFzZRIMCgRraW5kGgRUT0RPGAMgAioBMTIgSW5ub0RCIGRvdWJsZXdyaXRlIGJ1ZmZlciBjb3VudC46Gklubm9EQiBkb3VibGV3cml0ZSBidWZmZXJzQjNhZ2VudC5nb29nbGVhcGlzLmNvbS9teXNxbC9pbm5vZGIvZG91Ymxld3JpdGVfY291bnRSCAgEEgIIPBoACrICCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL215c3FsL2lubm9kYi9sb2dfb3BlcmF0aW9uX2NvdW50EiQKCGRhdGFiYXNlGhhUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2USIgoJb3BlcmF0aW9uGhVJbm5vREIgbG9nIG9wZXJhdGlvbi4YAyACKgExMhtJbm5vREIgbG9nIG9wZXJhdGlvbiBjb3VudC46FUlubm9EQiBsb2cgb3BlcmF0aW9uc0I1YWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvaW5ub2RiL2xvZ19vcGVyYXRpb25fY291bnRSCAgEEgIIPBoACp4CCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL215c3FsL2lubm9kYi9vcGVyYXRpb25fY291bnQSJAoIZGF0YWJhc2UaGFRoZSBuYW1lIG9mIHRoZSBkYXRhYmFzZRIeCglvcGVyYXRpb24aEUlubm9EQiBvcGVyYXRpb24uGAMgAioBMTIXSW5ub0RCIG9wZXJhdGlvbiBjb3VudC46EUlubm9EQiBvcGVyYXRpb25zQjFhZ2VudC5nb29nbGVhcGlzLmNvbS9teXNxbC9pbm5vZGIvb3BlcmF0aW9uX2NvdW50UggIBBICCDwaAAq3AgprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9teXNxbC9pbm5vZGIvcGFnZV9vcGVyYXRpb25fY291bnQSJAoIZGF0YWJhc2UaGFRoZSBuYW1lIG9mIHRoZSBkYXRhYmFzZRIjCglvcGVyYXRpb24aFklubm9EQiBwYWdlIG9wZXJhdGlvbi4YAyACKgExMhxJbm5vREIgcGFnZSBvcGVyYXRpb24gY291bnQuOhZJbm5vREIgcGFnZSBvcGVyYXRpb25zQjZhZ2VudC5nb29nbGVhcGlzLmNvbS9teXNxbC9pbm5vZGIvcGFnZV9vcGVyYXRpb25fY291bnRSCAgEEgIIPBoACpUCCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL215c3FsL2lubm9kYi9yb3dfbG9ja19jb3VudBIkCghkYXRhYmFzZRoYVGhlIG5hbWUgb2YgdGhlIGRhdGFiYXNlEh0KBGtpbmQaFUlubm9EQiByb3cgbG9jayBraW5kLhgDIAIqATEyFklubm9EQiByb3cgbG9jayBjb3VudC46DElubm9EQiBsb2Nrc0IwYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvaW5ub2RiL3Jvd19sb2NrX2NvdW50UggIBBICCDwaAAqyAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9teXNxbC9pbm5vZGIvcm93X29wZXJhdGlvbl9jb3VudBIkCghkYXRhYmFzZRoYVGhlIG5hbWUgb2YgdGhlIGRhdGFiYXNlEiIKCW9wZXJhdGlvbhoVSW5ub0RCIHJvdyBvcGVyYXRpb24uGAMgAioBMTIbSW5ub0RCIHJvdyBvcGVyYXRpb24gY291bnQuOhVJbm5vREIgcm93IG9wZXJhdGlvbnNCNWFnZW50Lmdvb2dsZWFwaXMuY29tL215c3FsL2lubm9kYi9yb3dfb3BlcmF0aW9uX2NvdW50UggIBBICCDwaAAruAQpacHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9teXNxbC9sb2NrX2NvdW50EiQKCGRhdGFiYXNlGhhUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2USGAoEa2luZBoQTXlTUUwgbG9jayBraW5kLhgDIAIqATEyEU15U1FMIGxvY2sgY291bnQuOgVMb2Nrc0IlYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvbG9ja19jb3VudFIICAQSAgg8GgAKngIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvcWNhY2hlL29wZXJhdGlvbl9jb3VudBIkCghkYXRhYmFzZRoYVGhlIG5hbWUgb2YgdGhlIGRhdGFiYXNlEh4KCW9wZXJhdGlvbhoRUUNhY2hlIG9wZXJhdGlvbi4YAyACKgExMhdRQ2FjaGUgb3BlcmF0aW9uIGNvdW50LjoRUUNhY2hlIG9wZXJhdGlvbnNCMWFnZW50Lmdvb2dsZWFwaXMuY29tL215c3FsL3FjYWNoZS9vcGVyYXRpb25fY291bnRSCAgEEgIIPBoACu8BCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL215c3FsL3FjYWNoZS9xdWVyeV9jb3VudBIkCghkYXRhYmFzZRoYVGhlIG5hbWUgb2YgdGhlIGRhdGFiYXNlGAEgAyoBMTITUUNhY2hlIHF1ZXJ5IGNvdW50LjoOUUNhY2hlIHF1ZXJpZXNCLWFnZW50Lmdvb2dsZWFwaXMuY29tL215c3FsL3FjYWNoZS9xdWVyeV9jb3VudFIICAQSAgg8GgAK9QEKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvc2xhdmVfcmVwbGljYXRpb25fbGFnEiQKCGRhdGFiYXNlGhhUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2UYASADKgFzMhZTZWNvbmRzIGJlaGluZCBtYXN0ZXIuOgtSZXBsaWNhIGxhZ0IwYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvc2xhdmVfcmVwbGljYXRpb25fbGFnUggIBBICCDwaAAruAQpacHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9teXNxbC9zb3J0X2NvdW50EiQKCGRhdGFiYXNlGhhUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2USGAoEa2luZBoQTXlTUUwgc29ydCBraW5kLhgDIAIqATEyEU15U1FMIHNvcnQgY291bnQuOgVTb3J0c0IlYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvc29ydF9jb3VudFIICAQSAgg8GgAK7AEKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvdGhyZWFkX2NvdW50EiQKCGRhdGFiYXNlGhhUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2USFAoEa2luZBoMVGhyZWFkIGtpbmQuGAEgAyoBMTINVGhyZWFkIGNvdW50LjoHVGhyZWFkc0InYWdlbnQuZ29vZ2xlYXBpcy5jb20vbXlzcWwvdGhyZWFkX2NvdW50UggIBBICCDwaAAqzAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3RjcF9jb25uZWN0aW9ucxIsCgRwb3J0GiQnTk5OLWxvY2FsJywgJ05OTi1yZW1vdGUnLCBvciAnYWxsJy4SNQoJdGNwX3N0YXRlGihUQ1Agc3RhdGUgKEVTVEFCTElTSEVELCBGSU5fV0FJVDEsIGV0Yy4pGAEgAyoBMTIZQ291bnQgb2YgVENQIGNvbm5lY3Rpb25zLjoPVENQIGNvbm5lY3Rpb25zQixhZ2VudC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3RjcF9jb25uZWN0aW9uc1IICAQSAgg8GgAK5wEKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbmdpbngvY29ubmVjdGlvbnMvYWNjZXB0ZWRfY291bnQYAyACKgExMhtUb3RhbCBjb25uZWN0aW9ucyBhY2NlcHRlZC46FEFjY2VwdGVkIGNvbm5lY3Rpb25zQjVhZ2VudC5nb29nbGVhcGlzLmNvbS9uZ2lueC9jb25uZWN0aW9ucy9hY2NlcHRlZF9jb3VudFIICAQSAgg8GgAKmAIKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbmdpbngvY29ubmVjdGlvbnMvY3VycmVudBIkCgVzdGF0ZRobVGhlIE5naW54IGNvbm5lY3Rpb24gc3RhdGUuGAEgAyoBMTI2VGhlIG51bWJlciBvZiBjb25uZWN0aW9ucyBjdXJyZW50bHkgYXR0YWNoZWQgdG8gTmdpbnguOhJBY3RpdmUgY29ubmVjdGlvbnNCLmFnZW50Lmdvb2dsZWFwaXMuY29tL25naW54L2Nvbm5lY3Rpb25zL2N1cnJlbnRSCAgEEgIIPBoACuMBCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL25naW54L2Nvbm5lY3Rpb25zL2hhbmRsZWRfY291bnQYAyACKgExMhpUb3RhbCBjb25uZWN0aW9ucyBoYW5kbGVkLjoTSGFuZGxlZCBjb25uZWN0aW9uc0I0YWdlbnQuZ29vZ2xlYXBpcy5jb20vbmdpbngvY29ubmVjdGlvbnMvaGFuZGxlZF9jb3VudFIICAQSAgg8GgAK0AEKXXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vbmdpbngvcmVxdWVzdF9jb3VudBgDIAIqATEyKlRoZSBudW1iZXIgb2YgcmVxdWVzdHMgTmdpbnggaGFzIHNlcnZpY2VkLjoIUmVxdWVzdHNCKGFnZW50Lmdvb2dsZWFwaXMuY29tL25naW54L3JlcXVlc3RfY291bnRSCAgEEgIIPBoACvMBCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3BhZ2VmaWxlL3BlcmNlbnRfdXNlZBIjCgVzdGF0ZRoaVHlwZSBvZiB1c2FnZSAoZnJlZSwgdXNlZCkYASADKgElMhhQYWdlZmlsZSBVc2FnZSAoUGVyY2VudCk6FFBhZ2VmaWxlIHV0aWxpemF0aW9uQiphZ2VudC5nb29nbGVhcGlzLmNvbS9wYWdlZmlsZS9wZXJjZW50X3VzZWRSCAgEEgIIPBoACpkCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3Bvc3RncmVzcWwvYmxvY2tzX3JlYWRfY291bnQSJAoIZGF0YWJhc2UaGFRoZSBuYW1lIG9mIHRoZSBkYXRhYmFzZRIgCgZzb3VyY2UaFlRoZSBibG9jayByZWFkIHNvdXJjZS4YAyACKgExMhZOdW1iZXIgb2YgYmxvY2tzIHJlYWQuOgtCbG9ja3MgcmVhZEIxYWdlbnQuZ29vZ2xlYXBpcy5jb20vcG9zdGdyZXNxbC9ibG9ja3NfcmVhZF9jb3VudFIICAQSAgg8GgAK5AEKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcG9zdGdyZXNxbC9jb21taXRfY291bnQSJAoIZGF0YWJhc2UaGFRoZSBuYW1lIG9mIHRoZSBkYXRhYmFzZRgDIAIqATEyEU51bWJlciBvZiBjb21taXRzOgdDb21taXRzQixhZ2VudC5nb29nbGVhcGlzLmNvbS9wb3N0Z3Jlc3FsL2NvbW1pdF9jb3VudFIICAQSAgg8GgAK3QEKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcG9zdGdyZXNxbC9kYl9zaXplEiQKCGRhdGFiYXNlGhhUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2UYASADKgJCeTITRGF0YWJhc2UgZGlzayB1c2FnZToHREIgc2l6ZUInYWdlbnQuZ29vZ2xlYXBpcy5jb20vcG9zdGdyZXNxbC9kYl9zaXplUggIBBICCDwaAArnAQphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9wb3N0Z3Jlc3FsL251bV9iYWNrZW5kcxIkCghkYXRhYmFzZRoYVGhlIG5hbWUgb2YgdGhlIGRhdGFiYXNlGAEgAyoBMTITTnVtYmVyIG9mIGJhY2tlbmRzLjoIQmFja2VuZHNCLGFnZW50Lmdvb2dsZWFwaXMuY29tL3Bvc3RncmVzcWwvbnVtX2JhY2tlbmRzUggIBBICCDwaAAquAgpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9wb3N0Z3Jlc3FsL251bV90dXBsZXMSJAoIZGF0YWJhc2UaGFRoZSBuYW1lIG9mIHRoZSBkYXRhYmFzZRI1CgVzdGF0ZRosVHVwbGUgKHJvdykgc3RhdGUgKGVpdGhlciAnZGVhZCcgb3IgJ2xpdmUnKS4YASADKgExMihOdW1iZXIgb2YgdHVwbGVzIChyb3dzKSBpbiB0aGUgZGF0YWJhc2UuOgdEQiByb3dzQiphZ2VudC5nb29nbGVhcGlzLmNvbS9wb3N0Z3Jlc3FsL251bV90dXBsZXNSCAgEEgIIPBoACp4CCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3Bvc3RncmVzcWwvb3BlcmF0aW9uX2NvdW50EiQKCGRhdGFiYXNlGhhUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2USJAoJb3BlcmF0aW9uGhdUaGUgZGF0YWJhc2Ugb3BlcmF0aW9uLhgDIAIqATEyHE51bWJlciBvZiBkYiByb3cgb3BlcmF0aW9ucy46Ck9wZXJhdGlvbnNCL2FnZW50Lmdvb2dsZWFwaXMuY29tL3Bvc3RncmVzcWwvb3BlcmF0aW9uX2NvdW50UggIBBICCDwaAArsAQpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9wb3N0Z3Jlc3FsL3JvbGxiYWNrX2NvdW50EiQKCGRhdGFiYXNlGhhUaGUgbmFtZSBvZiB0aGUgZGF0YWJhc2UYAyACKgExMhNOdW1iZXIgb2Ygcm9sbGJhY2tzOglSb2xsYmFja3NCLmFnZW50Lmdvb2dsZWFwaXMuY29tL3Bvc3RncmVzcWwvcm9sbGJhY2tfY291bnRSCAgEEgIIPBoACoECCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3Byb2Nlc3Nlcy9jb3VudF9ieV9zdGF0ZRIoCgVzdGF0ZRofUnVubmluZywgc2xlZXBpbmcsIHpvbWJpZSwgZXRjLhgBIAMqATEyJkNvdW50IG9mIHByb2Nlc3NlcyBpbiB0aGUgZ2l2ZW4gc3RhdGUuOglQcm9jZXNzZXNCLWFnZW50Lmdvb2dsZWFwaXMuY29tL3Byb2Nlc3Nlcy9jb3VudF9ieV9zdGF0ZVIICAQSAgg8GgAK/QIKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcHJvY2Vzc2VzL2NwdV90aW1lEhcKB3Byb2Nlc3MaDFByb2Nlc3MgbmFtZRIwCgx1c2VyX29yX3N5c3QaIFdoZXRoZXIgYSB1c2VyIG9yIHN5c3RlbSBwcm9jZXNzEhoKB2NvbW1hbmQaD1Byb2Nlc3MgY29tbWFuZBIkCgxjb21tYW5kX2xpbmUaFFByb2Nlc3MgY29tbWFuZCBsaW5lEhYKBW93bmVyGg1Qcm9jZXNzIG93bmVyEhEKA3BpZBoKUHJvY2VzcyBJRBgDIAIqAXMyHkNQVSB0aW1lIG9mIHRoZSBnaXZlbiBwcm9jZXNzLjoLUHJvY2VzcyBDUFVCJ2FnZW50Lmdvb2dsZWFwaXMuY29tL3Byb2Nlc3Nlcy9jcHVfdGltZVIICAQSAgg8GgAK1gIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcHJvY2Vzc2VzL2Rpc2svcmVhZF9ieXRlc19jb3VudBIXCgdwcm9jZXNzGgxQcm9jZXNzIG5hbWUSGgoHY29tbWFuZBoPUHJvY2VzcyBjb21tYW5kEiQKDGNvbW1hbmRfbGluZRoUUHJvY2VzcyBjb21tYW5kIGxpbmUSFgoFb3duZXIaDVByb2Nlc3Mgb3duZXISEQoDcGlkGgpQcm9jZXNzIElEGAMgAioCQnkyEVByb2Nlc3MgZGlzayBJL08uOghEaXNrIEkvT0I0YWdlbnQuZ29vZ2xlYXBpcy5jb20vcHJvY2Vzc2VzL2Rpc2svcmVhZF9ieXRlc19jb3VudFIICAQSAgg8GgAK2AIKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcHJvY2Vzc2VzL2Rpc2svd3JpdGVfYnl0ZXNfY291bnQSFwoHcHJvY2VzcxoMUHJvY2VzcyBuYW1lEhoKB2NvbW1hbmQaD1Byb2Nlc3MgY29tbWFuZBIkCgxjb21tYW5kX2xpbmUaFFByb2Nlc3MgY29tbWFuZCBsaW5lEhYKBW93bmVyGg1Qcm9jZXNzIG93bmVyEhEKA3BpZBoKUHJvY2VzcyBJRBgDIAIqAkJ5MhFQcm9jZXNzIGRpc2sgSS9PLjoIRGlzayBJL09CNWFnZW50Lmdvb2dsZWFwaXMuY29tL3Byb2Nlc3Nlcy9kaXNrL3dyaXRlX2J5dGVzX2NvdW50UggIBBICCDwaAArLAQpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9wcm9jZXNzZXMvZm9ya19jb3VudBgDIAIqATEyIVRvdGFsIG51bWJlciBvZiBwcm9jZXNzZXMgZm9ya2VkLjoKRm9yayBjb3VudEIpYWdlbnQuZ29vZ2xlYXBpcy5jb20vcHJvY2Vzc2VzL2ZvcmtfY291bnRSCAgEEgIIPBoACucCCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3Byb2Nlc3Nlcy9yc3NfdXNhZ2USFwoHcHJvY2VzcxoMUHJvY2VzcyBuYW1lEhoKB2NvbW1hbmQaD1Byb2Nlc3MgY29tbWFuZBIkCgxjb21tYW5kX2xpbmUaFFByb2Nlc3MgY29tbWFuZCBsaW5lEhYKBW93bmVyGg1Qcm9jZXNzIG93bmVyEhEKA3BpZBoKUHJvY2VzcyBJRBgBIAMqAkJ5MitSZXNpZGVudCBtZW1vcnkgdXNhZ2Ugb2YgdGhlIGdpdmVuIHByb2Nlc3MuOhdQcm9jZXNzIHJlc2lkZW50IG1lbW9yeUIoYWdlbnQuZ29vZ2xlYXBpcy5jb20vcHJvY2Vzc2VzL3Jzc191c2FnZVIICAQSAgg8GgAK1wIKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcHJvY2Vzc2VzL3ZtX3VzYWdlEhcKB3Byb2Nlc3MaDFByb2Nlc3MgbmFtZRIaCgdjb21tYW5kGg9Qcm9jZXNzIGNvbW1hbmQSJAoMY29tbWFuZF9saW5lGhRQcm9jZXNzIGNvbW1hbmQgbGluZRIWCgVvd25lchoNUHJvY2VzcyBvd25lchIRCgNwaWQaClByb2Nlc3MgSUQYASADKgJCeTIeVk0gVXNhZ2Ugb2YgdGhlIGdpdmVuIHByb2Nlc3MuOhZQcm9jZXNzIHZpcnR1YWwgbWVtb3J5QidhZ2VudC5nb29nbGVhcGlzLmNvbS9wcm9jZXNzZXMvdm1fdXNhZ2VSCAgEEgIIPBoACv4BClxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3JhYmJpdG1xL2NvbnN1bWVycxIfCgVxdWV1ZRoWVGhlIHJhYmJpdCBxdWV1ZSBuYW1lLhgBIAMqATEyOFRoZSBudW1iZXIgb2YgY29uc3VtZXJzIHJlYWRpbmcgZnJvbSB0aGUgc3BlY2lmaWVkIHF1ZXVlOglDb25zdW1lcnNCJ2FnZW50Lmdvb2dsZWFwaXMuY29tL3JhYmJpdG1xL2NvbnN1bWVyc1IICAQSAgg8GgAKjwIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmFiYml0bXEvZGVsaXZlcnlfcmF0ZRIfCgVxdWV1ZRoWVGhlIHJhYmJpdCBxdWV1ZSBuYW1lLhgBIAMqAzEvczI7VGhlIHJhdGUgKHBlciBzZWNvbmQpIGF0IHdoaWNoIG1lc3NhZ2VzIGFyZSBiZWluZyBkZWxpdmVyZWQ6DURlbGl2ZXJ5IHJhdGVCK2FnZW50Lmdvb2dsZWFwaXMuY29tL3JhYmJpdG1xL2RlbGl2ZXJ5X3JhdGVSCAgEEgIIPBoACokCCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3JhYmJpdG1xL251bV9tZXNzYWdlcxIfCgVxdWV1ZRoWVGhlIHJhYmJpdCBxdWV1ZSBuYW1lLhIbCgVzdGF0ZRoSVGhlIG1lc3NhZ2Ugc3RhdGUuGAEgAyoBMTIhVGhlIG51bWJlciBvZiBtZXNzYWdlcyBpbiBhIHF1ZXVlOghNZXNzYWdlc0IqYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmFiYml0bXEvbnVtX21lc3NhZ2VzUggIBBICCDwaAAqMAgpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9yYWJiaXRtcS9wdWJsaXNoX3JhdGUSHwoFcXVldWUaFlRoZSByYWJiaXQgcXVldWUgbmFtZS4YASADKgMxL3MyO1RoZSByYXRlIChwZXIgc2Vjb25kKSBhdCB3aGljaCBtZXNzYWdlcyBhcmUgYmVpbmcgcHVibGlzaGVkOgxQdWJsaXNoIHJhdGVCKmFnZW50Lmdvb2dsZWFwaXMuY29tL3JhYmJpdG1xL3B1Ymxpc2hfcmF0ZVIICAQSAgg8GgAK+AEKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmVkaXMvY2hhbmdlc19zaW5jZV9sYXN0X3NhdmUSGAoEbm9kZRoQUmVkaXMgbm9kZSBuYW1lLhgBIAMqATEyHUNoYW5nZSBjb3VudCBzaW5jZSBsYXN0IHNhdmUuOg9VbnNhdmVkIGNoYW5nZXNCMmFnZW50Lmdvb2dsZWFwaXMuY29tL3JlZGlzL2NoYW5nZXNfc2luY2VfbGFzdF9zYXZlUggIBBICCDwaAArlAQpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9yZWRpcy9jbGllbnRzL2Jsb2NrZWQSGAoEbm9kZRoQUmVkaXMgbm9kZSBuYW1lLhgBIAMqATEyGk51bWJlciBvZiBibG9ja2VkIGNsaWVudHMuOg9CbG9ja2VkIGNsaWVudHNCKmFnZW50Lmdvb2dsZWFwaXMuY29tL3JlZGlzL2NsaWVudHMvYmxvY2tlZFIICAQSAgg8GgAK7gEKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmVkaXMvY2xpZW50cy9jb25uZWN0ZWQSGAoEbm9kZRoQUmVkaXMgbm9kZSBuYW1lLhgBIAMqATEyHU51bWJlciBvZiBjbGllbnQgY29ubmVjdGlvbnMuOhFDb25uZWN0ZWQgY2xpZW50c0IsYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmVkaXMvY2xpZW50cy9jb25uZWN0ZWRSCAgEEgIIPBoACvEBCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3JlZGlzL2NvbW1hbmRzX3Byb2Nlc3NlZBIYCgRub2RlGhBSZWRpcyBub2RlIG5hbWUuGAMgAioBMTInVGhlIHRvdGFsIG51bWJlciBvZiBjb21tYW5kcyBwcm9jZXNzZWQuOghDb21tYW5kc0ItYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmVkaXMvY29tbWFuZHNfcHJvY2Vzc2VkUggIBBICCDwaAArvAQpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9yZWRpcy9jb25uZWN0aW9ucy9zbGF2ZXMSGAoEbm9kZRoQUmVkaXMgbm9kZSBuYW1lLhgBIAMqATEyHE51bWJlciBvZiBzbGF2ZSBjb25uZWN0aW9ucy46EVNsYXZlIGNvbm5lY3Rpb25zQi1hZ2VudC5nb29nbGVhcGlzLmNvbS9yZWRpcy9jb25uZWN0aW9ucy9zbGF2ZXNSCAgEEgIIPBoACvQBCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3JlZGlzL2Nvbm5lY3Rpb25zL3RvdGFsEhgKBG5vZGUaEFJlZGlzIG5vZGUgbmFtZS4YAyACKgExMilUaGUgdG90YWwgbnVtYmVyIG9mIGNvbm5lY3Rpb25zIGFjY2VwdGVkLjoLQ29ubmVjdGlvbnNCLGFnZW50Lmdvb2dsZWFwaXMuY29tL3JlZGlzL2Nvbm5lY3Rpb25zL3RvdGFsUggIBBICCDwaAArmAQpccHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9yZWRpcy9leHBpcmVkX2tleXMSGAoEbm9kZRoQUmVkaXMgbm9kZSBuYW1lLhgDIAIqATEyJFRoZSB0b3RhbCBudW1iZXIgb2Yga2V5IGV4cGlyYXRpb25zLjoMRXhwaXJlZCBrZXlzQidhZ2VudC5nb29nbGVhcGlzLmNvbS9yZWRpcy9leHBpcmVkX2tleXNSCAgEEgIIPBoACtkBClxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3JlZGlzL21lbW9yeS91c2FnZRIYCgRub2RlGhBSZWRpcyBub2RlIG5hbWUuGAEgAyoCQnkyFk1lbW9yeSB1c2FnZSBpbiBieXRlcy46DE1lbW9yeSB1c2FnZUInYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmVkaXMvbWVtb3J5L3VzYWdlUggIBBICCDwaAArpAQpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9yZWRpcy9tZW1vcnkvdXNhZ2VfbHVhEhgKBG5vZGUaEFJlZGlzIG5vZGUgbmFtZS4YASADKgJCeTIaTHVhIG1lbW9yeSB1c2FnZSBpbiBieXRlcy46EEx1YSBtZW1vcnkgdXNhZ2VCK2FnZW50Lmdvb2dsZWFwaXMuY29tL3JlZGlzL21lbW9yeS91c2FnZV9sdWFSCAgEEgIIPBoACoUCCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3JlZGlzL3B1YnN1Yi9jaGFubmVscxIYCgRub2RlGhBSZWRpcyBub2RlIG5hbWUuGAEgAyoBMTI6TnVtYmVyIG9mIGdsb2JhbCBwdWIvc3ViIGNoYW5uZWxzIHdpdGggc3Vic2NyaWJlZCBjbGllbnRzLjoPUHViU3ViIGNoYW5uZWxzQiphZ2VudC5nb29nbGVhcGlzLmNvbS9yZWRpcy9wdWJzdWIvY2hhbm5lbHNSCAgEEgIIPBoACoUCCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3JlZGlzL3B1YnN1Yi9wYXR0ZXJucxIYCgRub2RlGhBSZWRpcyBub2RlIG5hbWUuGAEgAyoBMTI6TnVtYmVyIG9mIGdsb2JhbCBwdWIvc3ViIHBhdHRlcm5zIHdpdGggc3Vic2NyaWJlZCBjbGllbnRzLjoPUHViU3ViIHBhdHRlcm5zQiphZ2VudC5nb29nbGVhcGlzLmNvbS9yZWRpcy9wdWJzdWIvcGF0dGVybnNSCAgEEgIIPBoACsIBClZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3JlZGlzL3VwdGltZRIYCgRub2RlGhBSZWRpcyBub2RlIG5hbWUuGAEgAyoBczISVXB0aW1lIGluIHNlY29uZHMuOgZVcHRpbWVCIWFnZW50Lmdvb2dsZWFwaXMuY29tL3JlZGlzL3VwdGltZVIICAQSAgg8GgAKlQMKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmlhay9sYXRlbmN5Lzk1dGhfcGVyY2VudGlsZRIkCgtzZXJ2ZXJfbmFtZRoVVGhlIHJpYWsgc2VydmVyIG5hbWUuEkoKBHR5cGUaQkFuIG9wZXJhdGlvbiB0eXBlIHdpdGggbGF0ZW5jeSBzdGF0aXN0aWNzIChlaXRoZXIgJ2dldCcgb3IgJ3B1dCcpLhgBIAMqAnVzMmJUaW1lIGJldHdlZW4gcmVjZXB0aW9uIG9mIGNsaWVudCByZWFkIHJlcXVlc3QgYW5kIHN1YnNlcXVlbnQgcmVzcG9uc2UgdG8gY2xpZW50ICg5NXRoIHBlcmNlbnRpbGUpLjoQOTUlIGxhdGVuY3kgKDFtKUIxYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmlhay9sYXRlbmN5Lzk1dGhfcGVyY2VudGlsZVIICAQSAgg8GgAK/gIKXnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmlhay9sYXRlbmN5L2F2ZXJhZ2USJAoLc2VydmVyX25hbWUaFVRoZSByaWFrIHNlcnZlciBuYW1lLhJKCgR0eXBlGkJBbiBvcGVyYXRpb24gdHlwZSB3aXRoIGxhdGVuY3kgc3RhdGlzdGljcyAoZWl0aGVyICdnZXQnIG9yICdwdXQnKS4YASADKgJ1czJXVGltZSBiZXR3ZWVuIHJlY2VwdGlvbiBvZiBjbGllbnQgcmVhZCByZXF1ZXN0IGFuZCBzdWJzZXF1ZW50IHJlc3BvbnNlIHRvIGNsaWVudCAobWVhbikuOhRBdmVyYWdlIGxhdGVuY3kgKDFtKUIpYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmlhay9sYXRlbmN5L2F2ZXJhZ2VSCAgEEgIIPBoACoEDCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3JpYWsvbGF0ZW5jeS9tYXhpbXVtEiQKC3NlcnZlcl9uYW1lGhVUaGUgcmlhayBzZXJ2ZXIgbmFtZS4SSgoEdHlwZRpCQW4gb3BlcmF0aW9uIHR5cGUgd2l0aCBsYXRlbmN5IHN0YXRpc3RpY3MgKGVpdGhlciAnZ2V0JyBvciAncHV0JykuGAEgAyoCdXMyWlRpbWUgYmV0d2VlbiByZWNlcHRpb24gb2YgY2xpZW50IHJlYWQgcmVxdWVzdCBhbmQgc3Vic2VxdWVudCByZXNwb25zZSB0byBjbGllbnQgKG1heGltdW0pLjoUTWF4aW11bSBsYXRlbmN5ICgxbSlCKWFnZW50Lmdvb2dsZWFwaXMuY29tL3JpYWsvbGF0ZW5jeS9tYXhpbXVtUggIBBICCDwaAAr9AQpbcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9yaWFrL21lbW9yeV91c2FnZRIkCgtzZXJ2ZXJfbmFtZRoVVGhlIHJpYWsgc2VydmVyIG5hbWUuEiEKC21lbW9yeV90eXBlGhJNZW1vcnkgdXNhZ2UgdHlwZS4YASADKgJCeTINTWVtb3J5IHVzYWdlLjoMTWVtb3J5IHVzYWdlQiZhZ2VudC5nb29nbGVhcGlzLmNvbS9yaWFrL21lbW9yeV91c2FnZVIICAQSAgg8GgAK4AIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmlhay9udW1fc2libGluZ3MvOTV0aF9wZXJjZW50aWxlEiQKC3NlcnZlcl9uYW1lGhVUaGUgcmlhayBzZXJ2ZXIgbmFtZS4YASADKgExMm9OdW1iZXIgb2Ygc2libGluZ3MgZW5jb3VudGVyZWQgZHVyaW5nIGFsbCBHRVQgb3BlcmF0aW9ucyBieSB0aGlzIG5vZGUgd2l0aGluIHRoZSBsYXN0IG1pbnV0ZSAoOTV0aCBwZXJjZW50aWxlKS46ETk1JSBzaWJsaW5ncyAoMW0pQjZhZ2VudC5nb29nbGVhcGlzLmNvbS9yaWFrL251bV9zaWJsaW5ncy85NXRoX3BlcmNlbnRpbGVSCAgEEgIIPBoACskCCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3JpYWsvbnVtX3NpYmxpbmdzL2F2ZXJhZ2USJAoLc2VydmVyX25hbWUaFVRoZSByaWFrIHNlcnZlciBuYW1lLhgBIAMqATEyZE51bWJlciBvZiBzaWJsaW5ncyBlbmNvdW50ZXJlZCBkdXJpbmcgYWxsIEdFVCBvcGVyYXRpb25zIGJ5IHRoaXMgbm9kZSB3aXRoaW4gdGhlIGxhc3QgbWludXRlIChtZWFuKS46FUF2ZXJhZ2Ugc2libGluZ3MgKDFtKUIuYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmlhay9udW1fc2libGluZ3MvYXZlcmFnZVIICAQSAgg8GgAKzAIKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmlhay9udW1fc2libGluZ3MvbWF4aW11bRIkCgtzZXJ2ZXJfbmFtZRoVVGhlIHJpYWsgc2VydmVyIG5hbWUuGAEgAyoBMTJnTnVtYmVyIG9mIHNpYmxpbmdzIGVuY291bnRlcmVkIGR1cmluZyBhbGwgR0VUIG9wZXJhdGlvbnMgYnkgdGhpcyBub2RlIHdpdGhpbiB0aGUgbGFzdCBtaW51dGUgKG1heGltdW0pLjoVTWF4aW11bSBzaWJsaW5ncyAoMW0pQi5hZ2VudC5nb29nbGVhcGlzLmNvbS9yaWFrL251bV9zaWJsaW5ncy9tYXhpbXVtUggIBBICCDwaAArFAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9yaWFrL29iamVjdF9zaXplLzk1dGhfcGVyY2VudGlsZRIkCgtzZXJ2ZXJfbmFtZRoVVGhlIHJpYWsgc2VydmVyIG5hbWUuGAEgAyoCQnkyUlNpemUgb2Ygb2JqZWN0cyBlbmNvdW50ZXJlZCBieSB0aGlzIG5vZGUgd2l0aGluIHRoZSBsYXN0IG1pbnV0ZSAoOTV0aCBwZXJjZW50aWxlKS46FDk1JSBvYmplY3Qgc2l6ZSAoMW0pQjVhZ2VudC5nb29nbGVhcGlzLmNvbS9yaWFrL29iamVjdF9zaXplLzk1dGhfcGVyY2VudGlsZVIICAQSAgg8GgAKrgIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmlhay9vYmplY3Rfc2l6ZS9hdmVyYWdlEiQKC3NlcnZlcl9uYW1lGhVUaGUgcmlhayBzZXJ2ZXIgbmFtZS4YASADKgJCeTJHU2l6ZSBvZiBvYmplY3RzIGVuY291bnRlcmVkIGJ5IHRoaXMgbm9kZSB3aXRoaW4gdGhlIGxhc3QgbWludXRlIChtZWFuKS46GEF2ZXJhZ2Ugb2JqZWN0IHNpemUgKDFtKUItYWdlbnQuZ29vZ2xlYXBpcy5jb20vcmlhay9vYmplY3Rfc2l6ZS9hdmVyYWdlUggIBBICCDwaAAqxAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9yaWFrL29iamVjdF9zaXplL21heGltdW0SJAoLc2VydmVyX25hbWUaFVRoZSByaWFrIHNlcnZlciBuYW1lLhgBIAMqAkJ5MkpTaXplIG9mIG9iamVjdHMgZW5jb3VudGVyZWQgYnkgdGhpcyBub2RlIHdpdGhpbiB0aGUgbGFzdCBtaW51dGUgKG1heGltdW0pLjoYTWF4aW11bSBvYmplY3Qgc2l6ZSAoMW0pQi1hZ2VudC5nb29nbGVhcGlzLmNvbS9yaWFrL29iamVjdF9zaXplL21heGltdW1SCAgEEgIIPBoACo0CCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3JpYWsvb3BlcmF0aW9uX2NvdW50EiQKC3NlcnZlcl9uYW1lGhVUaGUgcmlhayBzZXJ2ZXIgbmFtZS4SHwoJb3BlcmF0aW9uGhJBbiBvcGVyYXRpb24gbmFtZS4YAyACKgExMhxDb29yZGluYXRlZCBvcGVyYXRpb24gY291bnQuOgpPcGVyYXRpb25zQilhZ2VudC5nb29nbGVhcGlzLmNvbS9yaWFrL29wZXJhdGlvbl9jb3VudFIICAQSAgg8GgAKkAIKWXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vc3dhcC9ieXRlc191c2VkEhYKBmRldmljZRoMU3dhcCBkZXZpY2UuEikKBXN0YXRlGiB1c2VkLCBmcmVlLCBjYWNoZWQsIG9yIHJlc2VydmVkLhgBIAMqAkJ5MixTd2FwIGJ5dGVzIHVzZWQsIGZyZWUsIGNhY2hlZCwgYW5kIHJlc2VydmVkLjoKU3dhcCB1c2FnZUIkYWdlbnQuZ29vZ2xlYXBpcy5jb20vc3dhcC9ieXRlc191c2VkUggIBBICCDwaAArCAQpRcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS9zd2FwL2lvEhQKCWRpcmVjdGlvbhoHaW4sIG91dBgDIAIqATEyE1N3YXAgSS9PIG9wZXJhdGlvbnM6E1N3YXAgSS9PIG9wZXJhdGlvbnNCHGFnZW50Lmdvb2dsZWFwaXMuY29tL3N3YXAvaW9SCAgEEgIIPBoACpsCCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3N3YXAvcGVyY2VudF91c2VkEhYKBmRldmljZRoMU3dhcCBkZXZpY2UuEikKBXN0YXRlGiB1c2VkLCBmcmVlLCBjYWNoZWQsIG9yIHJlc2VydmVkLhgBIAMqASUyLlN3YXAgcGVyY2VudCB1c2VkLCBmcmVlLCBjYWNoZWQsIGFuZCByZXNlcnZlZC46EFN3YXAgdXRpbGl6YXRpb25CJmFnZW50Lmdvb2dsZWFwaXMuY29tL3N3YXAvcGVyY2VudF91c2VkUggIBBICCDwaAAr/AQphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS90b21jYXQvbWFuYWdlci9zZXNzaW9ucxIxCgp1cmxfcHJlZml4GiNUaGUgVVJMIHByZWZpeCBmb3IgYSBnaXZlbiBzZXNzaW9uLhgBIAMqATEyHlRoZSBudW1iZXIgb2YgYWN0aXZlIHNlc3Npb25zLjoIU2Vzc2lvbnNCLGFnZW50Lmdvb2dsZWFwaXMuY29tL3RvbWNhdC9tYW5hZ2VyL3Nlc3Npb25zUggIBBICCDwaAAqVAgpucHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS90b21jYXQvcmVxdWVzdF9wcm9jZXNzb3IvZXJyb3JfY291bnQSLAoNcHJvdG9faGFuZGxlchobVGhlIHByb3RvY29sIGhhbmRsZXIgbGFiZWwuGAMgAioBMTIhVGhlIG51bWJlciBvZiBlcnJvcnMgZW5jb3VudGVyZWQuOgZFcnJvcnNCOWFnZW50Lmdvb2dsZWFwaXMuY29tL3RvbWNhdC9yZXF1ZXN0X3Byb2Nlc3Nvci9lcnJvcl9jb3VudFIICAQSAgg8GgAKoAIKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vdG9tY2F0L3JlcXVlc3RfcHJvY2Vzc29yL3Byb2Nlc3NpbmdfdGltZRIsCg1wcm90b19oYW5kbGVyGhtUaGUgcHJvdG9jb2wgaGFuZGxlciBsYWJlbC4YAyACKgJtczIaVGhlIHRvdGFsIHByb2Nlc3NpbmcgdGltZS46D1Byb2Nlc3NpbmcgdGltZUI9YWdlbnQuZ29vZ2xlYXBpcy5jb20vdG9tY2F0L3JlcXVlc3RfcHJvY2Vzc29yL3Byb2Nlc3NpbmdfdGltZVIICAQSAgg8GgAKlwIKcHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vdG9tY2F0L3JlcXVlc3RfcHJvY2Vzc29yL3JlcXVlc3RfY291bnQSLAoNcHJvdG9faGFuZGxlchobVGhlIHByb3RvY29sIGhhbmRsZXIgbGFiZWwuGAMgAioBMTIdVGhlIHRvdGFsIG51bWJlciBvZiByZXF1ZXN0cy46CFJlcXVlc3RzQjthZ2VudC5nb29nbGVhcGlzLmNvbS90b21jYXQvcmVxdWVzdF9wcm9jZXNzb3IvcmVxdWVzdF9jb3VudFIICAQSAgg8GgAKzwIKcHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vdG9tY2F0L3JlcXVlc3RfcHJvY2Vzc29yL3RyYWZmaWNfY291bnQSLAoNcHJvdG9faGFuZGxlchobVGhlIHByb3RvY29sIGhhbmRsZXIgbGFiZWwuEiYKCWRpcmVjdGlvbhoZRGF0YSBkaXJlY3Rpb24sIHJ4IG9yIHR4LhgDIAIqAkJ5Mi1UaGUgbnVtYmVyIG9mIGJ5dGVzIHRyYW5zbWl0dGVkIGFuZCByZWNlaXZlZC46B1RyYWZmaWNCO2FnZW50Lmdvb2dsZWFwaXMuY29tL3RvbWNhdC9yZXF1ZXN0X3Byb2Nlc3Nvci90cmFmZmljX2NvdW50UggIBBICCDwaAAr7AQpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS90b21jYXQvdGhyZWFkcy9idXN5EiwKDXByb3RvX2hhbmRsZXIaG1RoZSBwcm90b2NvbCBoYW5kbGVyIGxhYmVsLhgBIAMqATEyI1RoZSBjdXJyZW50IG51bWJlciBvZiBidXN5IHRocmVhZHMuOgxCdXN5IHRocmVhZHNCKGFnZW50Lmdvb2dsZWFwaXMuY29tL3RvbWNhdC90aHJlYWRzL2J1c3lSCAgEEgIIPBoACv8BCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3RvbWNhdC90aHJlYWRzL2N1cnJlbnQSLAoNcHJvdG9faGFuZGxlchobVGhlIHByb3RvY29sIGhhbmRsZXIgbGFiZWwuGAEgAyoBMTIeVGhlIGN1cnJlbnQgbnVtYmVyIG9mIHRocmVhZHMuOg9DdXJyZW50IHRocmVhZHNCK2FnZW50Lmdvb2dsZWFwaXMuY29tL3RvbWNhdC90aHJlYWRzL2N1cnJlbnRSCAgEEgIIPBoACvsDCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3Zhcm5pc2gvYmFja2VuZF9jb25uZWN0aW9uX2NvdW50EkUKCmNhY2hlX25hbWUaN1RoZSBWYXJuaXNoIGNhY2hlIG5hbWUgc3VmZml4ZWQgd2l0aCBhIG1ldHJpYyBjYXRlZ29yeS4SkgEKBHR5cGUaiQFUaGUgYmFja2VuZCBjb25uZWN0aW9uIHR5cGUgKGVpdGhlciAnZmFpbHVyZXMnLCAnbm90LWF0dGVtcHRlZCcsICdyZWN5Y2xlZCcsICdyZXVzZXMnLCAnc3VjY2VzcycsICd0b28tbWFueScsICd1bnVzZWQnLCBvciAnd2FzLWNsb3NlZCcpLhIoCghjYXRlZ29yeRocVGhlIFZhcm5pc2ggbWV0cmljIGNhdGVnb3J5LhgDIAIqATEyIUJhY2tlbmQgY29ubmVjdGlvbiBzdWNjZXNzIGNvdW50LjocQmFja2VuZCBjb25uZWN0aW9uIHN1Y2Nlc3Nlc0I1YWdlbnQuZ29vZ2xlYXBpcy5jb20vdmFybmlzaC9iYWNrZW5kX2Nvbm5lY3Rpb25fY291bnRSCAgEEgIIPBoACpYDCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3Zhcm5pc2gvY2FjaGVfb3BlcmF0aW9uX2NvdW50EkUKCmNhY2hlX25hbWUaN1RoZSBWYXJuaXNoIGNhY2hlIG5hbWUgc3VmZml4ZWQgd2l0aCBhIG1ldHJpYyBjYXRlZ29yeS4SSwoJb3BlcmF0aW9uGj5UaGUgY2FjaGUgb3BlcmF0aW9uIHR5cGUgKGVpdGhlciAnaGl0JywgJ21pc3MnLCBvciAnaGl0cGFzcycpLhIoCghjYXRlZ29yeRocVGhlIFZhcm5pc2ggbWV0cmljIGNhdGVnb3J5LhgDIAIqATEyFkNhY2hlIG9wZXJhdGlvbiBjb3VudC46EENhY2hlIG9wZXJhdGlvbnNCMmFnZW50Lmdvb2dsZWFwaXMuY29tL3Zhcm5pc2gvY2FjaGVfb3BlcmF0aW9uX2NvdW50UggIBBICCDwaAAqkAwppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS92YXJuaXNoL2NsaWVudF9jb25uZWN0aW9uX2NvdW50EkUKCmNhY2hlX25hbWUaN1RoZSBWYXJuaXNoIGNhY2hlIG5hbWUgc3VmZml4ZWQgd2l0aCBhIG1ldHJpYyBjYXRlZ29yeS4SKAoIY2F0ZWdvcnkaHFRoZSBWYXJuaXNoIG1ldHJpYyBjYXRlZ29yeS4SUQoEdHlwZRpJVGhlIGNsaWVudCBjb25uZWN0aW9uIHR5cGUgKGVpdGhlciAnYWNjZXB0ZWQnLCAnZHJvcHBlZCcsIG9yICdyZWNlaXZlZCcpLhgDIAIqATEyGENsaWVudCBjb25uZWN0aW9uIGNvdW50LjoSQ2xpZW50IGNvbm5lY3Rpb25zQjRhZ2VudC5nb29nbGVhcGlzLmNvbS92YXJuaXNoL2NsaWVudF9jb25uZWN0aW9uX2NvdW50UggIBBICCDwaAArkAQplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvY29ubmVjdGlvbnNfY291bnQYASADKgExMiZOdW1iZXIgb2YgY29ubmVjdGlvbnMgY3VycmVudGx5IGFsaXZlLjoQT3BlbiBjb25uZWN0aW9uc0IwYWdlbnQuZ29vZ2xlYXBpcy5jb20vem9va2VlcGVyL2Nvbm5lY3Rpb25zX2NvdW50UggIBBICCDwaAArPAQpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvZGF0YV9zaXplGAEgAyoCQnkyJ0J5dGVzIG9mIGRhdGEgb24gdGhpcyBab29LZWVwZXIgc2VydmVyLjoJRGF0YSBzaXplQihhZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvZGF0YV9zaXplUggIBBICCDwaAArHAQpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvZm9sbG93ZXJzL2NvdW50GAEgAyoBMTIUTnVtYmVyIG9mIGZvbGxvd2Vycy46CUZvbGxvd2Vyc0IuYWdlbnQuZ29vZ2xlYXBpcy5jb20vem9va2VlcGVyL2ZvbGxvd2Vycy9jb3VudFIICAQSAgg8GgAK6QEKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vem9va2VlcGVyL2ZvbGxvd2Vycy9zeW5jZWRfY291bnQYASADKgExMiFOdW1iZXIgb2Ygc3luY2hyb25pemVkIGZvbGxvd2Vycy46EFN5bmNlZCBmb2xsb3dlcnNCNWFnZW50Lmdvb2dsZWFwaXMuY29tL3pvb2tlZXBlci9mb2xsb3dlcnMvc3luY2VkX2NvdW50UggIBBICCDwaAArpAQpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvbmV0d29yay9yZWNlaXZlZF9wYWNrZXRzX2NvdW50GAMgAioBMTIRUGFja2V0cyByZWNlaXZlZC46EFBhY2tldHMgcmVjZWl2ZWRCPWFnZW50Lmdvb2dsZWFwaXMuY29tL3pvb2tlZXBlci9uZXR3b3JrL3JlY2VpdmVkX3BhY2tldHNfY291bnRSCAgEEgIIPBoACtkBCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3pvb2tlZXBlci9uZXR3b3JrL3NlbnRfcGFja2V0c19jb3VudBgDIAIqATEyDVBhY2tldHMgc2VudC46DFBhY2tldHMgc2VudEI5YWdlbnQuZ29vZ2xlYXBpcy5jb20vem9va2VlcGVyL25ldHdvcmsvc2VudF9wYWNrZXRzX2NvdW50UggIBBICCDwaAAq8AQpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvbm9kZXMvY291bnQYASADKgExMhVab29LZWVwZXIgbm9kZSBjb3VudC46BU5vZGVzQiphZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvbm9kZXMvY291bnRSCAgEEgIIPBoACt8BCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3pvb2tlZXBlci9ub2Rlcy9lcGhlbWVyYWxfY291bnQYASADKgExMhpOdW1iZXIgb2YgZXBoZW1lcmFsIG5vZGVzLjoPRXBoZW1lcmFsIG5vZGVzQjRhZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvbm9kZXMvZXBoZW1lcmFsX2NvdW50UggIBBICCDwaAAreAQpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvbm9kZXMvd2F0Y2hlc19jb3VudBgBIAMqATEyJU51bWJlciBvZiB3YXRjaGVzIG9uIFpvb0tlZXBlciBub2Rlcy46B1dhdGNoZXNCMmFnZW50Lmdvb2dsZWFwaXMuY29tL3pvb2tlZXBlci9ub2Rlcy93YXRjaGVzX2NvdW50UggIBBICCDwaAArsAQpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvcmVxdWVzdHMvbGF0ZW5jeS9hdmVyYWdlGAEgAyoCbXMyGEF2ZXJhZ2UgcmVxdWVzdCBsYXRlbmN5LjoXQXZlcmFnZSByZXF1ZXN0IGxhdGVuY3lCN2FnZW50Lmdvb2dsZWFwaXMuY29tL3pvb2tlZXBlci9yZXF1ZXN0cy9sYXRlbmN5L2F2ZXJhZ2VSCAgEEgIIPBoACuwBCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FnZW50Lmdvb2dsZWFwaXMuY29tL3pvb2tlZXBlci9yZXF1ZXN0cy9sYXRlbmN5L21heGltdW0YASADKgJtczIYTWF4aW11bSByZXF1ZXN0IGxhdGVuY3kuOhdNYXhpbXVtIHJlcXVlc3QgbGF0ZW5jeUI3YWdlbnQuZ29vZ2xlYXBpcy5jb20vem9va2VlcGVyL3JlcXVlc3RzL2xhdGVuY3kvbWF4aW11bVIICAQSAgg8GgAK7AEKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYWdlbnQuZ29vZ2xlYXBpcy5jb20vem9va2VlcGVyL3JlcXVlc3RzL2xhdGVuY3kvbWluaW11bRgBIAMqAm1zMhhNaW5pbXVtIHJlcXVlc3QgbGF0ZW5jeS46F01pbmltdW0gcmVxdWVzdCBsYXRlbmN5QjdhZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvcmVxdWVzdHMvbGF0ZW5jeS9taW5pbXVtUggIBBICCDwaAArzAQpucHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvcmVxdWVzdHMvb3V0c3RhbmRpbmdfY291bnQYASADKgExMh9OdW1iZXIgb2Ygb3V0c3RhbmRpbmcgcmVxdWVzdHMuOhRPdXRzdGFuZGluZyByZXF1ZXN0c0I5YWdlbnQuZ29vZ2xlYXBpcy5jb20vem9va2VlcGVyL3JlcXVlc3RzL291dHN0YW5kaW5nX2NvdW50UggIBBICCDwaAAqAAgpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hZ2VudC5nb29nbGVhcGlzLmNvbS96b29rZWVwZXIvc3luY19vcGVyYXRpb25zL3BlbmRpbmdfY291bnQYASADKgExMi1OdW1iZXIgb2YgcGVuZGluZyBzeW5jaHJvbml6YXRpb24gb3BlcmF0aW9ucy46DVBlbmRpbmcgc3luY3NCPGFnZW50Lmdvb2dsZWFwaXMuY29tL3pvb2tlZXBlci9zeW5jX29wZXJhdGlvbnMvcGVuZGluZ19jb3VudFIICAQSAgg8GgAKjwIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL2ZsZXgvY29ubmVjdGlvbnMvY3VycmVudBgBIAMqATEyUU51bWJlciBvZiBjdXJyZW50IGFjdGl2ZSBjb25uZWN0aW9ucyBwZXIgQXBwIEVuZ2luZSBmbGV4aWJsZSBlbnZpcm9ubWVudCB2ZXJzaW9uLjoLQ29ubmVjdGlvbnNCMWFwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9mbGV4L2Nvbm5lY3Rpb25zL2N1cnJlbnRSCwgDEgIIPBoDCPABCpECCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9mbGV4L2NwdS9yZXNlcnZlZF9jb3JlcxgBIAMqATEyUlRvdGFsIG51bWJlciBvZiBDUFUgY29yZXMgYWxsb2NhdGVkIHRvIGFuIEFwcCBFbmdpbmUgZmxleGlibGUgZW52aXJvbm1lbnQgdmVyc2lvbi46DlJlc2VydmVkIGNvcmVzQjBhcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vZmxleC9jcHUvcmVzZXJ2ZWRfY29yZXNSCwgEEgIIPBoDCPABCskCCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9mbGV4L2NwdS91dGlsaXphdGlvbhgBIAMqATEyjgFUaGUgZnJhY3Rpb24gb2YgYWxsb2NhdGVkIENQVSBpbiB1c2UgYWNyb3NzIGFuIEFwcCBFbmdpbmUgZmxleGlibGUgZW52aXJvbm1lbnQgdmVyc2lvbi4gTm90ZSB0aGF0IHNvbWUgbWFjaGluZSB0eXBlcyBhbGxvdyBidXJzdGluZyBhYm92ZSAxLjAuOg9DUFUgdXRpbGl6YXRpb25CLWFwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9mbGV4L2NwdS91dGlsaXphdGlvblILCAQSAgg8GgMI8AEKnQIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL2ZsZXgvZGlzay9yZWFkX2J5dGVzX2NvdW50GAIgAioCQnkyVkRlbHRhIGNvdW50IG9mIGJ5dGVzIHJlYWQgZnJvbSBkaXNrIGFjcm9zcyBhbiBBcHAgRW5naW5lIGZsZXhpYmxlIGVudmlyb25tZW50IHZlcnNpb24uOg9EaXNrIGJ5dGVzIHJlYWRCM2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9mbGV4L2Rpc2svcmVhZF9ieXRlc19jb3VudFILCAQSAgg8GgMI8AEKpQIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL2ZsZXgvZGlzay93cml0ZV9ieXRlc19jb3VudBgCIAIqAkJ5MllEZWx0YSBjb3VudCBvZiBieXRlcyB3cml0dGVuIGZyb20gZGlzayBhY3Jvc3MgYW4gQXBwIEVuZ2luZSBmbGV4aWJsZSBlbnZpcm9ubWVudCB2ZXJzaW9uLjoSRGlzayBieXRlcyB3cml0dGVuQjRhcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vZmxleC9kaXNrL3dyaXRlX2J5dGVzX2NvdW50UgsIBBICCDwaAwjwAQqiAgpvcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vZmxleC9pbnN0YW5jZS9jb25uZWN0aW9ucy9jdXJyZW50GAEgAyoBMTJSTnVtYmVyIG9mIGN1cnJlbnQgYWN0aXZlIGNvbm5lY3Rpb25zIHBlciBBcHAgRW5naW5lIGZsZXhpYmxlIGVudmlyb25tZW50IGluc3RhbmNlLjoLQ29ubmVjdGlvbnNCOmFwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9mbGV4L2luc3RhbmNlL2Nvbm5lY3Rpb25zL2N1cnJlbnRSCwgDEgIIPBoDCPABCp8CCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9mbGV4L2luc3RhbmNlL2NwdS91dGlsaXphdGlvbhgBIAMqATEyU0ZyYWN0aW9uIG9mIENQVSB1dGlsaXphdGlvbiBmb3IgYWxsIGNvcmVzIG9uIGEgc2luZ2xlIEFwcCBFbmdpbmUgZmxleGlibGUgaW5zdGFuY2UuOg9DUFUgVXRpbGl6YXRpb25CNmFwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9mbGV4L2luc3RhbmNlL2NwdS91dGlsaXphdGlvblILCAMSAgg8GgMI8AEKtwIKeHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL2ZsZXgvaW5zdGFuY2UvbmV0d29yay9yZWNlaXZlZF9ieXRlc19jb3VudBgCIAIqAkJ5MklEZWx0YSBjb3VudCBvZiBpbmNvbWluZyBuZXR3b3JrIGJ5dGVzIGluIGFuIEFwcCBFbmdpbmUgZmxleGlibGUgaW5zdGFuY2UuOhZOZXR3b3JrIGJ5dGVzIHJlY2VpdmVkQkNhcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vZmxleC9pbnN0YW5jZS9uZXR3b3JrL3JlY2VpdmVkX2J5dGVzX2NvdW50UgsIAxICCDwaAwjwAQqrAgp0cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vZmxleC9pbnN0YW5jZS9uZXR3b3JrL3NlbnRfYnl0ZXNfY291bnQYAiACKgJCeTJJRGVsdGEgY291bnQgb2Ygb3V0Z29pbmcgbmV0d29yayBieXRlcyBpbiBhbiBBcHAgRW5naW5lIGZsZXhpYmxlIGluc3RhbmNlLjoSTmV0d29yayBieXRlcyBzZW50Qj9hcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vZmxleC9pbnN0YW5jZS9uZXR3b3JrL3NlbnRfYnl0ZXNfY291bnRSCwgDEgIIPBoDCPABCp0CCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9mbGV4L2luc3RhbmNlL3dzL2F2Z19kdXJhdGlvbhgBIAMqAXMyR0F2ZXJhZ2Ugb2Ygd2Vic29ja2V0IHJlcXVlc3RzIGZvciBhIGdpdmVuIEFwcCBFbmdpbmUgRmxleGlibGUgaW5zdGFuY2UuOhlXZWJzb2NrZXQgYXZlcmFnZSBkdXJhdG9uQjZhcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vZmxleC9pbnN0YW5jZS93cy9hdmdfZHVyYXRpb25SCwgDEgIIPBoDCPABCr8CCm9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9mbGV4L25ldHdvcmsvcmVjZWl2ZWRfYnl0ZXNfY291bnQYAiACKgJCeTJiRGVsdGEgY291bnQgb2YgaW5jb21pbmcgbmV0d29yayBieXRlcyBhY3Jvc3MgYWxsIFZNcyBpbiBhbiBBcHAgRW5naW5lIGZsZXhpYmxlIGVudmlyb25tZW50IHZlcnNpb246F05ldHdvcmsgYnl0ZXMgcmVjZWl2ZWQuQjphcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vZmxleC9uZXR3b3JrL3JlY2VpdmVkX2J5dGVzX2NvdW50UgsIBBICCDwaAwjwAQqzAgprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vZmxleC9uZXR3b3JrL3NlbnRfYnl0ZXNfY291bnQYAiACKgJCeTJiRGVsdGEgY291bnQgb2Ygb3V0Z29pbmcgbmV0d29yayBieXRlcyBhY3Jvc3MgYWxsIFZNcyBpbiBhbiBBcHAgRW5naW5lIGZsZXhpYmxlIGVudmlyb25tZW50IHZlcnNpb246E05ldHdvcmsgYnl0ZXMgc2VudC5CNmFwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9mbGV4L25ldHdvcmsvc2VudF9ieXRlc19jb3VudFILCAQSAgg8GgMI8AEKkQIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL2h0dHAvc2VydmVyL2Rvc19pbnRlcmNlcHRfY291bnQYAiACKgExMj5EZWx0YSBjb3VudCBvZiBpbnRlcmNlcHRpb25zIHBlcmZvcm1lZCB0byBwcmV2ZW50IERvUyBhdHRhY2tzLjoSSW50ZXJjZXB0aW9uIGNvdW50QjhhcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vaHR0cC9zZXJ2ZXIvZG9zX2ludGVyY2VwdF9jb3VudFILCAQSAgg8GgMI8AEKlQIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL2h0dHAvc2VydmVyL3F1b3RhX2RlbmlhbF9jb3VudBgCIAIqATEyRERlbHRhIGNvdW50IG9mIHJlcXVlc3RzIHRoYXQgZmFpbGVkIGR1ZSB0byB0aGUgYXBwIGJlaW5nIG92ZXIgcXVvdGEuOhJRdW90YSBkZW5pYWwgY291bnRCN2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9odHRwL3NlcnZlci9xdW90YV9kZW5pYWxfY291bnRSCwgEEgIIPBoDCPABCs4CCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9odHRwL3NlcnZlci9yZXNwb25zZV9jb3VudBI3Cgdsb2FkaW5nEAEaKkluZGljYXRlcyB3aGV0aGVyIHRoZSByZXF1ZXN0IHdhcyBsb2FkaW5nLhI0Cg1yZXNwb25zZV9jb2RlEAIaIUhUVFAgc3RhdHVzIGNvZGUgZm9yIHRoZSByZXF1ZXN0LhgCIAIqATEyGkRlbHRhIEhUVFAgcmVzcG9uc2UgY291bnQuOg5SZXNwb25zZSBjb3VudEIzYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL2h0dHAvc2VydmVyL3Jlc3BvbnNlX2NvdW50UgsIBBICCDwaAwjwAQrVAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vaHR0cC9zZXJ2ZXIvcmVzcG9uc2VfbGF0ZW5jaWVzEjcKB2xvYWRpbmcQARoqSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHJlcXVlc3Qgd2FzIGxvYWRpbmcuEjQKDXJlc3BvbnNlX2NvZGUQAhohSFRUUCBzdGF0dXMgY29kZSBmb3IgdGhlIHJlcXVlc3QuGAIgBSoCbXMyFkhUVFAgcmVzcG9uc2UgbGF0ZW5jeS46EFJlc3BvbnNlIGxhdGVuY3lCN2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9odHRwL3NlcnZlci9yZXNwb25zZV9sYXRlbmNpZXNSCwgEEgIIPBoDCPABCvoCCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9odHRwL3NlcnZlci9yZXNwb25zZV9zdHlsZV9jb3VudBJGCgdkeW5hbWljEAEaOUluZGljYXRlcyBpZiB0aGUgcmVxdWVzdCB3YXMgYSBzdGF0aWMgb3IgZHluYW1pYyByZXF1ZXN0LhIxCgZjYWNoZWQQARolSW5kaWNhdGVzIGlmIHRoZSByZXNwb25zZSB3YXMgY2FjaGVkLhgCIAIqATEyJURlbHRhIGNvdW50cyBvbiB0aGUgSFRUUCBzZXJ2ZSBzdHlsZS46F1Jlc3BvbnNlIGNvdW50IGJ5IHN0eWxlQjlhcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vaHR0cC9zZXJ2ZXIvcmVzcG9uc2Vfc3R5bGVfY291bnRSCwgEEgIIPBoDCPABCsMCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9tZW1jYWNoZS9jZW50aV9tY3VfY291bnQSKAoHY29tbWFuZBodTmFtZSBvZiB0aGUgbWVtY2FjaGUgY29tbWFuZC4YAiACKgExMlJNZW1jYWNoZSB1dGlsaXphdGlvbiBpbiBvbmUgaHVuZHJlZHRoIG9mIE1lbWNhY2hlIENvbXB1dGUgVW5pdCBncm91cGVkIGJ5IGNvbW1hbmQuOhRNZW1jYWNoZSB1dGlsaXphdGlvbkIxYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL21lbWNhY2hlL2NlbnRpX21jdV9jb3VudFILCAQSAgg8GgMI8AEK9QIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL21lbWNhY2hlL29wZXJhdGlvbl9jb3VudBIoCgdjb21tYW5kGh1OYW1lIG9mIHRoZSBtZW1jYWNoZSBjb21tYW5kLhJDCgZzdGF0dXMaOVdoZXRoZXIgdGhlIG9wZXJhdGlvbiBzdWNjZWVkZWQgb3Igbm90LCBlLmcuIEhJVCBvciBNSVNTLhgCIAIqATEyQENvdW50IG9mIG1lbWNhY2hlIGtleSBvcGVyYXRpb25zLCBncm91cGVkIGJ5IGNvbW1hbmQgYW5kIHN0YXR1cy46E01lbWNhY2hlIG9wZXJhdGlvbnNCMWFwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9tZW1jYWNoZS9vcGVyYXRpb25fY291bnRSCwgEEgIIPBoDCLQBCoMDCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9tZW1jYWNoZS9yZWNlaXZlZF9ieXRlc19jb3VudBIkCgZzdGF0dXMaGlJQQyBzdGF0dXMgb2YgdGhlIHJlcXVlc3QuEigKB2NvbW1hbmQaHU5hbWUgb2YgdGhlIG1lbWNhY2hlIGNvbW1hbmQuGAIgAioCQnkyXk51bWJlciBvZiBieXRlcyByZWNlaXZlZCBieSBhcHAgZnJvbSB0aGUgbWVtY2FjaGUgQVBJLCBncm91cGVkIGJ5IHN0YXR1cyBhbmQgbWVtY2FjaGUgY29tbWFuZC46F01lbWNhY2hlIHJlY2VpdmVkIGJ5dGVzQjZhcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vbWVtY2FjaGUvcmVjZWl2ZWRfYnl0ZXNfY291bnRSCwgEEgIIPBoDCPABCsUCCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9tZW1jYWNoZS9zZW50X2J5dGVzX2NvdW50EigKB2NvbW1hbmQaHU5hbWUgb2YgdGhlIG1lbWNhY2hlIGNvbW1hbmQuGAIgAioCQnkyUk51bWJlciBvZiBieXRlcyBzZW50IGJ5IGFwcCB0aHJvdWdoIHRoZSBtZW1jYWNoZSBBUEksIGdyb3VwZWQgYnkgbWVtY2FjaGUgY29tbWFuZC46E01lbWNhY2hlIHNlbnQgYnl0ZXNCMmFwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9tZW1jYWNoZS9zZW50X2J5dGVzX2NvdW50UgsIBBICCDwaAwjwAQqVAgpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vc3lzdGVtL2NwdS91c2FnZRI3CgZzb3VyY2UaLVRoZSBzb3VyY2Ugb2YgdGhlIENQVSB1c2FnZSAoYXBpIG9yIHJ1bnRpbWUpLhgBIAIqATEyK0NQVSB1c2FnZSBpbiBtZWdhY3ljbGVzIG92ZXIgYWxsIGluc3RhbmNlcy46DkNQVSBtZWdhY3ljbGVzQilhcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vc3lzdGVtL2NwdS91c2FnZVILCAQSAgg8GgMI8AEKiwIKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL3N5c3RlbS9pbnN0YW5jZV9jb3VudBIvCgVzdGF0ZRomU3RhdGUgb2YgaW5zdGFuY2UgKGFjdGl2ZSwgaWRsZSwgZXRjKS4YASACKgExMh9OdW1iZXIgb2YgaW5zdGFuY2VzIHRoYXQgZXhpc3QuOg5JbnN0YW5jZSBjb3VudEIuYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL3N5c3RlbS9pbnN0YW5jZV9jb3VudFILCAQSAgg8GgMI8AEK3QEKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXBwZW5naW5lLmdvb2dsZWFwaXMuY29tL3N5c3RlbS9tZW1vcnkvdXNhZ2UYASACKgJCeTInVG90YWwgbWVtb3J5IHVzZWQgYnkgcnVubmluZyBpbnN0YW5jZXMuOgxNZW1vcnkgdXNhZ2VCLGFwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9zeXN0ZW0vbWVtb3J5L3VzYWdlUgsIBBICCDwaAwjwAQqxAgpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vc3lzdGVtL25ldHdvcmsvcmVjZWl2ZWRfYnl0ZXNfY291bnQSLQoGY2FjaGVkEAEaIUluZGljYXRlcyBpZiByZXNwb25zZSB3YXMgY2FjaGVkLhgCIAIqAkJ5MipEZWx0YSBjb3VudCBvZiBpbmNvbWluZyBuZXR3b3JrIGJhbmR3aWR0aC46DlJlY2VpdmVkIGJ5dGVzQjxhcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vc3lzdGVtL25ldHdvcmsvcmVjZWl2ZWRfYnl0ZXNfY291bnRSCwgEEgIIPBoDCPABCqUCCm1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2FwcGVuZ2luZS5nb29nbGVhcGlzLmNvbS9zeXN0ZW0vbmV0d29yay9zZW50X2J5dGVzX2NvdW50Ei0KBmNhY2hlZBABGiFJbmRpY2F0ZXMgaWYgcmVzcG9uc2Ugd2FzIGNhY2hlZC4YAiACKgJCeTIqRGVsdGEgY291bnQgb2Ygb3V0Z29pbmcgbmV0d29yayBiYW5kd2lkdGguOgpTZW50IGJ5dGVzQjhhcHBlbmdpbmUuZ29vZ2xlYXBpcy5jb20vc3lzdGVtL25ldHdvcmsvc2VudF9ieXRlc19jb3VudFILCAQSAgg8GgMI8AEKgwIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9BY3RpdmVDb25uZWN0aW9uQ291bnQvQXZlcmFnZRgBIAMqATEyLVRoZSBhdmVyYWdlIG51bWJlciBvZiBhY3RpdmUgVENQIGNvbm5lY3Rpb25zLjodQXZlcmFnZSBvZiBhY3RpdmUgY29ubmVjdGlvbnNCNGF3cy5nb29nbGVhcGlzLmNvbS9BTEIvQWN0aXZlQ29ubmVjdGlvbkNvdW50L0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCoMCCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvQWN0aXZlQ29ubmVjdGlvbkNvdW50L01heGltdW0YASADKgExMi1UaGUgbWF4aW11bSBudW1iZXIgb2YgYWN0aXZlIFRDUCBjb25uZWN0aW9ucy46HU1heGltdW0gb2YgYWN0aXZlIGNvbm5lY3Rpb25zQjRhd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0FjdGl2ZUNvbm5lY3Rpb25Db3VudC9NYXhpbXVtUgsIBBICCDwaAwiwCQqDAgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0FjdGl2ZUNvbm5lY3Rpb25Db3VudC9NaW5pbXVtGAEgAyoBMTItVGhlIG1pbmltdW0gbnVtYmVyIG9mIGFjdGl2ZSBUQ1AgY29ubmVjdGlvbnMuOh1NaW5pbXVtIG9mIGFjdGl2ZSBjb25uZWN0aW9uc0I0YXdzLmdvb2dsZWFwaXMuY29tL0FMQi9BY3RpdmVDb25uZWN0aW9uQ291bnQvTWluaW11bVILCAQSAgg8GgMIsAkKiQIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9BY3RpdmVDb25uZWN0aW9uQ291bnQvU2FtcGxlQ291bnQYAiADKgExMitUaGUgdG90YWwgbnVtYmVyIG9mIGFjdGl2ZSBUQ1AgY29ubmVjdGlvbnMuOh1TYW1wbGVzIG9mIGFjdGl2ZSBjb25uZWN0aW9uc0I4YXdzLmdvb2dsZWFwaXMuY29tL0FMQi9BY3RpdmVDb25uZWN0aW9uQ291bnQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCvUBCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvQWN0aXZlQ29ubmVjdGlvbkNvdW50L1N1bRgCIAMqATEyK1RoZSB0b3RhbCBudW1iZXIgb2YgYWN0aXZlIFRDUCBjb25uZWN0aW9ucy46GVN1bSBvZiBhY3RpdmUgY29ubmVjdGlvbnNCMGF3cy5nb29nbGVhcGlzLmNvbS9BTEIvQWN0aXZlQ29ubmVjdGlvbkNvdW50L1N1bVILCAQSAgg8GgMIsAkK8QIKdnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9DbGllbnRUTFNOZWdvdGlhdGlvbkVycm9yQ291bnQvU2FtcGxlQ291bnQSQgoQQXZhaWxhYmlsaXR5Wm9uZRouVGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSBmb3IgdGhlIG1ldHJpYyBkYXRhLhgCIAMqATEyOlRoZSBudW1iZXIgb2YgZmFpbGVkIFRMUyBjb25uZWN0aW9ucyB0byB0aGUgbG9hZCBiYWxhbmNlci46IFNhbXBsZXMgb2YgVExTIGNvbm5lY3Rpb24gZXJyb3JzQkFhd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0NsaWVudFRMU05lZ290aWF0aW9uRXJyb3JDb3VudC9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkK3QIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9DbGllbnRUTFNOZWdvdGlhdGlvbkVycm9yQ291bnQvU3VtEkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4YAiADKgExMjpUaGUgbnVtYmVyIG9mIGZhaWxlZCBUTFMgY29ubmVjdGlvbnMgdG8gdGhlIGxvYWQgYmFsYW5jZXIuOhxTdW0gb2YgVExTIGNvbm5lY3Rpb24gZXJyb3JzQjlhd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0NsaWVudFRMU05lZ290aWF0aW9uRXJyb3JDb3VudC9TdW1SCwgEEgIIPBoDCLAJCsgCCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfRUxCXzRYWF9Db3VudC9TYW1wbGVDb3VudBJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuGAIgAyoBMTIoVGhlIGNvdW50IG9mIDRYWCAoSFRUUCkgRUxCIGVycm9yIGNvZGVzLjoZU2FtcGxlcyBvZiA0eHggRUxCIGVycm9yc0I5YXdzLmdvb2dsZWFwaXMuY29tL0FMQi9IVFRQQ29kZV9FTEJfNFhYX0NvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQq0AgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0hUVFBDb2RlX0VMQl80WFhfQ291bnQvU3VtEkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4YAiADKgExMihUaGUgY291bnQgb2YgNFhYIChIVFRQKSBFTEIgZXJyb3IgY29kZXMuOhVTdW0gb2YgNHh4IEVMQiBlcnJvcnNCMWF3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfRUxCXzRYWF9Db3VudC9TdW1SCwgEEgIIPBoDCLAJCsgCCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfRUxCXzVYWF9Db3VudC9TYW1wbGVDb3VudBJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuGAIgAyoBMTIoVGhlIGNvdW50IG9mIDVYWCAoSFRUUCkgRUxCIGVycm9yIGNvZGVzLjoZU2FtcGxlcyBvZiA1eHggRUxCIGVycm9yc0I5YXdzLmdvb2dsZWFwaXMuY29tL0FMQi9IVFRQQ29kZV9FTEJfNVhYX0NvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQq0AgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0hUVFBDb2RlX0VMQl81WFhfQ291bnQvU3VtEkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4YAiADKgExMihUaGUgY291bnQgb2YgNVhYIChIVFRQKSBFTEIgZXJyb3IgY29kZXMuOhVTdW0gb2YgNXh4IEVMQiBlcnJvcnNCMWF3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfRUxCXzVYWF9Db3VudC9TdW1SCwgEEgIIPBoDCLAJCooDCnFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfVGFyZ2V0XzJYWF9Db3VudC9TYW1wbGVDb3VudBJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgCIAMqATEyK1RoZSBjb3VudCBvZiAyWFggKEhUVFApIHRhcmdldCBlcnJvciBjb2Rlcy46GFNhbXBsZXMgb2YgMnh4IHJlc3BvbnNlc0I8YXdzLmdvb2dsZWFwaXMuY29tL0FMQi9IVFRQQ29kZV9UYXJnZXRfMlhYX0NvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQr2AgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0hUVFBDb2RlX1RhcmdldF8yWFhfQ291bnQvU3VtEkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4SOAoLVGFyZ2V0R3JvdXAaKVRoZSBBV1MgVGFyZ2V0IEdyb3VwIGZvciB0aGUgbWV0cmljIGRhdGEuGAIgAyoBMTIrVGhlIGNvdW50IG9mIDJYWCAoSFRUUCkgdGFyZ2V0IGVycm9yIGNvZGVzLjoUU3VtIG9mIDJ4eCByZXNwb25zZXNCNGF3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfVGFyZ2V0XzJYWF9Db3VudC9TdW1SCwgEEgIIPBoDCLAJCooDCnFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfVGFyZ2V0XzNYWF9Db3VudC9TYW1wbGVDb3VudBJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgCIAMqATEyK1RoZSBjb3VudCBvZiAzWFggKEhUVFApIHRhcmdldCBlcnJvciBjb2Rlcy46GFNhbXBsZXMgb2YgM3h4IHJlc3BvbnNlc0I8YXdzLmdvb2dsZWFwaXMuY29tL0FMQi9IVFRQQ29kZV9UYXJnZXRfM1hYX0NvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQr2AgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0hUVFBDb2RlX1RhcmdldF8zWFhfQ291bnQvU3VtEkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4SOAoLVGFyZ2V0R3JvdXAaKVRoZSBBV1MgVGFyZ2V0IEdyb3VwIGZvciB0aGUgbWV0cmljIGRhdGEuGAIgAyoBMTIrVGhlIGNvdW50IG9mIDNYWCAoSFRUUCkgdGFyZ2V0IGVycm9yIGNvZGVzLjoUU3VtIG9mIDN4eCByZXNwb25zZXNCNGF3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfVGFyZ2V0XzNYWF9Db3VudC9TdW1SCwgEEgIIPBoDCLAJCooDCnFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfVGFyZ2V0XzRYWF9Db3VudC9TYW1wbGVDb3VudBJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgCIAMqATEyK1RoZSBjb3VudCBvZiA0WFggKEhUVFApIHRhcmdldCBlcnJvciBjb2Rlcy46GFNhbXBsZXMgb2YgNHh4IHJlc3BvbnNlc0I8YXdzLmdvb2dsZWFwaXMuY29tL0FMQi9IVFRQQ29kZV9UYXJnZXRfNFhYX0NvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQr2AgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0hUVFBDb2RlX1RhcmdldF80WFhfQ291bnQvU3VtEkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4SOAoLVGFyZ2V0R3JvdXAaKVRoZSBBV1MgVGFyZ2V0IEdyb3VwIGZvciB0aGUgbWV0cmljIGRhdGEuGAIgAyoBMTIrVGhlIGNvdW50IG9mIDRYWCAoSFRUUCkgdGFyZ2V0IGVycm9yIGNvZGVzLjoUU3VtIG9mIDR4eCByZXNwb25zZXNCNGF3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfVGFyZ2V0XzRYWF9Db3VudC9TdW1SCwgEEgIIPBoDCLAJCooDCnFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfVGFyZ2V0XzVYWF9Db3VudC9TYW1wbGVDb3VudBJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgCIAMqATEyK1RoZSBjb3VudCBvZiA1WFggKEhUVFApIHRhcmdldCBlcnJvciBjb2Rlcy46GFNhbXBsZXMgb2YgNXh4IHJlc3BvbnNlc0I8YXdzLmdvb2dsZWFwaXMuY29tL0FMQi9IVFRQQ29kZV9UYXJnZXRfNVhYX0NvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQr2AgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0hUVFBDb2RlX1RhcmdldF81WFhfQ291bnQvU3VtEkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4SOAoLVGFyZ2V0R3JvdXAaKVRoZSBBV1MgVGFyZ2V0IEdyb3VwIGZvciB0aGUgbWV0cmljIGRhdGEuGAIgAyoBMTIrVGhlIGNvdW50IG9mIDVYWCAoSFRUUCkgdGFyZ2V0IGVycm9yIGNvZGVzLjoUU3VtIG9mIDV4eCByZXNwb25zZXNCNGF3cy5nb29nbGVhcGlzLmNvbS9BTEIvSFRUUENvZGVfVGFyZ2V0XzVYWF9Db3VudC9TdW1SCwgEEgIIPBoDCLAJCuwCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvSGVhbHRoeUhvc3RDb3VudC9BdmVyYWdlEkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4SOAoLVGFyZ2V0R3JvdXAaKVRoZSBBV1MgVGFyZ2V0IEdyb3VwIGZvciB0aGUgbWV0cmljIGRhdGEuGAEgAyoBMTInVGhlIG51bWJlciBvZiB0YXJnZXRzIHRoYXQgYXJlIGhlYWx0aHkuOhhBdmVyYWdlIG9mIGhlYWx0aHkgaG9zdHNCL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvSGVhbHRoeUhvc3RDb3VudC9BdmVyYWdlUgsIBBICCDwaAwiwCQrsAgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0hlYWx0aHlIb3N0Q291bnQvTWF4aW11bRJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgBIAMqATEyJ1RoZSBudW1iZXIgb2YgdGFyZ2V0cyB0aGF0IGFyZSBoZWFsdGh5LjoYTWF4aW11bSBvZiBoZWFsdGh5IGhvc3RzQi9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0hlYWx0aHlIb3N0Q291bnQvTWF4aW11bVILCAQSAgg8GgMIsAkK7AIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9IZWFsdGh5SG9zdENvdW50L01pbmltdW0SQgoQQXZhaWxhYmlsaXR5Wm9uZRouVGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSBmb3IgdGhlIG1ldHJpYyBkYXRhLhI4CgtUYXJnZXRHcm91cBopVGhlIEFXUyBUYXJnZXQgR3JvdXAgZm9yIHRoZSBtZXRyaWMgZGF0YS4YASADKgExMidUaGUgbnVtYmVyIG9mIHRhcmdldHMgdGhhdCBhcmUgaGVhbHRoeS46GE1pbmltdW0gb2YgaGVhbHRoeSBob3N0c0IvYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9IZWFsdGh5SG9zdENvdW50L01pbmltdW1SCwgEEgIIPBoDCLAJCvQCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvSGVhbHRoeUhvc3RDb3VudC9TYW1wbGVDb3VudBJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgCIAMqATEyJ1RoZSBudW1iZXIgb2YgdGFyZ2V0cyB0aGF0IGFyZSBoZWFsdGh5LjoYU2FtcGxlcyBvZiBoZWFsdGh5IGhvc3RzQjNhd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0hlYWx0aHlIb3N0Q291bnQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCpgCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvSVB2NlByb2Nlc3NlZEJ5dGVzL1NhbXBsZUNvdW50GAIgAyoBMTI9VGhlIG51bWJlciBvZiBieXRlcyBwcm9jZXNzZWQgYnkgdGhlIGxvYWQgYmFsYW5jZXIgb3ZlciBJUHY2LjogU2FtcGxlcyBvZiBJUHY2IHByb2NjZXNzZWQgYnl0ZXNCNWF3cy5nb29nbGVhcGlzLmNvbS9BTEIvSVB2NlByb2Nlc3NlZEJ5dGVzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqFAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0lQdjZQcm9jZXNzZWRCeXRlcy9TdW0YAiADKgJCeTI9VGhlIG51bWJlciBvZiBieXRlcyBwcm9jZXNzZWQgYnkgdGhlIGxvYWQgYmFsYW5jZXIgb3ZlciBJUHY2LjocU3VtIG9mIElQdjYgcHJvY2Nlc3NlZCBieXRlc0ItYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9JUHY2UHJvY2Vzc2VkQnl0ZXMvU3VtUgsIBBICCDwaAwiwCQqNAwpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0lQdjZSZXF1ZXN0Q291bnQvU2FtcGxlQ291bnQSQgoQQXZhaWxhYmlsaXR5Wm9uZRouVGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSBmb3IgdGhlIG1ldHJpYyBkYXRhLhI4CgtUYXJnZXRHcm91cBopVGhlIEFXUyBUYXJnZXQgR3JvdXAgZm9yIHRoZSBtZXRyaWMgZGF0YS4YAiADKgExMkBUaGUgbnVtYmVyIG9mIHJlcXVlc3RzIHByb2Nlc3NlZCBieSB0aGUgbG9hZCBiYWxhbmNlciBvdmVyIElQdjYuOhhTYW1wbGVzIG9mIElQdjYgcmVxdWVzdHNCM2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvSVB2NlJlcXVlc3RDb3VudC9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkK+QIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9JUHY2UmVxdWVzdENvdW50L1N1bRJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgCIAMqATEyQFRoZSBudW1iZXIgb2YgcmVxdWVzdHMgcHJvY2Vzc2VkIGJ5IHRoZSBsb2FkIGJhbGFuY2VyIG92ZXIgSVB2Ni46FFN1bSBvZiBJUHY2IHJlcXVlc3RzQithd3MuZ29vZ2xlYXBpcy5jb20vQUxCL0lQdjZSZXF1ZXN0Q291bnQvU3VtUgsIBBICCDwaAwiwCQr/AQpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL05ld0Nvbm5lY3Rpb25Db3VudC9TYW1wbGVDb3VudBgCIAMqATEyKlRoZSBudW1iZXIgb2YgVENQIGNvbm5lY3Rpb25zIGVzdGFibGlzaGVkLjoaU2FtcGxlcyBvZiBUQ1AgY29ubmVjdGlvbnNCNWF3cy5nb29nbGVhcGlzLmNvbS9BTEIvTmV3Q29ubmVjdGlvbkNvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrrAQpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL05ld0Nvbm5lY3Rpb25Db3VudC9TdW0YAiADKgExMipUaGUgbnVtYmVyIG9mIFRDUCBjb25uZWN0aW9ucyBlc3RhYmxpc2hlZC46FlN1bSBvZiBUQ1AgY29ubmVjdGlvbnNCLWF3cy5nb29nbGVhcGlzLmNvbS9BTEIvTmV3Q29ubmVjdGlvbkNvdW50L1N1bVILCAQSAgg8GgMIsAkK6wEKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9Qcm9jZXNzZWRCeXRlcy9TYW1wbGVDb3VudBgCIAMqATEyHlRoZSBudW1iZXIgb2YgYnl0ZXMgcHJvY2Vzc2VkLjoaU2FtcGxlcyBvZiBieXRlcyBwcm9jZXNzZWRCMWF3cy5nb29nbGVhcGlzLmNvbS9BTEIvUHJvY2Vzc2VkQnl0ZXMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCtgBCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvUHJvY2Vzc2VkQnl0ZXMvU3VtGAIgAyoCQnkyHlRoZSBudW1iZXIgb2YgYnl0ZXMgcHJvY2Vzc2VkLjoWU3VtIG9mIGJ5dGVzIHByb2Nlc3NlZEIpYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9Qcm9jZXNzZWRCeXRlcy9TdW1SCwgEEgIIPBoDCLAJCuACCm9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvUmVqZWN0ZWRDb25uZWN0aW9uQ291bnQvU2FtcGxlQ291bnQSQgoQQXZhaWxhYmlsaXR5Wm9uZRouVGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSBmb3IgdGhlIG1ldHJpYyBkYXRhLhgCIAMqATEyOFRoZSBudW1iZXIgb2YgY29ubmVjdGlvbnMgcmVqZWN0ZWQgYnkgdGhlIGxvYWQgYmFsYW5jZXIuOh9TYW1wbGVzIG9mIHJlamVjdGVkIGNvbm5lY3Rpb25zQjphd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1JlamVjdGVkQ29ubmVjdGlvbkNvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrMAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1JlamVjdGVkQ29ubmVjdGlvbkNvdW50L1N1bRJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuGAIgAyoBMTI4VGhlIG51bWJlciBvZiBjb25uZWN0aW9ucyByZWplY3RlZCBieSB0aGUgbG9hZCBiYWxhbmNlci46G1N1bSBvZiByZWplY3RlZCBjb25uZWN0aW9uc0IyYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9SZWplY3RlZENvbm5lY3Rpb25Db3VudC9TdW1SCwgEEgIIPBoDCLAJCuYCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvUmVxdWVzdENvdW50L1NhbXBsZUNvdW50EkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4SOAoLVGFyZ2V0R3JvdXAaKVRoZSBBV1MgVGFyZ2V0IEdyb3VwIGZvciB0aGUgbWV0cmljIGRhdGEuGAIgAyoBMTIdVGhlIG51bWJlciByZWNlaXZlZCByZXF1ZXN0cy46HFNhbXBsZXMgb2YgcmVjZWl2ZWQgcmVxdWVzdHNCL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvUmVxdWVzdENvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrSAgpccHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1JlcXVlc3RDb3VudC9TdW0SQgoQQXZhaWxhYmlsaXR5Wm9uZRouVGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSBmb3IgdGhlIG1ldHJpYyBkYXRhLhI4CgtUYXJnZXRHcm91cBopVGhlIEFXUyBUYXJnZXQgR3JvdXAgZm9yIHRoZSBtZXRyaWMgZGF0YS4YAiADKgExMh1UaGUgbnVtYmVyIHJlY2VpdmVkIHJlcXVlc3RzLjoYU3VtIG9mIHJlY2VpdmVkIHJlcXVlc3RzQidhd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1JlcXVlc3RDb3VudC9TdW1SCwgEEgIIPBoDCLAJCosCCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvUnVsZUV2YWx1YXRpb25zL1NhbXBsZUNvdW50GAIgAyoBMTI7VGhlIG51bWJlciBvZiBydWxlcyBldmFsdWF0ZWQgZ2l2ZW4gYW4gaG91cmx5IHJlcXVlc3QgcmF0ZS46G1NhbXBsZXMgb2YgcnVsZSBldmFsdWF0aW9uc0IyYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9SdWxlRXZhbHVhdGlvbnMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCvcBCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvUnVsZUV2YWx1YXRpb25zL1N1bRgCIAMqATEyO1RoZSBudW1iZXIgb2YgcnVsZXMgZXZhbHVhdGVkIGdpdmVuIGFuIGhvdXJseSByZXF1ZXN0IHJhdGUuOhdTdW0gb2YgcnVsZSBldmFsdWF0aW9uc0IqYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9SdWxlRXZhbHVhdGlvbnMvU3VtUgsIBBICCDwaAwiwCQqJAwpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1RhcmdldENvbm5lY3Rpb25FcnJvckNvdW50L1NhbXBsZUNvdW50EkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4SOAoLVGFyZ2V0R3JvdXAaKVRoZSBBV1MgVGFyZ2V0IEdyb3VwIGZvciB0aGUgbWV0cmljIGRhdGEuGAIgAyoBMTIkVGhlIG51bWJlciB1bnN1Y2Nlc3NmdWwgY29ubmVjdGlvbnMuOhxTYW1wbGVzIG9mIGNvbm5lY3Rpb24gZXJyb3JzQj1hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1RhcmdldENvbm5lY3Rpb25FcnJvckNvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQr1AgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1RhcmdldENvbm5lY3Rpb25FcnJvckNvdW50L1N1bRJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgCIAMqATEyJFRoZSBudW1iZXIgdW5zdWNjZXNzZnVsIGNvbm5lY3Rpb25zLjoYU3VtIG9mIGNvbm5lY3Rpb24gZXJyb3JzQjVhd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1RhcmdldENvbm5lY3Rpb25FcnJvckNvdW50L1N1bVILCAQSAgg8GgMIsAkKtwMKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9UYXJnZXRSZXNwb25zZVRpbWUvQXZlcmFnZRJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgBIAMqAXMyZ1RoZSB0aW1lIGJldHdlZW4gdGhlIHJlcXVlc3QgbGVhdmluZyB0aGUgbG9hZCBiYWxhbmNlciBhbmQgdGhlIHJlc3BvbnNlIGJlaW5nIHJlY2VpdmVkIGZyb20gdGhlIHRhcmdldC46H0F2ZXJhZ2Ugb2YgdGFyZ2V0IHJlc3BvbnNlIHRpbWVCMWF3cy5nb29nbGVhcGlzLmNvbS9BTEIvVGFyZ2V0UmVzcG9uc2VUaW1lL0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCr8DCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvVGFyZ2V0UmVzcG9uc2VUaW1lL1NhbXBsZUNvdW50EkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4SOAoLVGFyZ2V0R3JvdXAaKVRoZSBBV1MgVGFyZ2V0IEdyb3VwIGZvciB0aGUgbWV0cmljIGRhdGEuGAIgAyoBMTJnVGhlIHRpbWUgYmV0d2VlbiB0aGUgcmVxdWVzdCBsZWF2aW5nIHRoZSBsb2FkIGJhbGFuY2VyIGFuZCB0aGUgcmVzcG9uc2UgYmVpbmcgcmVjZWl2ZWQgZnJvbSB0aGUgdGFyZ2V0LjofU2FtcGxlcyBvZiB0YXJnZXQgcmVzcG9uc2UgdGltZUI1YXdzLmdvb2dsZWFwaXMuY29tL0FMQi9UYXJnZXRSZXNwb25zZVRpbWUvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCtoDCnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvVGFyZ2V0VExTTmVnb3RpYXRpb25FcnJvckNvdW50L1NhbXBsZUNvdW50EkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4SOAoLVGFyZ2V0R3JvdXAaKVRoZSBBV1MgVGFyZ2V0IEdyb3VwIGZvciB0aGUgbWV0cmljIGRhdGEuGAIgAyoBMTJuVGhlIG51bWJlciBvZiBUTFMgY29ubmVjdGlvbnMgaW5pdGlhdGVkIGJ5IHRoZSBsb2FkIGJhbGFuY2VyIHRoYXQgZGlkIG5vdCBlc3RhYmxpc2ggYSBzZXNzaW9uIHdpdGggdGhlIHRhcmdldC46G1NhbXBsZXMgb2YgdGFyZ2UgVExTIGVycm9yc0JBYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9UYXJnZXRUTFNOZWdvdGlhdGlvbkVycm9yQ291bnQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCsYDCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvVGFyZ2V0VExTTmVnb3RpYXRpb25FcnJvckNvdW50L1N1bRJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgCIAMqATEyblRoZSBudW1iZXIgb2YgVExTIGNvbm5lY3Rpb25zIGluaXRpYXRlZCBieSB0aGUgbG9hZCBiYWxhbmNlciB0aGF0IGRpZCBub3QgZXN0YWJsaXNoIGEgc2Vzc2lvbiB3aXRoIHRoZSB0YXJnZXQuOhdTdW0gb2YgdGFyZ2UgVExTIGVycm9yc0I5YXdzLmdvb2dsZWFwaXMuY29tL0FMQi9UYXJnZXRUTFNOZWdvdGlhdGlvbkVycm9yQ291bnQvU3VtUgsIBBICCDwaAwiwCQrtAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1VuSGVhbHRoeUhvc3RDb3VudC9BdmVyYWdlEkIKEEF2YWlsYWJpbGl0eVpvbmUaLlRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgZm9yIHRoZSBtZXRyaWMgZGF0YS4SOAoLVGFyZ2V0R3JvdXAaKVRoZSBBV1MgVGFyZ2V0IEdyb3VwIGZvciB0aGUgbWV0cmljIGRhdGEuGAEgAyoBMTIgVGhlIG51bWJlciBvZiB1bmhlYWx0aHkgdGFyZ2V0cy46HEF2ZXJhZ2Ugb2YgdW5oZWFsdGh5IHRhcmdldHNCMWF3cy5nb29nbGVhcGlzLmNvbS9BTEIvVW5IZWFsdGh5SG9zdENvdW50L0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCu0CCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9BTEIvVW5IZWFsdGh5SG9zdENvdW50L01heGltdW0SQgoQQXZhaWxhYmlsaXR5Wm9uZRouVGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSBmb3IgdGhlIG1ldHJpYyBkYXRhLhI4CgtUYXJnZXRHcm91cBopVGhlIEFXUyBUYXJnZXQgR3JvdXAgZm9yIHRoZSBtZXRyaWMgZGF0YS4YASADKgExMiBUaGUgbnVtYmVyIG9mIHVuaGVhbHRoeSB0YXJnZXRzLjocTWF4aW11bSBvZiB1bmhlYWx0aHkgdGFyZ2V0c0IxYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9VbkhlYWx0aHlIb3N0Q291bnQvTWF4aW11bVILCAQSAgg8GgMIsAkK7QIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0FMQi9VbkhlYWx0aHlIb3N0Q291bnQvTWluaW11bRJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgBIAMqATEyIFRoZSBudW1iZXIgb2YgdW5oZWFsdGh5IHRhcmdldHMuOhxNaW5pbXVtIG9mIHVuaGVhbHRoeSB0YXJnZXRzQjFhd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1VuSGVhbHRoeUhvc3RDb3VudC9NaW5pbXVtUgsIBBICCDwaAwiwCQr1AgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1VuSGVhbHRoeUhvc3RDb3VudC9TYW1wbGVDb3VudBJCChBBdmFpbGFiaWxpdHlab25lGi5UaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIGZvciB0aGUgbWV0cmljIGRhdGEuEjgKC1RhcmdldEdyb3VwGilUaGUgQVdTIFRhcmdldCBHcm91cCBmb3IgdGhlIG1ldHJpYyBkYXRhLhgCIAMqATEyIFRoZSBudW1iZXIgb2YgdW5oZWFsdGh5IHRhcmdldHMuOhxTYW1wbGVzIG9mIHVuaGVhbHRoeSB0YXJnZXRzQjVhd3MuZ29vZ2xlYXBpcy5jb20vQUxCL1VuSGVhbHRoeUhvc3RDb3VudC9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkK/AEKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvNHh4RXJyb3JSYXRlL0F2ZXJhZ2UYASADKgElMjFUaGUgcGVyY2VudCBvZiByZXF1ZXN0cyB0aGF0IGdlbmVyYXRlIGEgNHh4IGVycm9yOhZBdmVyYWdlIDR4eCBlcnJvciByYXRlQjJhd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC80eHhFcnJvclJhdGUvQXZlcmFnZVILCAQSAgg8GgMIsAkK/AEKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvNHh4RXJyb3JSYXRlL01heGltdW0YASADKgElMjFUaGUgcGVyY2VudCBvZiByZXF1ZXN0cyB0aGF0IGdlbmVyYXRlIGEgNHh4IGVycm9yOhZNYXhpbXVtIDR4eCBlcnJvciByYXRlQjJhd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC80eHhFcnJvclJhdGUvTWF4aW11bVILCAQSAgg8GgMIsAkK/AEKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvNHh4RXJyb3JSYXRlL01pbmltdW0YASADKgElMjFUaGUgcGVyY2VudCBvZiByZXF1ZXN0cyB0aGF0IGdlbmVyYXRlIGEgNHh4IGVycm9yOhZNaW5pbXVtIDR4eCBlcnJvciByYXRlQjJhd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC80eHhFcnJvclJhdGUvTWluaW11bVILCAQSAgg8GgMIsAkKhwIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvNHh4RXJyb3JSYXRlL1NhbXBsZUNvdW50GAIgAyoBMTIxVGhlIHBlcmNlbnQgb2YgcmVxdWVzdHMgdGhhdCBnZW5lcmF0ZSBhIDR4eCBlcnJvcjoZU2FtcGxlcyBvZiA0eHggZXJyb3IgcmF0ZUI2YXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvNHh4RXJyb3JSYXRlL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrsAQpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC80eHhFcnJvclJhdGUvU3VtGAIgAyoBJTIxVGhlIHBlcmNlbnQgb2YgcmVxdWVzdHMgdGhhdCBnZW5lcmF0ZSBhIDR4eCBlcnJvcjoONHh4IGVycm9yIHJhdGVCLmF3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250LzR4eEVycm9yUmF0ZS9TdW1SCwgEEgIIPBoDCLAJCvwBCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250LzV4eEVycm9yUmF0ZS9BdmVyYWdlGAEgAyoBJTIxVGhlIHBlcmNlbnQgb2YgcmVxdWVzdHMgdGhhdCBnZW5lcmF0ZSBhIDV4eCBlcnJvcjoWQXZlcmFnZSA1eHggZXJyb3IgcmF0ZUIyYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvNXh4RXJyb3JSYXRlL0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCvwBCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250LzV4eEVycm9yUmF0ZS9NYXhpbXVtGAEgAyoBJTIxVGhlIHBlcmNlbnQgb2YgcmVxdWVzdHMgdGhhdCBnZW5lcmF0ZSBhIDV4eCBlcnJvcjoWTWF4aW11bSA1eHggZXJyb3IgcmF0ZUIyYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvNXh4RXJyb3JSYXRlL01heGltdW1SCwgEEgIIPBoDCLAJCvwBCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250LzV4eEVycm9yUmF0ZS9NaW5pbXVtGAEgAyoBJTIxVGhlIHBlcmNlbnQgb2YgcmVxdWVzdHMgdGhhdCBnZW5lcmF0ZSBhIDV4eCBlcnJvcjoWTWluaW11bSA1eHggZXJyb3IgcmF0ZUIyYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvNXh4RXJyb3JSYXRlL01pbmltdW1SCwgEEgIIPBoDCLAJCocCCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250LzV4eEVycm9yUmF0ZS9TYW1wbGVDb3VudBgCIAMqATEyMVRoZSBwZXJjZW50IG9mIHJlcXVlc3RzIHRoYXQgZ2VuZXJhdGUgYSA1eHggZXJyb3I6GVNhbXBsZXMgb2YgNXh4IGVycm9yIHJhdGVCNmF3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250LzV4eEVycm9yUmF0ZS9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkK7AEKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvNXh4RXJyb3JSYXRlL1N1bRgCIAMqASUyMVRoZSBwZXJjZW50IG9mIHJlcXVlc3RzIHRoYXQgZ2VuZXJhdGUgYSA1eHggZXJyb3I6DjV4eCBlcnJvciByYXRlQi5hd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC81eHhFcnJvclJhdGUvU3VtUgsIBBICCDwaAwiwCQqPAgpucHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC9CeXRlc0Rvd25sb2FkZWQvU2FtcGxlQ291bnQYAiADKgExMjFCeXRlcyBkb3dubG9hZCBmb3IgR0VULCBIRUFEIGFuZCBPUFRJT05TIHJlcXVlc3RzOhtTYW1wbGVzIG9mIGRvd25sb2FkZWQgYnl0ZXNCOWF3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250L0J5dGVzRG93bmxvYWRlZC9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkK9QEKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvQnl0ZXNEb3dubG9hZGVkL1N1bRgCIAMqAkJ5MjFCeXRlcyBkb3dubG9hZCBmb3IgR0VULCBIRUFEIGFuZCBPUFRJT05TIHJlcXVlc3RzOhBEb3dubG9hZGVkIGJ5dGVzQjFhd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC9CeXRlc0Rvd25sb2FkZWQvU3VtUgsIBBICCDwaAwiwCQqBAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC9CeXRlc1VwbG9hZGVkL1NhbXBsZUNvdW50GAIgAyoBMTIpQnl0ZXMgdXBsb2FkZWQgd2l0aCBQT1NUIGFuZCBQVVQgcmVxdWVzdHM6GVNhbXBsZXMgb2YgdXBsb2FkZWQgYnl0ZXNCN2F3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250L0J5dGVzVXBsb2FkZWQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCucBCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250L0J5dGVzVXBsb2FkZWQvU3VtGAIgAyoCQnkyKUJ5dGVzIHVwbG9hZGVkIHdpdGggUE9TVCBhbmQgUFVUIHJlcXVlc3RzOg5VcGxvYWRlZCBieXRlc0IvYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvQnl0ZXNVcGxvYWRlZC9TdW1SCwgEEgIIPBoDCLAJCo0CCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250L1JlcXVlc3RzL1NhbXBsZUNvdW50GAIgAyoBMTJAVGhlIHRvdGFsIG51bWJlciBvZiByZXF1ZXN0cyBmb3IgSFRUUC9IVFRQUyBhbmQgYWxsIEhUVFAgbWV0aG9kczoYU2FtcGxlcyBvZiByZXF1ZXN0IGNvdW50QjJhd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC9SZXF1ZXN0cy9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkK8gEKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvUmVxdWVzdHMvU3VtGAIgAyoBMTJAVGhlIHRvdGFsIG51bWJlciBvZiByZXF1ZXN0cyBmb3IgSFRUUC9IVFRQUyBhbmQgYWxsIEhUVFAgbWV0aG9kczoNUmVxdWVzdCBjb3VudEIqYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvUmVxdWVzdHMvU3VtUgsIBBICCDwaAwiwCQqKAgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC9Ub3RhbEVycm9yUmF0ZS9BdmVyYWdlGAEgAyoBJTI/VGhlIHBlcmNlbnQgb2YgcmVxdWVzdHMgdGhhdCBnZW5lcmF0ZSBlaXRoZXIgYSA0eHggb3IgNXh4IGVycm9yOhJBdmVyYWdlIGVycm9yIHJhdGVCNGF3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250L1RvdGFsRXJyb3JSYXRlL0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCooCCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9DbG91ZEZyb250L1RvdGFsRXJyb3JSYXRlL01heGltdW0YASADKgElMj9UaGUgcGVyY2VudCBvZiByZXF1ZXN0cyB0aGF0IGdlbmVyYXRlIGVpdGhlciBhIDR4eCBvciA1eHggZXJyb3I6Ek1heGltdW0gZXJyb3IgcmF0ZUI0YXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvVG90YWxFcnJvclJhdGUvTWF4aW11bVILCAQSAgg8GgMIsAkKigIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvVG90YWxFcnJvclJhdGUvTWluaW11bRgBIAMqASUyP1RoZSBwZXJjZW50IG9mIHJlcXVlc3RzIHRoYXQgZ2VuZXJhdGUgZWl0aGVyIGEgNHh4IG9yIDV4eCBlcnJvcjoSTWluaW11bSBlcnJvciByYXRlQjRhd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC9Ub3RhbEVycm9yUmF0ZS9NaW5pbXVtUgsIBBICCDwaAwiwCQqVAgptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC9Ub3RhbEVycm9yUmF0ZS9TYW1wbGVDb3VudBgCIAMqATEyP1RoZSBwZXJjZW50IG9mIHJlcXVlc3RzIHRoYXQgZ2VuZXJhdGUgZWl0aGVyIGEgNHh4IG9yIDV4eCBlcnJvcjoVU2FtcGxlcyBvZiBlcnJvciByYXRlQjhhd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC9Ub3RhbEVycm9yUmF0ZS9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkK+gEKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0Nsb3VkRnJvbnQvVG90YWxFcnJvclJhdGUvU3VtGAIgAyoBJTI/VGhlIHBlcmNlbnQgb2YgcmVxdWVzdHMgdGhhdCBnZW5lcmF0ZSBlaXRoZXIgYSA0eHggb3IgNXh4IGVycm9yOgpFcnJvciByYXRlQjBhd3MuZ29vZ2xlYXBpcy5jb20vQ2xvdWRGcm9udC9Ub3RhbEVycm9yUmF0ZS9TdW1SCwgEEgIIPBoDCLAJCqgCCntwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Db25kaXRpb25hbENoZWNrRmFpbGVkUmVxdWVzdHMvU2FtcGxlQ291bnQYAiADKgExMidDb3VudCBvZiB1bnN1Y2Nlc2Z1bCBjb25kaXRpb25hbCB3cml0ZXM6JFNhbXBsZXMgb2YgZmFpbGVkIGNvbmRpdGlvbmFsIHdyaXRlc0JGYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL0NvbmRpdGlvbmFsQ2hlY2tGYWlsZWRSZXF1ZXN0cy9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKjQIKc3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL0NvbmRpdGlvbmFsQ2hlY2tGYWlsZWRSZXF1ZXN0cy9TdW0YAiADKgExMidDb3VudCBvZiB1bnN1Y2Nlc2Z1bCBjb25kaXRpb25hbCB3cml0ZXM6GUZhaWxlZCBjb25kaXRpb25hbCB3cml0ZXNCPmF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Db25kaXRpb25hbENoZWNrRmFpbGVkUmVxdWVzdHMvU3VtUgsIBBICCDwaAwjYBAq4AgpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvQ29uc3VtZWRSZWFkQ2FwYWNpdHlVbml0cy9BdmVyYWdlEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAEgAyoBMTIWQ29uc3VtZWQgcmVhZCBjYXBhY2l0eToeQXZlcmFnZSBjb25zdW1lZCByZWFkIGNhcGFjaXR5Qj1hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvQ29uc3VtZWRSZWFkQ2FwYWNpdHlVbml0cy9BdmVyYWdlUgsIBBICCDwaAwjYBAq4AgpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvQ29uc3VtZWRSZWFkQ2FwYWNpdHlVbml0cy9NYXhpbXVtEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAEgAyoBMTIWQ29uc3VtZWQgcmVhZCBjYXBhY2l0eToeTWF4aW11bSBjb25zdW1lZCByZWFkIGNhcGFjaXR5Qj1hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvQ29uc3VtZWRSZWFkQ2FwYWNpdHlVbml0cy9NYXhpbXVtUgsIBBICCDwaAwjYBAq4AgpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvQ29uc3VtZWRSZWFkQ2FwYWNpdHlVbml0cy9NaW5pbXVtEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAEgAyoBMTIWQ29uc3VtZWQgcmVhZCBjYXBhY2l0eToeTWluaW11bSBjb25zdW1lZCByZWFkIGNhcGFjaXR5Qj1hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvQ29uc3VtZWRSZWFkQ2FwYWNpdHlVbml0cy9NaW5pbXVtUgsIBBICCDwaAwjYBArDAgp2cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvQ29uc3VtZWRSZWFkQ2FwYWNpdHlVbml0cy9TYW1wbGVDb3VudBI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgCIAMqATEyFkNvbnN1bWVkIHJlYWQgY2FwYWNpdHk6IVNhbXBsZXMgb2YgY29uc3VtZWQgcmVhZCBjYXBhY2l0eUJBYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL0NvbnN1bWVkUmVhZENhcGFjaXR5VW5pdHMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECqgCCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Db25zdW1lZFJlYWRDYXBhY2l0eVVuaXRzL1N1bRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgCIAMqATEyFkNvbnN1bWVkIHJlYWQgY2FwYWNpdHk6FkNvbnN1bWVkIHJlYWQgY2FwYWNpdHlCOWF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Db25zdW1lZFJlYWRDYXBhY2l0eVVuaXRzL1N1bVILCAQSAgg8GgMI2AQKvAIKc3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL0NvbnN1bWVkV3JpdGVDYXBhY2l0eVVuaXRzL0F2ZXJhZ2USNwoYR2xvYmFsU2Vjb25kYXJ5SW5kZXhOYW1lGhtOYW1lIG9mIHRoZSBzZWNvbmRhcnkgaW5kZXgYASADKgExMhdDb25zdW1lZCB3cml0ZSBjYXBhY2l0eTofQXZlcmFnZSBjb25zdW1lZCB3cml0ZSBjYXBhY2l0eUI+YXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL0NvbnN1bWVkV3JpdGVDYXBhY2l0eVVuaXRzL0F2ZXJhZ2VSCwgEEgIIPBoDCNgECrwCCnNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Db25zdW1lZFdyaXRlQ2FwYWNpdHlVbml0cy9NYXhpbXVtEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAEgAyoBMTIXQ29uc3VtZWQgd3JpdGUgY2FwYWNpdHk6H01heGltdW0gY29uc3VtZWQgd3JpdGUgY2FwYWNpdHlCPmF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Db25zdW1lZFdyaXRlQ2FwYWNpdHlVbml0cy9NYXhpbXVtUgsIBBICCDwaAwjYBAq8AgpzcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvQ29uc3VtZWRXcml0ZUNhcGFjaXR5VW5pdHMvTWluaW11bRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgBIAMqATEyF0NvbnN1bWVkIHdyaXRlIGNhcGFjaXR5Oh9NaW5pbXVtIGNvbnN1bWVkIHdyaXRlIGNhcGFjaXR5Qj5hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvQ29uc3VtZWRXcml0ZUNhcGFjaXR5VW5pdHMvTWluaW11bVILCAQSAgg8GgMI2AQKxwIKd3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL0NvbnN1bWVkV3JpdGVDYXBhY2l0eVVuaXRzL1NhbXBsZUNvdW50EjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAIgAyoBMTIXQ29uc3VtZWQgd3JpdGUgY2FwYWNpdHk6IlNhbXBsZXMgb2YgY29uc3VtZWQgd3JpdGUgY2FwYWNpdHlCQmF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Db25zdW1lZFdyaXRlQ2FwYWNpdHlVbml0cy9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKrAIKb3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL0NvbnN1bWVkV3JpdGVDYXBhY2l0eVVuaXRzL1N1bRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgCIAMqATEyF0NvbnN1bWVkIHdyaXRlIGNhcGFjaXR5OhdDb25zdW1lZCB3cml0ZSBjYXBhY2l0eUI6YXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL0NvbnN1bWVkV3JpdGVDYXBhY2l0eVVuaXRzL1N1bVILCAQSAgg8GgMI2AQK8AIKeXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL09ubGluZUluZGV4Q29uc3VtZWRXcml0ZUNhcGFjaXR5L0F2ZXJhZ2USNwoYR2xvYmFsU2Vjb25kYXJ5SW5kZXhOYW1lGhtOYW1lIG9mIHRoZSBzZWNvbmRhcnkgaW5kZXgYASADKgExMi5Db25zdW1lZCBnbG9iYWwgc2Vjb25kYXJ5IGluZGV4IHdyaXRlIGNhcGFjaXR5Oi9BdmVyYWdlIGNvbnN1bWVkIHNlY29uZGFyeSBpbmRleCB3cml0ZSBjYXBhY2l0eUJEYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL09ubGluZUluZGV4Q29uc3VtZWRXcml0ZUNhcGFjaXR5L0F2ZXJhZ2VSDAgEEgMIrAIaAwjYBArwAgp5cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvT25saW5lSW5kZXhDb25zdW1lZFdyaXRlQ2FwYWNpdHkvTWF4aW11bRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgBIAMqATEyLkNvbnN1bWVkIGdsb2JhbCBzZWNvbmRhcnkgaW5kZXggd3JpdGUgY2FwYWNpdHk6L01heGltdW0gY29uc3VtZWQgc2Vjb25kYXJ5IGluZGV4IHdyaXRlIGNhcGFjaXR5QkRhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvT25saW5lSW5kZXhDb25zdW1lZFdyaXRlQ2FwYWNpdHkvTWF4aW11bVIMCAQSAwisAhoDCNgECvACCnlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleENvbnN1bWVkV3JpdGVDYXBhY2l0eS9NaW5pbXVtEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAEgAyoBMTIuQ29uc3VtZWQgZ2xvYmFsIHNlY29uZGFyeSBpbmRleCB3cml0ZSBjYXBhY2l0eTovTWluaW11bSBjb25zdW1lZCBzZWNvbmRhcnkgaW5kZXggd3JpdGUgY2FwYWNpdHlCRGF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleENvbnN1bWVkV3JpdGVDYXBhY2l0eS9NaW5pbXVtUgwIBBIDCKwCGgMI2AQK+wIKfXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL09ubGluZUluZGV4Q29uc3VtZWRXcml0ZUNhcGFjaXR5L1NhbXBsZUNvdW50EjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAIgAyoBMTIuQ29uc3VtZWQgZ2xvYmFsIHNlY29uZGFyeSBpbmRleCB3cml0ZSBjYXBhY2l0eToyU2FtcGxlcyBvZiBjb25zdW1lZCBzZWNvbmRhcnkgaW5kZXggd3JpdGUgY2FwYWNpdHlCSGF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleENvbnN1bWVkV3JpdGVDYXBhY2l0eS9TYW1wbGVDb3VudFIMCAQSAwisAhoDCNgECuACCnVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleENvbnN1bWVkV3JpdGVDYXBhY2l0eS9TdW0SNwoYR2xvYmFsU2Vjb25kYXJ5SW5kZXhOYW1lGhtOYW1lIG9mIHRoZSBzZWNvbmRhcnkgaW5kZXgYAiADKgExMi5Db25zdW1lZCBnbG9iYWwgc2Vjb25kYXJ5IGluZGV4IHdyaXRlIGNhcGFjaXR5OidDb25zdW1lZCBzZWNvbmRhcnkgaW5kZXggd3JpdGUgY2FwYWNpdHlCQGF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleENvbnN1bWVkV3JpdGVDYXBhY2l0eS9TdW1SDAgEEgMIrAIaAwjYBArMAgp2cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvT25saW5lSW5kZXhQZXJjZW50YWdlUHJvZ3Jlc3MvQXZlcmFnZRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgBIAMqASUyH0dsb2JhbCBTZWNvbmRhcnkgSW5kZXggcHJvZ3Jlc3M6IEF2ZXJhZ2Ugc2Vjb25kYXJ5IGluZGV4IHByb2dyZXNzQkFhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvT25saW5lSW5kZXhQZXJjZW50YWdlUHJvZ3Jlc3MvQXZlcmFnZVIMCAQSAwisAhoDCNgECswCCnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleFBlcmNlbnRhZ2VQcm9ncmVzcy9NYXhpbXVtEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAEgAyoBJTIfR2xvYmFsIFNlY29uZGFyeSBJbmRleCBwcm9ncmVzczogTWF4aW11bSBzZWNvbmRhcnkgaW5kZXggcHJvZ3Jlc3NCQWF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleFBlcmNlbnRhZ2VQcm9ncmVzcy9NYXhpbXVtUgwIBBIDCKwCGgMI2AQKzAIKdnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL09ubGluZUluZGV4UGVyY2VudGFnZVByb2dyZXNzL01pbmltdW0SNwoYR2xvYmFsU2Vjb25kYXJ5SW5kZXhOYW1lGhtOYW1lIG9mIHRoZSBzZWNvbmRhcnkgaW5kZXgYASADKgElMh9HbG9iYWwgU2Vjb25kYXJ5IEluZGV4IHByb2dyZXNzOiBNaW5pbXVtIHNlY29uZGFyeSBpbmRleCBwcm9ncmVzc0JBYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL09ubGluZUluZGV4UGVyY2VudGFnZVByb2dyZXNzL01pbmltdW1SDAgEEgMIrAIaAwjYBArXAgp6cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvT25saW5lSW5kZXhQZXJjZW50YWdlUHJvZ3Jlc3MvU2FtcGxlQ291bnQSNwoYR2xvYmFsU2Vjb25kYXJ5SW5kZXhOYW1lGhtOYW1lIG9mIHRoZSBzZWNvbmRhcnkgaW5kZXgYAiADKgExMh9HbG9iYWwgU2Vjb25kYXJ5IEluZGV4IHByb2dyZXNzOiNTYW1wbGVzIG9mIHNlY29uZGFyeSBpbmRleCBwcm9ncmVzc0JFYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL09ubGluZUluZGV4UGVyY2VudGFnZVByb2dyZXNzL1NhbXBsZUNvdW50UgwIBBIDCKwCGgMI2AQKvAIKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL09ubGluZUluZGV4UGVyY2VudGFnZVByb2dyZXNzL1N1bRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgCIAMqASUyH0dsb2JhbCBTZWNvbmRhcnkgSW5kZXggcHJvZ3Jlc3M6GFNlY29uZGFyeSBpbmRleCBwcm9ncmVzc0I9YXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL09ubGluZUluZGV4UGVyY2VudGFnZVByb2dyZXNzL1N1bVIMCAQSAwisAhoDCNgECtQCCnJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleFRocm90dGxlRXZlbnRzL0F2ZXJhZ2USNwoYR2xvYmFsU2Vjb25kYXJ5SW5kZXhOYW1lGhtOYW1lIG9mIHRoZSBzZWNvbmRhcnkgaW5kZXgYASADKgExMidHbG9iYWwgU2Vjb25kYXJ5IEluZGV4IHdyaXRlcyB0aHJvdHRsZWQ6KEF2ZXJhZ2Ugc2Vjb25kYXJ5IGluZGV4IHdyaXRlcyB0aHJvdHRsZWRCPWF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleFRocm90dGxlRXZlbnRzL0F2ZXJhZ2VSDAgEEgMIrAIaAwjYBArUAgpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvT25saW5lSW5kZXhUaHJvdHRsZUV2ZW50cy9NYXhpbXVtEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAEgAyoBMTInR2xvYmFsIFNlY29uZGFyeSBJbmRleCB3cml0ZXMgdGhyb3R0bGVkOihNYXhpbXVtIHNlY29uZGFyeSBpbmRleCB3cml0ZXMgdGhyb3R0bGVkQj1hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvT25saW5lSW5kZXhUaHJvdHRsZUV2ZW50cy9NYXhpbXVtUgwIBBIDCKwCGgMI2AQK1AIKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL09ubGluZUluZGV4VGhyb3R0bGVFdmVudHMvTWluaW11bRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgBIAMqATEyJ0dsb2JhbCBTZWNvbmRhcnkgSW5kZXggd3JpdGVzIHRocm90dGxlZDooTWluaW11bSBzZWNvbmRhcnkgaW5kZXggd3JpdGVzIHRocm90dGxlZEI9YXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL09ubGluZUluZGV4VGhyb3R0bGVFdmVudHMvTWluaW11bVIMCAQSAwisAhoDCNgECt8CCnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleFRocm90dGxlRXZlbnRzL1NhbXBsZUNvdW50EjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAIgAyoBMTInR2xvYmFsIFNlY29uZGFyeSBJbmRleCB3cml0ZXMgdGhyb3R0bGVkOitTYW1wbGVzIG9mIHNlY29uZGFyeSBpbmRleCB3cml0ZXMgdGhyb3R0bGVkQkFhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvT25saW5lSW5kZXhUaHJvdHRsZUV2ZW50cy9TYW1wbGVDb3VudFIMCAQSAwisAhoDCNgECsQCCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleFRocm90dGxlRXZlbnRzL1N1bRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgCIAMqATEyJ0dsb2JhbCBTZWNvbmRhcnkgSW5kZXggd3JpdGVzIHRocm90dGxlZDogU2Vjb25kYXJ5IGluZGV4IHdyaXRlcyB0aHJvdHRsZWRCOWF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9PbmxpbmVJbmRleFRocm90dGxlRXZlbnRzL1N1bVIMCAQSAwisAhoDCNgECrkCCnVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Qcm92aXNpb25lZFJlYWRDYXBhY2l0eVVuaXRzL0F2ZXJhZ2USNwoYR2xvYmFsU2Vjb25kYXJ5SW5kZXhOYW1lGhtOYW1lIG9mIHRoZSBzZWNvbmRhcnkgaW5kZXgYASADKgExMhlQcm92aXNpb25lZCByZWFkIGNhcGFjaXR5OhVBdmVyYWdlIHJlYWQgY2FwYWNpdHlCQGF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Qcm92aXNpb25lZFJlYWRDYXBhY2l0eVVuaXRzL0F2ZXJhZ2VSDAgEEgMIrAIaAwjYBAq5Agp1cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvUHJvdmlzaW9uZWRSZWFkQ2FwYWNpdHlVbml0cy9NYXhpbXVtEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAEgAyoBMTIZUHJvdmlzaW9uZWQgcmVhZCBjYXBhY2l0eToVTWF4aW11bSByZWFkIGNhcGFjaXR5QkBhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvUHJvdmlzaW9uZWRSZWFkQ2FwYWNpdHlVbml0cy9NYXhpbXVtUgwIBBIDCKwCGgMI2AQKuQIKdXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1Byb3Zpc2lvbmVkUmVhZENhcGFjaXR5VW5pdHMvTWluaW11bRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgBIAMqATEyGVByb3Zpc2lvbmVkIHJlYWQgY2FwYWNpdHk6FU1pbmltdW0gcmVhZCBjYXBhY2l0eUJAYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1Byb3Zpc2lvbmVkUmVhZENhcGFjaXR5VW5pdHMvTWluaW11bVIMCAQSAwisAhoDCNgECsQCCnlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Qcm92aXNpb25lZFJlYWRDYXBhY2l0eVVuaXRzL1NhbXBsZUNvdW50EjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAIgAyoBMTIZUHJvdmlzaW9uZWQgcmVhZCBjYXBhY2l0eToYU2FtcGxlcyBvZiByZWFkIGNhcGFjaXR5QkRhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvUHJvdmlzaW9uZWRSZWFkQ2FwYWNpdHlVbml0cy9TYW1wbGVDb3VudFIMCAQSAwisAhoDCNgECqkCCnFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Qcm92aXNpb25lZFJlYWRDYXBhY2l0eVVuaXRzL1N1bRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgCIAMqATEyGVByb3Zpc2lvbmVkIHJlYWQgY2FwYWNpdHk6DVJlYWQgY2FwYWNpdHlCPGF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Qcm92aXNpb25lZFJlYWRDYXBhY2l0eVVuaXRzL1N1bVIMCAQSAwisAhoDCNgECr0CCnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Qcm92aXNpb25lZFdyaXRlQ2FwYWNpdHlVbml0cy9BdmVyYWdlEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAEgAyoBMTIaUHJvdmlzaW9uZWQgd3JpdGUgY2FwYWNpdHk6FkF2ZXJhZ2Ugd3JpdGUgY2FwYWNpdHlCQWF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Qcm92aXNpb25lZFdyaXRlQ2FwYWNpdHlVbml0cy9BdmVyYWdlUgwIBBIDCKwCGgMI2AQKvQIKdnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1Byb3Zpc2lvbmVkV3JpdGVDYXBhY2l0eVVuaXRzL01heGltdW0SNwoYR2xvYmFsU2Vjb25kYXJ5SW5kZXhOYW1lGhtOYW1lIG9mIHRoZSBzZWNvbmRhcnkgaW5kZXgYASADKgExMhpQcm92aXNpb25lZCB3cml0ZSBjYXBhY2l0eToWTWF4aW11bSB3cml0ZSBjYXBhY2l0eUJBYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1Byb3Zpc2lvbmVkV3JpdGVDYXBhY2l0eVVuaXRzL01heGltdW1SDAgEEgMIrAIaAwjYBAq9Agp2cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5VW5pdHMvTWluaW11bRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgBIAMqATEyGlByb3Zpc2lvbmVkIHdyaXRlIGNhcGFjaXR5OhZNaW5pbXVtIHdyaXRlIGNhcGFjaXR5QkFhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5VW5pdHMvTWluaW11bVIMCAQSAwisAhoDCNgECsgCCnpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Qcm92aXNpb25lZFdyaXRlQ2FwYWNpdHlVbml0cy9TYW1wbGVDb3VudBI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgCIAMqATEyGlByb3Zpc2lvbmVkIHdyaXRlIGNhcGFjaXR5OhlTYW1wbGVzIG9mIHdyaXRlIGNhcGFjaXR5QkVhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5VW5pdHMvU2FtcGxlQ291bnRSDAgEEgMIrAIaAwjYBAqtAgpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5VW5pdHMvU3VtEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAIgAyoBMTIaUHJvdmlzaW9uZWQgd3JpdGUgY2FwYWNpdHk6DldyaXRlIGNhcGFjaXR5Qj1hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvUHJvdmlzaW9uZWRXcml0ZUNhcGFjaXR5VW5pdHMvU3VtUgwIBBIDCKwCGgMI2AQKsAIKb3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1JlYWRUaHJvdHRsZUV2ZW50cy9TYW1wbGVDb3VudBI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBgCIAMqATEyGENvdW50IG9mIHJlYWRzIHRocm90dGxlZDoaU2FtcGxlcyBvZiByZWFkcyB0aHJvdHRsZWRCOmF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9SZWFkVGhyb3R0bGVFdmVudHMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECpUCCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9SZWFkVGhyb3R0bGVFdmVudHMvU3VtEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAIgAyoBMTIYQ291bnQgb2YgcmVhZHMgdGhyb3R0bGVkOg9SZWFkcyB0aHJvdHRsZWRCMmF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9SZWFkVGhyb3R0bGVFdmVudHMvU3VtUgsIBBICCDwaAwjYBAqcAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvUmV0dXJuZWRJdGVtQ291bnQvQXZlcmFnZRIiCglPcGVyYXRpb24aFU5hbWUgb2YgdGhlIG9wZXJhdGlvbhgBIAMqATEyJFJlY29yZHMgcmV0cmlldmVkIGJ5IFNjYW4vUXVlcnkgY2FsbDoZQXZlcmFnZSByZWNvcmRzIHJldHJpZXZlZEI1YXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1JldHVybmVkSXRlbUNvdW50L0F2ZXJhZ2VSCwgEEgIIPBoDCNgECpwCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9SZXR1cm5lZEl0ZW1Db3VudC9NYXhpbXVtEiIKCU9wZXJhdGlvbhoVTmFtZSBvZiB0aGUgb3BlcmF0aW9uGAEgAyoBMTIkUmVjb3JkcyByZXRyaWV2ZWQgYnkgU2Nhbi9RdWVyeSBjYWxsOhlNYXhpbXVtIHJlY29yZHMgcmV0cmlldmVkQjVhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvUmV0dXJuZWRJdGVtQ291bnQvTWF4aW11bVILCAQSAgg8GgMI2AQKnAIKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1JldHVybmVkSXRlbUNvdW50L01pbmltdW0SIgoJT3BlcmF0aW9uGhVOYW1lIG9mIHRoZSBvcGVyYXRpb24YASADKgExMiRSZWNvcmRzIHJldHJpZXZlZCBieSBTY2FuL1F1ZXJ5IGNhbGw6GU1pbmltdW0gcmVjb3JkcyByZXRyaWV2ZWRCNWF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9SZXR1cm5lZEl0ZW1Db3VudC9NaW5pbXVtUgsIBBICCDwaAwjYBAqnAgpucHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvUmV0dXJuZWRJdGVtQ291bnQvU2FtcGxlQ291bnQSIgoJT3BlcmF0aW9uGhVOYW1lIG9mIHRoZSBvcGVyYXRpb24YAiADKgExMiRSZWNvcmRzIHJldHJpZXZlZCBieSBTY2FuL1F1ZXJ5IGNhbGw6HFNhbXBsZXMgb2YgcmVjb3JkcyByZXRyaWV2ZWRCOWF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9SZXR1cm5lZEl0ZW1Db3VudC9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKjAIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1JldHVybmVkSXRlbUNvdW50L1N1bRIiCglPcGVyYXRpb24aFU5hbWUgb2YgdGhlIG9wZXJhdGlvbhgCIAMqATEyJFJlY29yZHMgcmV0cmlldmVkIGJ5IFNjYW4vUXVlcnkgY2FsbDoRUmVjb3JkcyByZXRyaWV2ZWRCMWF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9SZXR1cm5lZEl0ZW1Db3VudC9TdW1SCwgEEgIIPBoDCNgECssCCnFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9TdWNjZXNzZnVsUmVxdWVzdExhdGVuY3kvQXZlcmFnZRIiCglPcGVyYXRpb24aFU5hbWUgb2YgdGhlIG9wZXJhdGlvbhgBIAMqAm1zMkZUaGUgbnVtYmVyIGFuZCBsYXRlbmN5IG9mIHN1Y2Nlc3NmdWwgcmVxdWVzdHMgaW4gdGhlIGxhc3QgdGltZSBwZXJpb2QuOhdBdmVyYWdlIHJlcXVlc3QgbGF0ZW5jeUI8YXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1N1Y2Nlc3NmdWxSZXF1ZXN0TGF0ZW5jeS9BdmVyYWdlUgsIBBICCDwaAwjYBArLAgpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvU3VjY2Vzc2Z1bFJlcXVlc3RMYXRlbmN5L01heGltdW0SIgoJT3BlcmF0aW9uGhVOYW1lIG9mIHRoZSBvcGVyYXRpb24YASADKgJtczJGVGhlIG51bWJlciBhbmQgbGF0ZW5jeSBvZiBzdWNjZXNzZnVsIHJlcXVlc3RzIGluIHRoZSBsYXN0IHRpbWUgcGVyaW9kLjoXTWF4aW11bSByZXF1ZXN0IGxhdGVuY3lCPGF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9TdWNjZXNzZnVsUmVxdWVzdExhdGVuY3kvTWF4aW11bVILCAQSAgg8GgMI2AQKywIKcXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1N1Y2Nlc3NmdWxSZXF1ZXN0TGF0ZW5jeS9NaW5pbXVtEiIKCU9wZXJhdGlvbhoVTmFtZSBvZiB0aGUgb3BlcmF0aW9uGAEgAyoCbXMyRlRoZSBudW1iZXIgYW5kIGxhdGVuY3kgb2Ygc3VjY2Vzc2Z1bCByZXF1ZXN0cyBpbiB0aGUgbGFzdCB0aW1lIHBlcmlvZC46F01pbmltdW0gcmVxdWVzdCBsYXRlbmN5Qjxhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvU3VjY2Vzc2Z1bFJlcXVlc3RMYXRlbmN5L01pbmltdW1SCwgEEgIIPBoDCNgECtUCCnVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9TdWNjZXNzZnVsUmVxdWVzdExhdGVuY3kvU2FtcGxlQ291bnQSIgoJT3BlcmF0aW9uGhVOYW1lIG9mIHRoZSBvcGVyYXRpb24YAiADKgExMkZUaGUgbnVtYmVyIGFuZCBsYXRlbmN5IG9mIHN1Y2Nlc3NmdWwgcmVxdWVzdHMgaW4gdGhlIGxhc3QgdGltZSBwZXJpb2QuOhpTYW1wbGVzIG9mIHJlcXVlc3QgbGF0ZW5jeUJAYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1N1Y2Nlc3NmdWxSZXF1ZXN0TGF0ZW5jeS9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKuwIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1N1Y2Nlc3NmdWxSZXF1ZXN0TGF0ZW5jeS9TdW0SIgoJT3BlcmF0aW9uGhVOYW1lIG9mIHRoZSBvcGVyYXRpb24YAiADKgJtczJGVGhlIG51bWJlciBhbmQgbGF0ZW5jeSBvZiBzdWNjZXNzZnVsIHJlcXVlc3RzIGluIHRoZSBsYXN0IHRpbWUgcGVyaW9kLjoPUmVxdWVzdCBsYXRlbmN5Qjhhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvU3VjY2Vzc2Z1bFJlcXVlc3RMYXRlbmN5L1N1bVILCAQSAgg8GgMI2AQKwwIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1N5c3RlbUVycm9ycy9TYW1wbGVDb3VudBI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBIiCglPcGVyYXRpb24aFU5hbWUgb2YgdGhlIG9wZXJhdGlvbhgCIAMqATEyGDUwMCBlcnJvcnMgZnJvbSByZXF1ZXN0czoVU2FtcGxlcyBvZiA1MDAgZXJyb3JzQjRhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvU3lzdGVtRXJyb3JzL1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBAqoAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvU3lzdGVtRXJyb3JzL1N1bRI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBIiCglPcGVyYXRpb24aFU5hbWUgb2YgdGhlIG9wZXJhdGlvbhgCIAMqATEyGDUwMCBlcnJvcnMgZnJvbSByZXF1ZXN0czoKNTAwIGVycm9yc0IsYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1N5c3RlbUVycm9ycy9TdW1SCwgEEgIIPBoDCNgECp8CCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9UaHJvdHRsZWRSZXF1ZXN0cy9TYW1wbGVDb3VudBIiCglPcGVyYXRpb24aFU5hbWUgb2YgdGhlIG9wZXJhdGlvbhgCIAMqATEyG0NvdW50IG9mIHJlcXVlc3RzIHRocm90dGxlZDodU2FtcGxlcyBvZiByZXF1ZXN0cyB0aHJvdHRsZWRCOWF3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9UaHJvdHRsZWRSZXF1ZXN0cy9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKhAIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1Rocm90dGxlZFJlcXVlc3RzL1N1bRIiCglPcGVyYXRpb24aFU5hbWUgb2YgdGhlIG9wZXJhdGlvbhgCIAMqATEyG0NvdW50IG9mIHJlcXVlc3RzIHRocm90dGxlZDoSUmVxdWVzdHMgdGhyb3R0bGVkQjFhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvVGhyb3R0bGVkUmVxdWVzdHMvU3VtUgsIBBICCDwaAwjYBAq/AgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvVXNlckVycm9ycy9TYW1wbGVDb3VudBI3ChhHbG9iYWxTZWNvbmRhcnlJbmRleE5hbWUaG05hbWUgb2YgdGhlIHNlY29uZGFyeSBpbmRleBIiCglPcGVyYXRpb24aFU5hbWUgb2YgdGhlIG9wZXJhdGlvbhgCIAMqATEyGDQwMCBlcnJvcnMgZnJvbSByZXF1ZXN0czoVU2FtcGxlcyBvZiA0MDAgZXJyb3JzQjJhd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvVXNlckVycm9ycy9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKpAIKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1VzZXJFcnJvcnMvU3VtEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4EiIKCU9wZXJhdGlvbhoVTmFtZSBvZiB0aGUgb3BlcmF0aW9uGAIgAyoBMTIYNDAwIGVycm9ycyBmcm9tIHJlcXVlc3RzOgo0MDAgZXJyb3JzQiphd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvVXNlckVycm9ycy9TdW1SCwgEEgIIPBoDCNgECrQCCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9EeW5hbW9EQi9Xcml0ZVRocm90dGxlRXZlbnRzL1NhbXBsZUNvdW50EjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAIgAyoBMTIZQ291bnQgb2Ygd3JpdGVzIHRocm90dGxlZDobU2FtcGxlcyBvZiB3cml0ZXMgdGhyb3R0bGVkQjthd3MuZ29vZ2xlYXBpcy5jb20vRHluYW1vREIvV3JpdGVUaHJvdHRsZUV2ZW50cy9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKmQIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1dyaXRlVGhyb3R0bGVFdmVudHMvU3VtEjcKGEdsb2JhbFNlY29uZGFyeUluZGV4TmFtZRobTmFtZSBvZiB0aGUgc2Vjb25kYXJ5IGluZGV4GAIgAyoBMTIZQ291bnQgb2Ygd3JpdGVzIHRocm90dGxlZDoQV3JpdGVzIHRocm90dGxlZEIzYXdzLmdvb2dsZWFwaXMuY29tL0R5bmFtb0RCL1dyaXRlVGhyb3R0bGVFdmVudHMvU3VtUgsIBBICCDwaAwjYBAqOAgpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZUNvbnN1bWVkUmVhZFdyaXRlT3BzL1NhbXBsZUNvdW50GAIgAyoBMTItQ291bnQgb2Ygb3BlcmF0aW9ucyAocmVhZCBhbmQgd3JpdGUpIGV4ZWN1dGVkOhVTYW1wbGVzIG9mIG9wZXJhdGlvbnNCPWF3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lQ29uc3VtZWRSZWFkV3JpdGVPcHMvU2FtcGxlQ291bnRSDAgEEgMIrAIaAwiQHArzAQpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZUNvbnN1bWVkUmVhZFdyaXRlT3BzL1N1bRgCIAMqATEyLUNvdW50IG9mIG9wZXJhdGlvbnMgKHJlYWQgYW5kIHdyaXRlKSBleGVjdXRlZDoKT3BlcmF0aW9uc0I1YXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVDb25zdW1lZFJlYWRXcml0ZU9wcy9TdW1SDAgEEgMIrAIaAwiQHAr5AQpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZUlkbGVUaW1lL0F2ZXJhZ2UYASADKgFzMjxUaW1lIHNwZW50IHdpdGhvdXQgYW55IHJlYWQgb3Igd3JpdGUgb3BlcmF0aW9ucyAoaW4gc2Vjb25kcyk6EUF2ZXJhZ2UgaWRsZSB0aW1lQi1hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZUlkbGVUaW1lL0F2ZXJhZ2VSDAgEEgMIrAIaAwiQHAr5AQpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZUlkbGVUaW1lL01heGltdW0YASADKgFzMjxUaW1lIHNwZW50IHdpdGhvdXQgYW55IHJlYWQgb3Igd3JpdGUgb3BlcmF0aW9ucyAoaW4gc2Vjb25kcyk6EU1heGltdW0gaWRsZSB0aW1lQi1hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZUlkbGVUaW1lL01heGltdW1SDAgEEgMIrAIaAwiQHAr5AQpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZUlkbGVUaW1lL01pbmltdW0YASADKgFzMjxUaW1lIHNwZW50IHdpdGhvdXQgYW55IHJlYWQgb3Igd3JpdGUgb3BlcmF0aW9ucyAoaW4gc2Vjb25kcyk6EU1pbmltdW0gaWRsZSB0aW1lQi1hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZUlkbGVUaW1lL01pbmltdW1SDAgEEgMIrAIaAwiQHAqEAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZUlkbGVUaW1lL1NhbXBsZUNvdW50GAIgAyoBMTI8VGltZSBzcGVudCB3aXRob3V0IGFueSByZWFkIG9yIHdyaXRlIG9wZXJhdGlvbnMgKGluIHNlY29uZHMpOhRTYW1wbGVzIG9mIGlkbGUgdGltZUIxYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVJZGxlVGltZS9TYW1wbGVDb3VudFIMCAQSAwisAhoDCJAcCukBCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lSWRsZVRpbWUvU3VtGAIgAyoBczI8VGltZSBzcGVudCB3aXRob3V0IGFueSByZWFkIG9yIHdyaXRlIG9wZXJhdGlvbnMgKGluIHNlY29uZHMpOglJZGxlIHRpbWVCKWF3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lSWRsZVRpbWUvU3VtUgwIBBIDCKwCGgMIkBwKggIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVRdWV1ZUxlbmd0aC9TYW1wbGVDb3VudBgCIAMqATEyMVRvdGFsIG51bWJlciBvZiBwZW5kaW5nIHJlYWQgYW5kIHdyaXRlIG9wZXJhdGlvbnM6F1NhbXBsZXMgb2YgcXVldWUgbGVuZ3RoQjRhd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVF1ZXVlTGVuZ3RoL1NhbXBsZUNvdW50UgwIBBIDCKwCGgMIkBwK5wEKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVRdWV1ZUxlbmd0aC9TdW0YAiADKgExMjFUb3RhbCBudW1iZXIgb2YgcGVuZGluZyByZWFkIGFuZCB3cml0ZSBvcGVyYXRpb25zOgxRdWV1ZSBsZW5ndGhCLGF3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lUXVldWVMZW5ndGgvU3VtUgwIBBIDCKwCGgMIkBwK2wEKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVSZWFkQnl0ZXMvQXZlcmFnZRgBIAMqAkJ5MhpCeXRlcyByZWFkIGZyb20gdGhlIHZvbHVtZToSQXZlcmFnZSBieXRlcyByZWFkQi5hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVJlYWRCeXRlcy9BdmVyYWdlUgwIBBIDCKwCGgMIkBwK2wEKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVSZWFkQnl0ZXMvTWF4aW11bRgBIAMqAkJ5MhpCeXRlcyByZWFkIGZyb20gdGhlIHZvbHVtZToSTWF4aW11bSBieXRlcyByZWFkQi5hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVJlYWRCeXRlcy9NYXhpbXVtUgwIBBIDCKwCGgMIkBwK2wEKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVSZWFkQnl0ZXMvTWluaW11bRgBIAMqAkJ5MhpCeXRlcyByZWFkIGZyb20gdGhlIHZvbHVtZToSTWluaW11bSBieXRlcyByZWFkQi5hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVJlYWRCeXRlcy9NaW5pbXVtUgwIBBIDCKwCGgMIkBwK5QEKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVSZWFkQnl0ZXMvU2FtcGxlQ291bnQYAiADKgExMhpCeXRlcyByZWFkIGZyb20gdGhlIHZvbHVtZToVU2FtcGxlcyBvZiBieXRlcyByZWFkQjJhd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVJlYWRCeXRlcy9TYW1wbGVDb3VudFIMCAQSAwisAhoDCJAcCssBCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lUmVhZEJ5dGVzL1N1bRgCIAMqAkJ5MhpCeXRlcyByZWFkIGZyb20gdGhlIHZvbHVtZToKQnl0ZXMgcmVhZEIqYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVSZWFkQnl0ZXMvU3VtUgwIBBIDCKwCGgMIkBwK6wEKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVSZWFkT3BzL1NhbXBsZUNvdW50GAIgAyoBMTIfVG90YWwgbnVtYmVyIG9mIHJlYWQgb3BlcmF0aW9uczoaU2FtcGxlcyBvZiByZWFkIG9wZXJhdGlvbnNCMGF3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lUmVhZE9wcy9TYW1wbGVDb3VudFIMCAQSAwisAhoDCJAcCtABCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lUmVhZE9wcy9TdW0YAiADKgExMh9Ub3RhbCBudW1iZXIgb2YgcmVhZCBvcGVyYXRpb25zOg9SZWFkIG9wZXJhdGlvbnNCKGF3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lUmVhZE9wcy9TdW1SDAgEEgMIrAIaAwiQHArOAQpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVNpemUvQXZlcmFnZRgBIAMqAkJ5Mh5Ub3RhbCBzaXplIG9mIGFsbCB0aGUgdm9sdW1lcy46C1ZvbHVtZSBzaXplQilhd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVNpemUvQXZlcmFnZVIMCAQSAwisAhoDCJAcCsYBClpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lU2l6ZS9TdW0YAiADKgJCeTIeVG90YWwgc2l6ZSBvZiBhbGwgdGhlIHZvbHVtZXMuOgtWb2x1bWUgc2l6ZUIlYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVTaXplL1N1bVIMCAQSAwisAhoDCJAcCpUCCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVGhyb3VnaHB1dFBlcmNlbnRhZ2UvQXZlcmFnZRgBIAMqASUyP1RoZSByYXRpbyBvZiBJT1BTIGRlbGl2ZXJlZCB0byBJT1BTIG1hZGUgYXZhaWxhYmxlIGZvciBhIHZvbHVtZToSQXZlcmFnZSB0aHJvdWdocHV0Qjlhd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVRocm91Z2hwdXRQZXJjZW50YWdlL0F2ZXJhZ2VSDAgEEgMIrAIaAwiQHAqVAgpucHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVRocm91Z2hwdXRQZXJjZW50YWdlL01heGltdW0YASADKgElMj9UaGUgcmF0aW8gb2YgSU9QUyBkZWxpdmVyZWQgdG8gSU9QUyBtYWRlIGF2YWlsYWJsZSBmb3IgYSB2b2x1bWU6Ek1heGltdW0gdGhyb3VnaHB1dEI5YXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVUaHJvdWdocHV0UGVyY2VudGFnZS9NYXhpbXVtUgwIBBIDCKwCGgMIkBwKlQIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVUaHJvdWdocHV0UGVyY2VudGFnZS9NaW5pbXVtGAEgAyoBJTI/VGhlIHJhdGlvIG9mIElPUFMgZGVsaXZlcmVkIHRvIElPUFMgbWFkZSBhdmFpbGFibGUgZm9yIGEgdm9sdW1lOhJNaW5pbXVtIHRocm91Z2hwdXRCOWF3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVGhyb3VnaHB1dFBlcmNlbnRhZ2UvTWluaW11bVIMCAQSAwisAhoDCJAcCqACCnJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVGhyb3VnaHB1dFBlcmNlbnRhZ2UvU2FtcGxlQ291bnQYAiADKgExMj9UaGUgcmF0aW8gb2YgSU9QUyBkZWxpdmVyZWQgdG8gSU9QUyBtYWRlIGF2YWlsYWJsZSBmb3IgYSB2b2x1bWU6FVNhbXBsZXMgb2YgdGhyb3VnaHB1dEI9YXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVUaHJvdWdocHV0UGVyY2VudGFnZS9TYW1wbGVDb3VudFIMCAQSAwisAhoDCJAcCoUCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVGhyb3VnaHB1dFBlcmNlbnRhZ2UvU3VtGAIgAyoBJTI/VGhlIHJhdGlvIG9mIElPUFMgZGVsaXZlcmVkIHRvIElPUFMgbWFkZSBhdmFpbGFibGUgZm9yIGEgdm9sdW1lOgpUaHJvdWdocHV0QjVhd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVRocm91Z2hwdXRQZXJjZW50YWdlL1N1bVIMCAQSAwisAhoDCJAcCoACCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVG90YWxSZWFkVGltZS9BdmVyYWdlGAEgAyoBczIvVGltZSB1dGlsaXplZCBmb3IgcmVhZCBvcGVyYXRpb25zIChpbiBzZWNvbmRzKSA6G0F2ZXJhZ2UgcmVhZCBvcGVyYXRpb24gdGltZUIyYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVUb3RhbFJlYWRUaW1lL0F2ZXJhZ2VSDAgEEgMIrAIaAwiQHAqAAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVRvdGFsUmVhZFRpbWUvTWF4aW11bRgBIAMqAXMyL1RpbWUgdXRpbGl6ZWQgZm9yIHJlYWQgb3BlcmF0aW9ucyAoaW4gc2Vjb25kcykgOhtNYXhpbXVtIHJlYWQgb3BlcmF0aW9uIHRpbWVCMmF3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVG90YWxSZWFkVGltZS9NYXhpbXVtUgwIBBIDCKwCGgMIkBwKgAIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVUb3RhbFJlYWRUaW1lL01pbmltdW0YASADKgFzMi9UaW1lIHV0aWxpemVkIGZvciByZWFkIG9wZXJhdGlvbnMgKGluIHNlY29uZHMpIDobTWluaW11bSByZWFkIG9wZXJhdGlvbiB0aW1lQjJhd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVRvdGFsUmVhZFRpbWUvTWluaW11bVIMCAQSAwisAhoDCJAcCosCCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVG90YWxSZWFkVGltZS9TYW1wbGVDb3VudBgCIAMqATEyL1RpbWUgdXRpbGl6ZWQgZm9yIHJlYWQgb3BlcmF0aW9ucyAoaW4gc2Vjb25kcykgOh5TYW1wbGVzIG9mIHJlYWQgb3BlcmF0aW9uIHRpbWVCNmF3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVG90YWxSZWFkVGltZS9TYW1wbGVDb3VudFIMCAQSAwisAhoDCJAcCvABCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVG90YWxSZWFkVGltZS9TdW0YAiADKgFzMi9UaW1lIHV0aWxpemVkIGZvciByZWFkIG9wZXJhdGlvbnMgKGluIHNlY29uZHMpIDoTUmVhZCBvcGVyYXRpb24gdGltZUIuYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVUb3RhbFJlYWRUaW1lL1N1bVIMCAQSAwisAhoDCJAcCoMCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVG90YWxXcml0ZVRpbWUvQXZlcmFnZRgBIAMqAXMyL1RpbWUgdXRpbGl6ZWQgZm9yIHdyaXRlIG9wZXJhdGlvbnMgKGluIHNlY29uZHMpOhxBdmVyYWdlIHdyaXRlIG9wZXJhdGlvbiB0aW1lQjNhd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVRvdGFsV3JpdGVUaW1lL0F2ZXJhZ2VSDAgEEgMIrAIaAwiQHAqDAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVRvdGFsV3JpdGVUaW1lL01heGltdW0YASADKgFzMi9UaW1lIHV0aWxpemVkIGZvciB3cml0ZSBvcGVyYXRpb25zIChpbiBzZWNvbmRzKTocTWF4aW11bSB3cml0ZSBvcGVyYXRpb24gdGltZUIzYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVUb3RhbFdyaXRlVGltZS9NYXhpbXVtUgwIBBIDCKwCGgMIkBwKgwIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVUb3RhbFdyaXRlVGltZS9NaW5pbXVtGAEgAyoBczIvVGltZSB1dGlsaXplZCBmb3Igd3JpdGUgb3BlcmF0aW9ucyAoaW4gc2Vjb25kcyk6HE1pbmltdW0gd3JpdGUgb3BlcmF0aW9uIHRpbWVCM2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVG90YWxXcml0ZVRpbWUvTWluaW11bVIMCAQSAwisAhoDCJAcCo4CCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVG90YWxXcml0ZVRpbWUvU2FtcGxlQ291bnQYAiADKgExMi9UaW1lIHV0aWxpemVkIGZvciB3cml0ZSBvcGVyYXRpb25zIChpbiBzZWNvbmRzKTofU2FtcGxlcyBvZiB3cml0ZSBvcGVyYXRpb24gdGltZUI3YXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVUb3RhbFdyaXRlVGltZS9TYW1wbGVDb3VudFIMCAQSAwisAhoDCJAcCvMBCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lVG90YWxXcml0ZVRpbWUvU3VtGAIgAyoBczIvVGltZSB1dGlsaXplZCBmb3Igd3JpdGUgb3BlcmF0aW9ucyAoaW4gc2Vjb25kcyk6FFdyaXRlIG9wZXJhdGlvbiB0aW1lQi9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVRvdGFsV3JpdGVUaW1lL1N1bVIMCAQSAwisAhoDCJAcCuEBCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lV3JpdGVCeXRlcy9BdmVyYWdlGAEgAyoCQnkyG0J5dGVzIHdyaXR0ZW4gdG8gdGhlIHZvbHVtZToVQXZlcmFnZSBieXRlcyB3cml0dGVuQi9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVdyaXRlQnl0ZXMvQXZlcmFnZVIMCAQSAwisAhoDCJAcCuEBCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lV3JpdGVCeXRlcy9NYXhpbXVtGAEgAyoCQnkyG0J5dGVzIHdyaXR0ZW4gdG8gdGhlIHZvbHVtZToVTWF4aW11bSBieXRlcyB3cml0dGVuQi9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVdyaXRlQnl0ZXMvTWF4aW11bVIMCAQSAwisAhoDCJAcCuEBCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lV3JpdGVCeXRlcy9NaW5pbXVtGAEgAyoCQnkyG0J5dGVzIHdyaXR0ZW4gdG8gdGhlIHZvbHVtZToVTWluaW11bSBieXRlcyB3cml0dGVuQi9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVdyaXRlQnl0ZXMvTWluaW11bVIMCAQSAwisAhoDCJAcCusBCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lV3JpdGVCeXRlcy9TYW1wbGVDb3VudBgCIAMqATEyG0J5dGVzIHdyaXR0ZW4gdG8gdGhlIHZvbHVtZToYU2FtcGxlcyBvZiBieXRlcyB3cml0dGVuQjNhd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVdyaXRlQnl0ZXMvU2FtcGxlQ291bnRSDAgEEgMIrAIaAwiQHArRAQpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVdyaXRlQnl0ZXMvU3VtGAIgAyoCQnkyG0J5dGVzIHdyaXR0ZW4gdG8gdGhlIHZvbHVtZToNQnl0ZXMgd3JpdHRlbkIrYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVXcml0ZUJ5dGVzL1N1bVIMCAQSAwisAhoDCJAcCu8BCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQlMvVm9sdW1lV3JpdGVPcHMvU2FtcGxlQ291bnQYAiADKgExMiBUb3RhbCBudW1iZXIgb2Ygd3JpdGUgb3BlcmF0aW9uczobU2FtcGxlcyBvZiB3cml0ZSBvcGVyYXRpb25zQjFhd3MuZ29vZ2xlYXBpcy5jb20vRUJTL1ZvbHVtZVdyaXRlT3BzL1NhbXBsZUNvdW50UgwIBBIDCKwCGgMIkBwK1AEKXnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVXcml0ZU9wcy9TdW0YAiADKgExMiBUb3RhbCBudW1iZXIgb2Ygd3JpdGUgb3BlcmF0aW9uczoQV3JpdGUgb3BlcmF0aW9uc0IpYXdzLmdvb2dsZWFwaXMuY29tL0VCUy9Wb2x1bWVXcml0ZU9wcy9TdW1SDAgEEgMIrAIaAwiQHAq1AgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0NQVUNyZWRpdEJhbGFuY2UvQXZlcmFnZRgBIAMqATEya0ZvciBUMiBpbnN0YW5jZXMsIHRoZSBhbW91bnQgb2YgdGltZSBhdmFpbGFibGUgZm9yIGEgdmlydHVhbCBDUFUgdG8gZXhjZWVkIGl0cyBzdGFuZGFyZCBwZXJmb3JtYW5jZSBtZWFzdXJlOhpBdmVyYWdlIENQVSBjcmVkaXQgYmFsYW5jZUIvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVDcmVkaXRCYWxhbmNlL0F2ZXJhZ2VSDAgEEgMIrAIaAwiwCQq1AgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0NQVUNyZWRpdEJhbGFuY2UvTWF4aW11bRgBIAMqATEya0ZvciBUMiBpbnN0YW5jZXMsIHRoZSBhbW91bnQgb2YgdGltZSBhdmFpbGFibGUgZm9yIGEgdmlydHVhbCBDUFUgdG8gZXhjZWVkIGl0cyBzdGFuZGFyZCBwZXJmb3JtYW5jZSBtZWFzdXJlOhpNYXhpbXVtIENQVSBjcmVkaXQgYmFsYW5jZUIvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVDcmVkaXRCYWxhbmNlL01heGltdW1SDAgEEgMIrAIaAwiwCQq1AgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0NQVUNyZWRpdEJhbGFuY2UvTWluaW11bRgBIAMqATEya0ZvciBUMiBpbnN0YW5jZXMsIHRoZSBhbW91bnQgb2YgdGltZSBhdmFpbGFibGUgZm9yIGEgdmlydHVhbCBDUFUgdG8gZXhjZWVkIGl0cyBzdGFuZGFyZCBwZXJmb3JtYW5jZSBtZWFzdXJlOhpNaW5pbXVtIENQVSBjcmVkaXQgYmFsYW5jZUIvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVDcmVkaXRCYWxhbmNlL01pbmltdW1SDAgEEgMIrAIaAwiwCQrAAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0NQVUNyZWRpdEJhbGFuY2UvU2FtcGxlQ291bnQYAiADKgExMmtGb3IgVDIgaW5zdGFuY2VzLCB0aGUgYW1vdW50IG9mIHRpbWUgYXZhaWxhYmxlIGZvciBhIHZpcnR1YWwgQ1BVIHRvIGV4Y2VlZCBpdHMgc3RhbmRhcmQgcGVyZm9ybWFuY2UgbWVhc3VyZTodU2FtcGxlcyBvZiBDUFUgY3JlZGl0IGJhbGFuY2VCM2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvQ1BVQ3JlZGl0QmFsYW5jZS9TYW1wbGVDb3VudFIMCAQSAwisAhoDCLAJCqUCCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvQ1BVQ3JlZGl0QmFsYW5jZS9TdW0YAiADKgExMmtGb3IgVDIgaW5zdGFuY2VzLCB0aGUgYW1vdW50IG9mIHRpbWUgYXZhaWxhYmxlIGZvciBhIHZpcnR1YWwgQ1BVIHRvIGV4Y2VlZCBpdHMgc3RhbmRhcmQgcGVyZm9ybWFuY2UgbWVhc3VyZToSQ1BVIGNyZWRpdCBiYWxhbmNlQithd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0NQVUNyZWRpdEJhbGFuY2UvU3VtUgwIBBIDCKwCGgMIsAkKqQIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVDcmVkaXRVc2FnZS9BdmVyYWdlGAEgAyoBMTJlRm9yIFQyIGluc3RhbmNlcywgdGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgdmlydHVhbCBDUFVzIHJlcXVpcmVkIGZyb20gdGhlIHBoeXNpY2FsIENQVXMgZm9yIHByb2Nlc3Npbmc6GEF2ZXJhZ2UgQ1BVIGNyZWRpdCB1c2FnZUItYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVDcmVkaXRVc2FnZS9BdmVyYWdlUgwIBBIDCKwCGgMIsAkKqQIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVDcmVkaXRVc2FnZS9NYXhpbXVtGAEgAyoBMTJlRm9yIFQyIGluc3RhbmNlcywgdGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgdmlydHVhbCBDUFVzIHJlcXVpcmVkIGZyb20gdGhlIHBoeXNpY2FsIENQVXMgZm9yIHByb2Nlc3Npbmc6GE1heGltdW0gQ1BVIGNyZWRpdCB1c2FnZUItYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVDcmVkaXRVc2FnZS9NYXhpbXVtUgwIBBIDCKwCGgMIsAkKqQIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVDcmVkaXRVc2FnZS9NaW5pbXVtGAEgAyoBMTJlRm9yIFQyIGluc3RhbmNlcywgdGhlIGFtb3VudCBvZiB0aW1lIHRoYXQgdmlydHVhbCBDUFVzIHJlcXVpcmVkIGZyb20gdGhlIHBoeXNpY2FsIENQVXMgZm9yIHByb2Nlc3Npbmc6GE1pbmltdW0gQ1BVIGNyZWRpdCB1c2FnZUItYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVDcmVkaXRVc2FnZS9NaW5pbXVtUgwIBBIDCKwCGgMIsAkKtAIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVDcmVkaXRVc2FnZS9TYW1wbGVDb3VudBgCIAMqATEyZUZvciBUMiBpbnN0YW5jZXMsIHRoZSBhbW91bnQgb2YgdGltZSB0aGF0IHZpcnR1YWwgQ1BVcyByZXF1aXJlZCBmcm9tIHRoZSBwaHlzaWNhbCBDUFVzIGZvciBwcm9jZXNzaW5nOhtTYW1wbGVzIG9mIENQVSBjcmVkaXQgdXNhZ2VCMWF3cy5nb29nbGVhcGlzLmNvbS9FQzIvQ1BVQ3JlZGl0VXNhZ2UvU2FtcGxlQ291bnRSDAgEEgMIrAIaAwiwCQqZAgpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0NQVUNyZWRpdFVzYWdlL1N1bRgCIAMqATEyZUZvciBUMiBpbnN0YW5jZXMsIHRoZSBhbW91bnQgb2YgdGltZSB0aGF0IHZpcnR1YWwgQ1BVcyByZXF1aXJlZCBmcm9tIHRoZSBwaHlzaWNhbCBDUFVzIGZvciBwcm9jZXNzaW5nOhBDUFUgY3JlZGl0IHVzYWdlQilhd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0NQVUNyZWRpdFVzYWdlL1N1bVIMCAQSAwisAhoDCLAJCpECCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvQ1BVVXRpbGl6YXRpb24vQXZlcmFnZRgBIAMqASUyTlRoZSBwZXJjZW50YWdlIG9mIHByb3Zpc2lvbmVkIHByb2Nlc3NpbmcgcmVzb3VyY2VzIGJlaW5nIHVzZWQgYnkgdGhlIGluc3RhbmNlLjoXQXZlcmFnZSBDUFUgdXRpbGl6YXRpb25CLWF3cy5nb29nbGVhcGlzLmNvbS9FQzIvQ1BVVXRpbGl6YXRpb24vQXZlcmFnZVIMCAQSAwisAhoDCLAJCpECCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvQ1BVVXRpbGl6YXRpb24vTWF4aW11bRgBIAMqASUyTlRoZSBwZXJjZW50YWdlIG9mIHByb3Zpc2lvbmVkIHByb2Nlc3NpbmcgcmVzb3VyY2VzIGJlaW5nIHVzZWQgYnkgdGhlIGluc3RhbmNlLjoXTWF4aW11bSBDUFUgdXRpbGl6YXRpb25CLWF3cy5nb29nbGVhcGlzLmNvbS9FQzIvQ1BVVXRpbGl6YXRpb24vTWF4aW11bVIMCAQSAwisAhoDCLAJCpECCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvQ1BVVXRpbGl6YXRpb24vTWluaW11bRgBIAMqASUyTlRoZSBwZXJjZW50YWdlIG9mIHByb3Zpc2lvbmVkIHByb2Nlc3NpbmcgcmVzb3VyY2VzIGJlaW5nIHVzZWQgYnkgdGhlIGluc3RhbmNlLjoXTWluaW11bSBDUFUgdXRpbGl6YXRpb25CLWF3cy5nb29nbGVhcGlzLmNvbS9FQzIvQ1BVVXRpbGl6YXRpb24vTWluaW11bVIMCAQSAwisAhoDCLAJCpwCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvQ1BVVXRpbGl6YXRpb24vU2FtcGxlQ291bnQYAiADKgExMk5UaGUgcGVyY2VudGFnZSBvZiBwcm92aXNpb25lZCBwcm9jZXNzaW5nIHJlc291cmNlcyBiZWluZyB1c2VkIGJ5IHRoZSBpbnN0YW5jZS46GlNhbXBsZXMgb2YgQ1BVIHV0aWxpemF0aW9uQjFhd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0NQVVV0aWxpemF0aW9uL1NhbXBsZUNvdW50UgwIBBIDCKwCGgMIsAkKgQIKXnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVVdGlsaXphdGlvbi9TdW0YAiADKgElMk5UaGUgcGVyY2VudGFnZSBvZiBwcm92aXNpb25lZCBwcm9jZXNzaW5nIHJlc291cmNlcyBiZWluZyB1c2VkIGJ5IHRoZSBpbnN0YW5jZS46D0NQVSB1dGlsaXphdGlvbkIpYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9DUFVVdGlsaXphdGlvbi9TdW1SDAgEEgMIrAIaAwiwCQqEAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0Rpc2tSZWFkQnl0ZXMvQXZlcmFnZRgBIAMqAkJ5MkJOdW1iZXIgb2YgYnl0ZXMgcmVhZCBmcm9tIGVwaGVtZXJhbCBkaXNrcyBhdHRhY2hlZCB0byB0aGUgaW5zdGFuY2U6F0F2ZXJhZ2UgZGlzayBieXRlcyByZWFkQixhd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0Rpc2tSZWFkQnl0ZXMvQXZlcmFnZVIMCAQSAwisAhoDCLAJCoQCCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvRGlza1JlYWRCeXRlcy9NYXhpbXVtGAEgAyoCQnkyQk51bWJlciBvZiBieXRlcyByZWFkIGZyb20gZXBoZW1lcmFsIGRpc2tzIGF0dGFjaGVkIHRvIHRoZSBpbnN0YW5jZToXTWF4aW11bSBkaXNrIGJ5dGVzIHJlYWRCLGF3cy5nb29nbGVhcGlzLmNvbS9FQzIvRGlza1JlYWRCeXRlcy9NYXhpbXVtUgwIBBIDCKwCGgMIsAkKhAIKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9EaXNrUmVhZEJ5dGVzL01pbmltdW0YASADKgJCeTJCTnVtYmVyIG9mIGJ5dGVzIHJlYWQgZnJvbSBlcGhlbWVyYWwgZGlza3MgYXR0YWNoZWQgdG8gdGhlIGluc3RhbmNlOhdNaW5pbXVtIGRpc2sgYnl0ZXMgcmVhZEIsYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9EaXNrUmVhZEJ5dGVzL01pbmltdW1SDAgEEgMIrAIaAwiwCQqOAgplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0Rpc2tSZWFkQnl0ZXMvU2FtcGxlQ291bnQYAiADKgExMkJOdW1iZXIgb2YgYnl0ZXMgcmVhZCBmcm9tIGVwaGVtZXJhbCBkaXNrcyBhdHRhY2hlZCB0byB0aGUgaW5zdGFuY2U6GlNhbXBsZXMgb2YgZGlzayBieXRlcyByZWFkQjBhd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0Rpc2tSZWFkQnl0ZXMvU2FtcGxlQ291bnRSDAgEEgMIrAIaAwiwCQr0AQpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0Rpc2tSZWFkQnl0ZXMvU3VtGAIgAyoCQnkyQk51bWJlciBvZiBieXRlcyByZWFkIGZyb20gZXBoZW1lcmFsIGRpc2tzIGF0dGFjaGVkIHRvIHRoZSBpbnN0YW5jZToPRGlzayBieXRlcyByZWFkQihhd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0Rpc2tSZWFkQnl0ZXMvU3VtUgwIBBIDCKwCGgMIsAkK+gEKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9EaXNrUmVhZE9wcy9TYW1wbGVDb3VudBgCIAMqATEyLU51bWJlciBvZiBlcGhlbWVyYWwgcmVhZCBvcGVyYXRpb25zIGNvbXBsZXRlZDofU2FtcGxlcyBvZiBkaXNrIHJlYWRzIGNvbXBsZXRlZEIuYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9EaXNrUmVhZE9wcy9TYW1wbGVDb3VudFIMCAQSAwisAhoDCLAJCt8BCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvRGlza1JlYWRPcHMvU3VtGAIgAyoBMTItTnVtYmVyIG9mIGVwaGVtZXJhbCByZWFkIG9wZXJhdGlvbnMgY29tcGxldGVkOhREaXNrIHJlYWRzIGNvbXBsZXRlZEImYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9EaXNrUmVhZE9wcy9TdW1SDAgEEgMIrAIaAwiwCQqKAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0Rpc2tXcml0ZUJ5dGVzL0F2ZXJhZ2UYASADKgJCeTJDTnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW4gdG8gZXBoZW1lcmFsIGRpc2tzIGF0dGFjaGVkIHRvIHRoZSBpbnN0YW5jZToaQXZlcmFnZSBkaXNrIGJ5dGVzIHdyaXR0ZW5CLWF3cy5nb29nbGVhcGlzLmNvbS9FQzIvRGlza1dyaXRlQnl0ZXMvQXZlcmFnZVIMCAQSAwisAhoDCLAJCooCCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvRGlza1dyaXRlQnl0ZXMvTWF4aW11bRgBIAMqAkJ5MkNOdW1iZXIgb2YgYnl0ZXMgd3JpdHRlbiB0byBlcGhlbWVyYWwgZGlza3MgYXR0YWNoZWQgdG8gdGhlIGluc3RhbmNlOhpNYXhpbXVtIGRpc2sgYnl0ZXMgd3JpdHRlbkItYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9EaXNrV3JpdGVCeXRlcy9NYXhpbXVtUgwIBBIDCKwCGgMIsAkKigIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9EaXNrV3JpdGVCeXRlcy9NaW5pbXVtGAEgAyoCQnkyQ051bWJlciBvZiBieXRlcyB3cml0dGVuIHRvIGVwaGVtZXJhbCBkaXNrcyBhdHRhY2hlZCB0byB0aGUgaW5zdGFuY2U6Gk1pbmltdW0gZGlzayBieXRlcyB3cml0dGVuQi1hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0Rpc2tXcml0ZUJ5dGVzL01pbmltdW1SDAgEEgMIrAIaAwiwCQqUAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0Rpc2tXcml0ZUJ5dGVzL1NhbXBsZUNvdW50GAIgAyoBMTJDTnVtYmVyIG9mIGJ5dGVzIHdyaXR0ZW4gdG8gZXBoZW1lcmFsIGRpc2tzIGF0dGFjaGVkIHRvIHRoZSBpbnN0YW5jZTodU2FtcGxlcyBvZiBkaXNrIGJ5dGVzIHdyaXR0ZW5CMWF3cy5nb29nbGVhcGlzLmNvbS9FQzIvRGlza1dyaXRlQnl0ZXMvU2FtcGxlQ291bnRSDAgEEgMIrAIaAwiwCQr6AQpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0Rpc2tXcml0ZUJ5dGVzL1N1bRgCIAMqAkJ5MkNOdW1iZXIgb2YgYnl0ZXMgd3JpdHRlbiB0byBlcGhlbWVyYWwgZGlza3MgYXR0YWNoZWQgdG8gdGhlIGluc3RhbmNlOhJEaXNrIGJ5dGVzIHdyaXR0ZW5CKWF3cy5nb29nbGVhcGlzLmNvbS9FQzIvRGlza1dyaXRlQnl0ZXMvU3VtUgwIBBIDCKwCGgMIsAkK/gEKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9EaXNrV3JpdGVPcHMvU2FtcGxlQ291bnQYAiADKgExMi5OdW1iZXIgb2YgZXBoZW1lcmFsIHdyaXRlIG9wZXJhdGlvbnMgY29tcGxldGVkOiBTYW1wbGVzIG9mIGRpc2sgd3JpdGVzIGNvbXBsZXRlZEIvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9EaXNrV3JpdGVPcHMvU2FtcGxlQ291bnRSDAgEEgMIrAIaAwiwCQrjAQpccHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL0Rpc2tXcml0ZU9wcy9TdW0YAiADKgExMi5OdW1iZXIgb2YgZXBoZW1lcmFsIHdyaXRlIG9wZXJhdGlvbnMgY29tcGxldGVkOhVEaXNrIHdyaXRlcyBjb21wbGV0ZWRCJ2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvRGlza1dyaXRlT3BzL1N1bVIMCAQSAwisAhoDCLAJCu4BCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya0luL0F2ZXJhZ2UYASADKgJCeTIxQnl0ZXMgb2YgaW5jb21pbmcgbmV0d29yayB0cmFmZmljIHRvIHRoZSBpbnN0YW5jZToaQXZlcmFnZSBuZXR3b3JrIGJ5dGVzIHJlYWRCKGF3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya0luL0F2ZXJhZ2VSDAgEEgMIrAIaAwiwCQruAQpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL05ldHdvcmtJbi9NYXhpbXVtGAEgAyoCQnkyMUJ5dGVzIG9mIGluY29taW5nIG5ldHdvcmsgdHJhZmZpYyB0byB0aGUgaW5zdGFuY2U6Gk1heGltdW0gbmV0d29yayBieXRlcyByZWFkQihhd3MuZ29vZ2xlYXBpcy5jb20vRUMyL05ldHdvcmtJbi9NYXhpbXVtUgwIBBIDCKwCGgMIsAkK7gEKXXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9OZXR3b3JrSW4vTWluaW11bRgBIAMqAkJ5MjFCeXRlcyBvZiBpbmNvbWluZyBuZXR3b3JrIHRyYWZmaWMgdG8gdGhlIGluc3RhbmNlOhpNaW5pbXVtIG5ldHdvcmsgYnl0ZXMgcmVhZEIoYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9OZXR3b3JrSW4vTWluaW11bVIMCAQSAwisAhoDCLAJCvgBCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya0luL1NhbXBsZUNvdW50GAIgAyoBMTIxQnl0ZXMgb2YgaW5jb21pbmcgbmV0d29yayB0cmFmZmljIHRvIHRoZSBpbnN0YW5jZTodU2FtcGxlcyBvZiBuZXR3b3JrIGJ5dGVzIHJlYWRCLGF3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya0luL1NhbXBsZUNvdW50UgwIBBIDCKwCGgMIsAkK3gEKWXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9OZXR3b3JrSW4vU3VtGAIgAyoCQnkyMUJ5dGVzIG9mIGluY29taW5nIG5ldHdvcmsgdHJhZmZpYyB0byB0aGUgaW5zdGFuY2U6Ek5ldHdvcmsgYnl0ZXMgcmVhZEIkYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9OZXR3b3JrSW4vU3VtUgwIBBIDCKwCGgMIsAkK9QEKXnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9OZXR3b3JrT3V0L0F2ZXJhZ2UYASADKgJCeTIzQnl0ZXMgb2Ygb3V0Z29pbmcgbmV0d29yayB0cmFmZmljIGZyb20gdGhlIGluc3RhbmNlOh1BdmVyYWdlIG5ldHdvcmsgYnl0ZXMgd3JpdHRlbkIpYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9OZXR3b3JrT3V0L0F2ZXJhZ2VSDAgEEgMIrAIaAwiwCQr1AQpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL05ldHdvcmtPdXQvTWF4aW11bRgBIAMqAkJ5MjNCeXRlcyBvZiBvdXRnb2luZyBuZXR3b3JrIHRyYWZmaWMgZnJvbSB0aGUgaW5zdGFuY2U6HU1heGltdW0gbmV0d29yayBieXRlcyB3cml0dGVuQilhd3MuZ29vZ2xlYXBpcy5jb20vRUMyL05ldHdvcmtPdXQvTWF4aW11bVIMCAQSAwisAhoDCLAJCvUBCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya091dC9NaW5pbXVtGAEgAyoCQnkyM0J5dGVzIG9mIG91dGdvaW5nIG5ldHdvcmsgdHJhZmZpYyBmcm9tIHRoZSBpbnN0YW5jZTodTWluaW11bSBuZXR3b3JrIGJ5dGVzIHdyaXR0ZW5CKWF3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya091dC9NaW5pbXVtUgwIBBIDCKwCGgMIsAkK/wEKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9OZXR3b3JrT3V0L1NhbXBsZUNvdW50GAIgAyoBMTIzQnl0ZXMgb2Ygb3V0Z29pbmcgbmV0d29yayB0cmFmZmljIGZyb20gdGhlIGluc3RhbmNlOiBTYW1wbGVzIG9mIG5ldHdvcmsgYnl0ZXMgd3JpdHRlbkItYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9OZXR3b3JrT3V0L1NhbXBsZUNvdW50UgwIBBIDCKwCGgMIsAkK5QEKWnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9OZXR3b3JrT3V0L1N1bRgCIAMqAkJ5MjNCeXRlcyBvZiBvdXRnb2luZyBuZXR3b3JrIHRyYWZmaWMgZnJvbSB0aGUgaW5zdGFuY2U6FU5ldHdvcmsgYnl0ZXMgd3JpdHRlbkIlYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9OZXR3b3JrT3V0L1N1bVIMCAQSAwisAhoDCLAJCv8BCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya1BhY2tldHNJbi9TYW1wbGVDb3VudBgCIAMqATEyKEluY29taW5nIG5ldHdvcmsgcGFja2V0cyB0byB0aGUgaW5zdGFuY2U6H1NhbXBsZXMgb2YgbmV0d29yayBwYWNrZXRzIHJlYWRCM2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya1BhY2tldHNJbi9TYW1wbGVDb3VudFIMCAQSAwisAhoDCLAJCuQBCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya1BhY2tldHNJbi9TdW0YAiADKgExMihJbmNvbWluZyBuZXR3b3JrIHBhY2tldHMgdG8gdGhlIGluc3RhbmNlOhROZXR3b3JrIHBhY2tldHMgcmVhZEIrYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9OZXR3b3JrUGFja2V0c0luL1N1bVIMCAQSAwisAhoDCLAJCoYCCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya1BhY2tldHNPdXQvU2FtcGxlQ291bnQYAiADKgExMipPdXRnb2luZyBuZXR3b3JrIHBhY2tldHMgZnJvbSB0aGUgaW5zdGFuY2U6IlNhbXBsZXMgb2YgbmV0d29yayBwYWNrZXRzIHdyaXR0ZW5CNGF3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya1BhY2tldHNPdXQvU2FtcGxlQ291bnRSDAgEEgMIrAIaAwiwCQrrAQphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL05ldHdvcmtQYWNrZXRzT3V0L1N1bRgCIAMqATEyKk91dGdvaW5nIG5ldHdvcmsgcGFja2V0cyBmcm9tIHRoZSBpbnN0YW5jZToXTmV0d29yayBwYWNrZXRzIHdyaXR0ZW5CLGF3cy5nb29nbGVhcGlzLmNvbS9FQzIvTmV0d29ya1BhY2tldHNPdXQvU3VtUgwIBBIDCKwCGgMIsAkKsAIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9TdGF0dXNDaGVja0ZhaWxlZC9TYW1wbGVDb3VudBgCIAMqATEyV0Jvb2xlYW4gb24gdGhlIEFXUyBpbnN0YW5jZSBhbmQgc3lzdGVtIHN0YXR1cyBjaGVja3M6IDAgaWYgYm90aCBwYXNzLCAxIGlmIGVpdGhlciBmYWlsczofU2FtcGxlcyBvZiBmYWlsZWQgc3RhdHVzIGNoZWNrc0I0YXdzLmdvb2dsZWFwaXMuY29tL0VDMi9TdGF0dXNDaGVja0ZhaWxlZC9TYW1wbGVDb3VudFIMCAQSAwisAhoDCLAJCpUCCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvU3RhdHVzQ2hlY2tGYWlsZWQvU3VtGAIgAyoBMTJXQm9vbGVhbiBvbiB0aGUgQVdTIGluc3RhbmNlIGFuZCBzeXN0ZW0gc3RhdHVzIGNoZWNrczogMCBpZiBib3RoIHBhc3MsIDEgaWYgZWl0aGVyIGZhaWxzOhRGYWlsZWQgc3RhdHVzIGNoZWNrc0IsYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9TdGF0dXNDaGVja0ZhaWxlZC9TdW1SDAgEEgMIrAIaAwiwCQq3AgpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUMyL1N0YXR1c0NoZWNrRmFpbGVkX0luc3RhbmNlL1NhbXBsZUNvdW50GAIgAyoBMTJDQm9vbGVhbiBvbiB0aGUgaW5zdGFuY2Ugc3RhdHVzIGNoZWNrOiAwIGlmIGl0IHBhc3NlcywgMSBpZiBpdCBmYWlsczooU2FtcGxlcyBvZiBmYWlsZWQgaW5zdGFuY2Ugc3RhdHVzIGNoZWNrc0I9YXdzLmdvb2dsZWFwaXMuY29tL0VDMi9TdGF0dXNDaGVja0ZhaWxlZF9JbnN0YW5jZS9TYW1wbGVDb3VudFIMCAQSAwisAhoDCLAJCpwCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvU3RhdHVzQ2hlY2tGYWlsZWRfSW5zdGFuY2UvU3VtGAIgAyoBMTJDQm9vbGVhbiBvbiB0aGUgaW5zdGFuY2Ugc3RhdHVzIGNoZWNrOiAwIGlmIGl0IHBhc3NlcywgMSBpZiBpdCBmYWlsczodRmFpbGVkIGluc3RhbmNlIHN0YXR1cyBjaGVja3NCNWF3cy5nb29nbGVhcGlzLmNvbS9FQzIvU3RhdHVzQ2hlY2tGYWlsZWRfSW5zdGFuY2UvU3VtUgwIBBIDCKwCGgMIsAkKrwIKcHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9TdGF0dXNDaGVja0ZhaWxlZF9TeXN0ZW0vU2FtcGxlQ291bnQYAiADKgExMkFCb29sZWFuIG9uIHRoZSBzeXN0ZW0gc3RhdHVzIGNoZWNrOiAwIGlmIGl0IHBhc3NlcywgMSBpZiBpdCBmYWlsczomU2FtcGxlcyBvZiBmYWlsZWQgc3lzdGVtIHN0YXR1cyBjaGVja3NCO2F3cy5nb29nbGVhcGlzLmNvbS9FQzIvU3RhdHVzQ2hlY2tGYWlsZWRfU3lzdGVtL1NhbXBsZUNvdW50UgwIBBIDCKwCGgMIsAkKlAIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9TdGF0dXNDaGVja0ZhaWxlZF9TeXN0ZW0vU3VtGAIgAyoBMTJBQm9vbGVhbiBvbiB0aGUgc3lzdGVtIHN0YXR1cyBjaGVjazogMCBpZiBpdCBwYXNzZXMsIDEgaWYgaXQgZmFpbHM6G0ZhaWxlZCBzeXN0ZW0gc3RhdHVzIGNoZWNrc0IzYXdzLmdvb2dsZWFwaXMuY29tL0VDMi9TdGF0dXNDaGVja0ZhaWxlZF9TeXN0ZW0vU3VtUgwIBBIDCKwCGgMIsAkK9gIKb3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9CYWNrZW5kQ29ubmVjdGlvbkVycm9ycy9TYW1wbGVDb3VudBJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTJLVGhlIGNvdW50IG9mIGZhaWxlZCBjb25uZWN0aW9ucyBiZXR3ZWVuIHRoZSBFTEIgYW5kIGl0cyBiYWNrLWVuZCBpbnN0YW5jZXMuOhxTYW1wbGVzIG9mIGNvbm5lY3Rpb24gZXJyb3JzQjphd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0JhY2tlbmRDb25uZWN0aW9uRXJyb3JzL1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBArbAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0JhY2tlbmRDb25uZWN0aW9uRXJyb3JzL1N1bRJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTJLVGhlIGNvdW50IG9mIGZhaWxlZCBjb25uZWN0aW9ucyBiZXR3ZWVuIHRoZSBFTEIgYW5kIGl0cyBiYWNrLWVuZCBpbnN0YW5jZXMuOhFDb25uZWN0aW9uIGVycm9yc0IyYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9CYWNrZW5kQ29ubmVjdGlvbkVycm9ycy9TdW1SCwgEEgIIPBoDCNgECtcCCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSFRUUENvZGVfQmFja2VuZF8yWFgvU2FtcGxlQ291bnQSSAoQQXZhaWxhYmlsaXR5Wm9uZRo0VGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSB0byByZXR1cm4gbWV0cmljIGRhdGEgZm9yLhgCIAMqATEyNlRoZSBjb3VudCBvZiAyWFggKEhUVFApIGJhY2stZW5kIGluc3RhbmNlIGVycm9yIGNvZGVzLjoYU2FtcGxlcyBvZiAyeHggcmVzcG9uc2VzQjdhd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hUVFBDb2RlX0JhY2tlbmRfMlhYL1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBAq8AgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hUVFBDb2RlX0JhY2tlbmRfMlhYL1N1bRJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTI2VGhlIGNvdW50IG9mIDJYWCAoSFRUUCkgYmFjay1lbmQgaW5zdGFuY2UgZXJyb3IgY29kZXMuOg0yeHggcmVzcG9uc2VzQi9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hUVFBDb2RlX0JhY2tlbmRfMlhYL1N1bVILCAQSAgg8GgMI2AQK1wIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9IVFRQQ29kZV9CYWNrZW5kXzNYWC9TYW1wbGVDb3VudBJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTI2VGhlIGNvdW50IG9mIDNYWCAoSFRUUCkgYmFjay1lbmQgaW5zdGFuY2UgZXJyb3IgY29kZXMuOhhTYW1wbGVzIG9mIDN4eCByZXNwb25zZXNCN2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSFRUUENvZGVfQmFja2VuZF8zWFgvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECrwCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSFRUUENvZGVfQmFja2VuZF8zWFgvU3VtEkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YAiADKgExMjZUaGUgY291bnQgb2YgM1hYIChIVFRQKSBiYWNrLWVuZCBpbnN0YW5jZSBlcnJvciBjb2Rlcy46DTN4eCByZXNwb25zZXNCL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSFRUUENvZGVfQmFja2VuZF8zWFgvU3VtUgsIBBICCDwaAwjYBArXAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hUVFBDb2RlX0JhY2tlbmRfNFhYL1NhbXBsZUNvdW50EkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YAiADKgExMjZUaGUgY291bnQgb2YgNFhYIChIVFRQKSBiYWNrLWVuZCBpbnN0YW5jZSBlcnJvciBjb2Rlcy46GFNhbXBsZXMgb2YgNHh4IHJlc3BvbnNlc0I3YXdzLmdvb2dsZWFwaXMuY29tL0VMQi9IVFRQQ29kZV9CYWNrZW5kXzRYWC9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKvAIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9IVFRQQ29kZV9CYWNrZW5kXzRYWC9TdW0SSAoQQXZhaWxhYmlsaXR5Wm9uZRo0VGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSB0byByZXR1cm4gbWV0cmljIGRhdGEgZm9yLhgCIAMqATEyNlRoZSBjb3VudCBvZiA0WFggKEhUVFApIGJhY2stZW5kIGluc3RhbmNlIGVycm9yIGNvZGVzLjoNNHh4IHJlc3BvbnNlc0IvYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9IVFRQQ29kZV9CYWNrZW5kXzRYWC9TdW1SCwgEEgIIPBoDCNgECtcCCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSFRUUENvZGVfQmFja2VuZF81WFgvU2FtcGxlQ291bnQSSAoQQXZhaWxhYmlsaXR5Wm9uZRo0VGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSB0byByZXR1cm4gbWV0cmljIGRhdGEgZm9yLhgCIAMqATEyNlRoZSBjb3VudCBvZiA1WFggKEhUVFApIGJhY2stZW5kIGluc3RhbmNlIGVycm9yIGNvZGVzLjoYU2FtcGxlcyBvZiA1eHggcmVzcG9uc2VzQjdhd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hUVFBDb2RlX0JhY2tlbmRfNVhYL1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBAq8AgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hUVFBDb2RlX0JhY2tlbmRfNVhYL1N1bRJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTI2VGhlIGNvdW50IG9mIDVYWCAoSFRUUCkgYmFjay1lbmQgaW5zdGFuY2UgZXJyb3IgY29kZXMuOg01eHggcmVzcG9uc2VzQi9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hUVFBDb2RlX0JhY2tlbmRfNVhYL1N1bVILCAQSAgg8GgMI2AQKwgIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9IVFRQQ29kZV9FTEJfNFhYL1NhbXBsZUNvdW50EkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YAiADKgExMihUaGUgY291bnQgb2YgNFhYIChIVFRQKSBFTEIgZXJyb3IgY29kZXMuOhlTYW1wbGVzIG9mIDR4eCBFTEIgZXJyb3JzQjNhd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hUVFBDb2RlX0VMQl80WFgvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECqcCCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSFRUUENvZGVfRUxCXzRYWC9TdW0SSAoQQXZhaWxhYmlsaXR5Wm9uZRo0VGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSB0byByZXR1cm4gbWV0cmljIGRhdGEgZm9yLhgCIAMqATEyKFRoZSBjb3VudCBvZiA0WFggKEhUVFApIEVMQiBlcnJvciBjb2Rlcy46DjR4eCBFTEIgZXJyb3JzQithd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hUVFBDb2RlX0VMQl80WFgvU3VtUgsIBBICCDwaAwjYBArCAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hUVFBDb2RlX0VMQl81WFgvU2FtcGxlQ291bnQSSAoQQXZhaWxhYmlsaXR5Wm9uZRo0VGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSB0byByZXR1cm4gbWV0cmljIGRhdGEgZm9yLhgCIAMqATEyKFRoZSBjb3VudCBvZiA1WFggKEhUVFApIEVMQiBlcnJvciBjb2Rlcy46GVNhbXBsZXMgb2YgNXh4IEVMQiBlcnJvcnNCM2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSFRUUENvZGVfRUxCXzVYWC9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKpwIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9IVFRQQ29kZV9FTEJfNVhYL1N1bRJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTIoVGhlIGNvdW50IG9mIDVYWCAoSFRUUCkgRUxCIGVycm9yIGNvZGVzLjoONXh4IEVMQiBlcnJvcnNCK2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSFRUUENvZGVfRUxCXzVYWC9TdW1SCwgEEgIIPBoDCNgECssCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSGVhbHRoeUhvc3RDb3VudC9BdmVyYWdlEkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YASADKgExMj1UaGUgY291bnQgb2YgdGhlIG51bWJlciBvZiBoZWFsdGh5IGluc3RhbmNlcyBpbiB0aGUgYmFsYW5jZXIuOhVBdmVyYWdlIGhlYWx0aHkgaG9zdHNCL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSGVhbHRoeUhvc3RDb3VudC9BdmVyYWdlUgsIBBICCDwaAwjYBArLAgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hlYWx0aHlIb3N0Q291bnQvTWF4aW11bRJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAEgAyoBMTI9VGhlIGNvdW50IG9mIHRoZSBudW1iZXIgb2YgaGVhbHRoeSBpbnN0YW5jZXMgaW4gdGhlIGJhbGFuY2VyLjoVTWF4aW11bSBoZWFsdGh5IGhvc3RzQi9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hlYWx0aHlIb3N0Q291bnQvTWF4aW11bVILCAQSAgg8GgMI2AQKywIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9IZWFsdGh5SG9zdENvdW50L01pbmltdW0SSAoQQXZhaWxhYmlsaXR5Wm9uZRo0VGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSB0byByZXR1cm4gbWV0cmljIGRhdGEgZm9yLhgBIAMqATEyPVRoZSBjb3VudCBvZiB0aGUgbnVtYmVyIG9mIGhlYWx0aHkgaW5zdGFuY2VzIGluIHRoZSBiYWxhbmNlci46FU1pbmltdW0gaGVhbHRoeSBob3N0c0IvYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9IZWFsdGh5SG9zdENvdW50L01pbmltdW1SCwgEEgIIPBoDCNgECtYCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSGVhbHRoeUhvc3RDb3VudC9TYW1wbGVDb3VudBJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTI9VGhlIGNvdW50IG9mIHRoZSBudW1iZXIgb2YgaGVhbHRoeSBpbnN0YW5jZXMgaW4gdGhlIGJhbGFuY2VyLjoYU2FtcGxlcyBvZiBoZWFsdGh5IGhvc3RzQjNhd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hlYWx0aHlIb3N0Q291bnQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECrsCCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSGVhbHRoeUhvc3RDb3VudC9TdW0SSAoQQXZhaWxhYmlsaXR5Wm9uZRo0VGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSB0byByZXR1cm4gbWV0cmljIGRhdGEgZm9yLhgCIAMqATEyPVRoZSBjb3VudCBvZiB0aGUgbnVtYmVyIG9mIGhlYWx0aHkgaW5zdGFuY2VzIGluIHRoZSBiYWxhbmNlci46DUhlYWx0aHkgaG9zdHNCK2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSGVhbHRoeUhvc3RDb3VudC9TdW1SCwgEEgIIPBoDCNgECqkCCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSG9zdHNJblNlcnZpY2UvQXZlcmFnZRJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAEgAyoBMTIeQ291bnQgb2YgdGhlIGhvc3RzIGluIHNlcnZpY2UuOhZBdmVyYWdlIGluY2x1ZGVkIGhvc3RzQi1hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hvc3RzSW5TZXJ2aWNlL0F2ZXJhZ2VSCwgEEgIIPBoDCNgECpkCCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSG9zdHNJblNlcnZpY2UvU3VtEkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YAiADKgExMh5Db3VudCBvZiB0aGUgaG9zdHMgaW4gc2VydmljZS46DkluY2x1ZGVkIGhvc3RzQilhd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hvc3RzSW5TZXJ2aWNlL1N1bVILCAQSAgg8GgMI2AQKswIKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9Ib3N0c091dE9mU2VydmljZS9BdmVyYWdlEkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YASADKgExMiJDb3VudCBvZiB0aGUgaG9zdHMgb3V0IG9mIHNlcnZpY2UuOhZBdmVyYWdlIGV4Y2x1ZGVkIGhvc3RzQjBhd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0hvc3RzT3V0T2ZTZXJ2aWNlL0F2ZXJhZ2VSCwgEEgIIPBoDCNgECqMCCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvSG9zdHNPdXRPZlNlcnZpY2UvU3VtEkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YAiADKgExMiJDb3VudCBvZiB0aGUgaG9zdHMgb3V0IG9mIHNlcnZpY2UuOg5FeGNsdWRlZCBob3N0c0IsYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9Ib3N0c091dE9mU2VydmljZS9TdW1SCwgEEgIIPBoDCNgECtACCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvTGF0ZW5jeS9BdmVyYWdlEkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YASADKgFzMlJUaW1lIGJldHdlZW4gd2hlbiB0aGUgcmVxdWVzdCBsZWF2ZXMgdGhlIGxvYWQgYmFsYW5jZXIgYW5kIGEgcmVzcG9uc2UgaXMgcmV0dXJuZWQuOhdBdmVyYWdlIHJlcXVlc3QgbGF0ZW5jeUImYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9MYXRlbmN5L0F2ZXJhZ2VSCwgEEgIIPBoDCNgECtACCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvTGF0ZW5jeS9NYXhpbXVtEkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YASADKgFzMlJUaW1lIGJldHdlZW4gd2hlbiB0aGUgcmVxdWVzdCBsZWF2ZXMgdGhlIGxvYWQgYmFsYW5jZXIgYW5kIGEgcmVzcG9uc2UgaXMgcmV0dXJuZWQuOhdNYXhpbXVtIHJlcXVlc3QgbGF0ZW5jeUImYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9MYXRlbmN5L01heGltdW1SCwgEEgIIPBoDCNgECtACCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvTGF0ZW5jeS9NaW5pbXVtEkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YASADKgFzMlJUaW1lIGJldHdlZW4gd2hlbiB0aGUgcmVxdWVzdCBsZWF2ZXMgdGhlIGxvYWQgYmFsYW5jZXIgYW5kIGEgcmVzcG9uc2UgaXMgcmV0dXJuZWQuOhdNaW5pbXVtIHJlcXVlc3QgbGF0ZW5jeUImYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9MYXRlbmN5L01pbmltdW1SCwgEEgIIPBoDCNgECtsCCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvTGF0ZW5jeS9TYW1wbGVDb3VudBJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTJSVGltZSBiZXR3ZWVuIHdoZW4gdGhlIHJlcXVlc3QgbGVhdmVzIHRoZSBsb2FkIGJhbGFuY2VyIGFuZCBhIHJlc3BvbnNlIGlzIHJldHVybmVkLjoaU2FtcGxlcyBvZiByZXF1ZXN0IGxhdGVuY3lCKmF3cy5nb29nbGVhcGlzLmNvbS9FTEIvTGF0ZW5jeS9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKwAIKV3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9MYXRlbmN5L1N1bRJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBczJSVGltZSBiZXR3ZWVuIHdoZW4gdGhlIHJlcXVlc3QgbGVhdmVzIHRoZSBsb2FkIGJhbGFuY2VyIGFuZCBhIHJlc3BvbnNlIGlzIHJldHVybmVkLjoPUmVxdWVzdCBsYXRlbmN5QiJhd3MuZ29vZ2xlYXBpcy5jb20vRUxCL0xhdGVuY3kvU3VtUgsIBBICCDwaAwjYBArZAgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1JlcXVlc3RDb3VudC9TYW1wbGVDb3VudBJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTJBQ291bnQgb2YgcmVxdWVzdHMgc3VjY2Vzc2Z1bGx5IHRyYW5zbWl0dGVkIHRvIGJhY2stZW5kIGluc3RhbmNlcy46H1NhbXBsZXMgb2YgdHJhbnNtaXR0ZWQgcmVxdWVzdHNCL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvUmVxdWVzdENvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBAq+AgpccHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1JlcXVlc3RDb3VudC9TdW0SSAoQQXZhaWxhYmlsaXR5Wm9uZRo0VGhlIEFXUyBBdmFpbGFiaWxpdHkgWm9uZSB0byByZXR1cm4gbWV0cmljIGRhdGEgZm9yLhgCIAMqATEyQUNvdW50IG9mIHJlcXVlc3RzIHN1Y2Nlc3NmdWxseSB0cmFuc21pdHRlZCB0byBiYWNrLWVuZCBpbnN0YW5jZXMuOhRUcmFuc21pdHRlZCByZXF1ZXN0c0InYXdzLmdvb2dsZWFwaXMuY29tL0VMQi9SZXF1ZXN0Q291bnQvU3VtUgsIBBICCDwaAwjYBArZAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1NwaWxsb3ZlckNvdW50L1NhbXBsZUNvdW50EkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YAiADKgExMj9UaGUgY291bnQgb2YgcmVxdWVzdHMgcmVmdXNlZCBvbmNlIHRoZSBxdWV1ZSByZWFjaGVzIGl0cyBsaW1pdC46HVNhbXBsZXMgb2Ygc3BpbGxvdmVyIHJlcXVlc3RzQjFhd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1NwaWxsb3ZlckNvdW50L1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBAq+AgpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1NwaWxsb3ZlckNvdW50L1N1bRJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTI/VGhlIGNvdW50IG9mIHJlcXVlc3RzIHJlZnVzZWQgb25jZSB0aGUgcXVldWUgcmVhY2hlcyBpdHMgbGltaXQuOhJTcGlsbG92ZXIgcmVxdWVzdHNCKWF3cy5nb29nbGVhcGlzLmNvbS9FTEIvU3BpbGxvdmVyQ291bnQvU3VtUgsIBBICCDwaAwjYBArTAgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1N1cmdlUXVldWVMZW5ndGgvTWF4aW11bRJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAEgAyoBMTJGVGhlIGNvdW50IG9mIHF1ZXVlZCByZXF1ZXN0cyB3YWl0aW5nIHRvIGJlIHNlbnQgdG8gYmFjay1lbmQgaW5zdGFuY2VzLjoUTWF4aW11bSBxdWV1ZSBsZW5ndGhCL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvU3VyZ2VRdWV1ZUxlbmd0aC9NYXhpbXVtUgsIBBICCDwaAwjYBArTAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1VuSGVhbHRoeUhvc3RDb3VudC9BdmVyYWdlEkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YASADKgExMj9UaGUgY291bnQgb2YgdGhlIG51bWJlciBvZiB1bmhlYWx0aHkgaW5zdGFuY2VzIGluIHRoZSBiYWxhbmNlci46F0F2ZXJhZ2UgdW5oZWFsdGh5IGhvc3RzQjFhd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1VuSGVhbHRoeUhvc3RDb3VudC9BdmVyYWdlUgsIBBICCDwaAwjYBArTAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1VuSGVhbHRoeUhvc3RDb3VudC9NYXhpbXVtEkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YASADKgExMj9UaGUgY291bnQgb2YgdGhlIG51bWJlciBvZiB1bmhlYWx0aHkgaW5zdGFuY2VzIGluIHRoZSBiYWxhbmNlci46F01heGltdW0gdW5oZWFsdGh5IGhvc3RzQjFhd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1VuSGVhbHRoeUhvc3RDb3VudC9NYXhpbXVtUgsIBBICCDwaAwjYBArTAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1VuSGVhbHRoeUhvc3RDb3VudC9NaW5pbXVtEkgKEEF2YWlsYWJpbGl0eVpvbmUaNFRoZSBBV1MgQXZhaWxhYmlsaXR5IFpvbmUgdG8gcmV0dXJuIG1ldHJpYyBkYXRhIGZvci4YASADKgExMj9UaGUgY291bnQgb2YgdGhlIG51bWJlciBvZiB1bmhlYWx0aHkgaW5zdGFuY2VzIGluIHRoZSBiYWxhbmNlci46F01pbmltdW0gdW5oZWFsdGh5IGhvc3RzQjFhd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1VuSGVhbHRoeUhvc3RDb3VudC9NaW5pbXVtUgsIBBICCDwaAwjYBAreAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRUxCL1VuSGVhbHRoeUhvc3RDb3VudC9TYW1wbGVDb3VudBJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTI/VGhlIGNvdW50IG9mIHRoZSBudW1iZXIgb2YgdW5oZWFsdGh5IGluc3RhbmNlcyBpbiB0aGUgYmFsYW5jZXIuOhpTYW1wbGVzIG9mIHVuaGVhbHRoeSBob3N0c0I1YXdzLmdvb2dsZWFwaXMuY29tL0VMQi9VbkhlYWx0aHlIb3N0Q291bnQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECsMCCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FTEIvVW5IZWFsdGh5SG9zdENvdW50L1N1bRJIChBBdmFpbGFiaWxpdHlab25lGjRUaGUgQVdTIEF2YWlsYWJpbGl0eSBab25lIHRvIHJldHVybiBtZXRyaWMgZGF0YSBmb3IuGAIgAyoBMTI/VGhlIGNvdW50IG9mIHRoZSBudW1iZXIgb2YgdW5oZWFsdGh5IGluc3RhbmNlcyBpbiB0aGUgYmFsYW5jZXIuOg9VbmhlYWx0aHkgaG9zdHNCLWF3cy5nb29nbGVhcGlzLmNvbS9FTEIvVW5IZWFsdGh5SG9zdENvdW50L1N1bVILCAQSAgg8GgMI2AQKkAMKgwFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9BdmVyYWdlQnl0ZXNVc2VkRm9yQ2FjaGVJdGVtc1BlcmNlbnRhZ2UvQXZlcmFnZRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqASUyLUF2ZXJhZ2UgcGVyY2VudCBvZiBieXRlcyB1c2VkIGZvciBjYWNoZSBpdGVtczonQXZlcmFnZSBtZW1vcnkgdXNlZCBmb3IgTWVtY2FjaGVkIGNhY2hlQk5hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQXZlcmFnZUJ5dGVzVXNlZEZvckNhY2hlSXRlbXNQZXJjZW50YWdlL0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCvsCCn5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9BdmVyYWdlQnl0ZXNVc2VkRm9yQ2FjaGVQZXJjZW50YWdlL0F2ZXJhZ2USTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgElMidBdmVyYWdlIHBlcmNlbnQgb2YgYnl0ZXMgdXNlZCBmb3IgY2FjaGU6I0F2ZXJhZ2UgbWVtb3J5IHVzZWQgZm9yIFJlZGlzIGNhY2hlQklhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQXZlcmFnZUJ5dGVzVXNlZEZvckNhY2hlUGVyY2VudGFnZS9BdmVyYWdlUgsIBBICCDwaAwiwCQrkAgp7cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQXZlcmFnZUZyZWVhYmxlTWVtb3J5UGVyY2VudGFnZS9BdmVyYWdlEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoBJTIiQXZlcmFnZSBwZXJjZW50IG9mIGZyZWVhYmxlIG1lbW9yeToXQXZlcmFnZSBmcmVlYWJsZSBtZW1vcnlCRmF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9BdmVyYWdlRnJlZWFibGVNZW1vcnlQZXJjZW50YWdlL0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCtwCCnlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9BdmVyYWdlVW51c2VkTWVtb3J5UGVyY2VudGFnZS9BdmVyYWdlEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoBJTIgQXZlcmFnZSBwZXJjZW50IG9mIHVudXNlZCBtZW1vcnk6FUF2ZXJhZ2UgdW51c2VkIG1lbW9yeUJEYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0F2ZXJhZ2VVbnVzZWRNZW1vcnlQZXJjZW50YWdlL0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCs8CCnJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1JlYWRJbnRvTWVtY2FjaGVkL0F2ZXJhZ2USTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgJCeTIWRGF0YSByZWFkIGJ5IE1lbWNhY2hlZDofQXZlcmFnZSBieXRlcyByZWFkIGJ5IE1lbWNhY2hlZEI9YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzUmVhZEludG9NZW1jYWNoZWQvQXZlcmFnZVILCAQSAgg8GgMIsAkKzwIKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzUmVhZEludG9NZW1jYWNoZWQvTWF4aW11bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5MhZEYXRhIHJlYWQgYnkgTWVtY2FjaGVkOh9NYXhpbXVtIGJ5dGVzIHJlYWQgYnkgTWVtY2FjaGVkQj1hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNSZWFkSW50b01lbWNhY2hlZC9NYXhpbXVtUgsIBBICCDwaAwiwCQrPAgpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNSZWFkSW50b01lbWNhY2hlZC9NaW5pbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoCQnkyFkRhdGEgcmVhZCBieSBNZW1jYWNoZWQ6H01pbmltdW0gYnl0ZXMgcmVhZCBieSBNZW1jYWNoZWRCPWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1JlYWRJbnRvTWVtY2FjaGVkL01pbmltdW1SCwgEEgIIPBoDCLAJCtkCCnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1JlYWRJbnRvTWVtY2FjaGVkL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIWRGF0YSByZWFkIGJ5IE1lbWNhY2hlZDoiU2FtcGxlcyBvZiBieXRlcyByZWFkIGJ5IE1lbWNhY2hlZEJBYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzUmVhZEludG9NZW1jYWNoZWQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCr8CCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1JlYWRJbnRvTWVtY2FjaGVkL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqAkJ5MhZEYXRhIHJlYWQgYnkgTWVtY2FjaGVkOhdCeXRlcyByZWFkIGJ5IE1lbWNhY2hlZEI5YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzUmVhZEludG9NZW1jYWNoZWQvU3VtUgsIBBICCDwaAwiwCQrGAgptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNVc2VkRm9yQ2FjaGUvQXZlcmFnZRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5Mh5TcGFjZSByZXF1aXJlZCBmb3IgUmVkaXMgY2FjaGU6GEF2ZXJhZ2UgUmVkaXMgY2FjaGUgc2l6ZUI4YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlL0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCsYCCm1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1VzZWRGb3JDYWNoZS9NYXhpbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoCQnkyHlNwYWNlIHJlcXVpcmVkIGZvciBSZWRpcyBjYWNoZToYTWF4aW11bSBSZWRpcyBjYWNoZSBzaXplQjhhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNVc2VkRm9yQ2FjaGUvTWF4aW11bVILCAQSAgg8GgMIsAkKxgIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlL01pbmltdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgJCeTIeU3BhY2UgcmVxdWlyZWQgZm9yIFJlZGlzIGNhY2hlOhhNaW5pbXVtIFJlZGlzIGNhY2hlIHNpemVCOGF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1VzZWRGb3JDYWNoZS9NaW5pbXVtUgsIBBICCDwaAwiwCQrQAgpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNVc2VkRm9yQ2FjaGUvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMh5TcGFjZSByZXF1aXJlZCBmb3IgUmVkaXMgY2FjaGU6G1NhbXBsZXMgb2YgUmVkaXMgY2FjaGUgc2l6ZUI8YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQq2AgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNVc2VkRm9yQ2FjaGUvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoCQnkyHlNwYWNlIHJlcXVpcmVkIGZvciBSZWRpcyBjYWNoZToQUmVkaXMgY2FjaGUgc2l6ZUI0YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlL1N1bVILCAQSAgg8GgMIsAkK6AIKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlSXRlbXMvQXZlcmFnZRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5MjJTdG9yYWdlIHNwYWNlIGluIGJ5dGVzIHJlcXVpcmVkIGJ5IGNhY2hlIHJlc291cmNlczocQXZlcmFnZSBNZW1jYWNoZWQgY2FjaGUgc2l6ZUI9YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlSXRlbXMvQXZlcmFnZVILCAQSAgg8GgMIsAkK6AIKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlSXRlbXMvTWF4aW11bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5MjJTdG9yYWdlIHNwYWNlIGluIGJ5dGVzIHJlcXVpcmVkIGJ5IGNhY2hlIHJlc291cmNlczocTWF4aW11bSBNZW1jYWNoZWQgY2FjaGUgc2l6ZUI9YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlSXRlbXMvTWF4aW11bVILCAQSAgg8GgMIsAkK6AIKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlSXRlbXMvTWluaW11bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5MjJTdG9yYWdlIHNwYWNlIGluIGJ5dGVzIHJlcXVpcmVkIGJ5IGNhY2hlIHJlc291cmNlczocTWluaW11bSBNZW1jYWNoZWQgY2FjaGUgc2l6ZUI9YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlSXRlbXMvTWluaW11bVILCAQSAgg8GgMIsAkK8gIKdnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlSXRlbXMvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMjJTdG9yYWdlIHNwYWNlIGluIGJ5dGVzIHJlcXVpcmVkIGJ5IGNhY2hlIHJlc291cmNlczofU2FtcGxlcyBvZiBNZW1jYWNoZWQgY2FjaGUgc2l6ZUJBYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckNhY2hlSXRlbXMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCtgCCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1VzZWRGb3JDYWNoZUl0ZW1zL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqAkJ5MjJTdG9yYWdlIHNwYWNlIGluIGJ5dGVzIHJlcXVpcmVkIGJ5IGNhY2hlIHJlc291cmNlczoUTWVtY2FjaGVkIGNhY2hlIHNpemVCOWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1VzZWRGb3JDYWNoZUl0ZW1zL1N1bVILCAQSAgg8GgMIsAkKyQIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckhhc2gvQXZlcmFnZRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5MiNTcGFjZSB0YWtlbiBpbiBieXRlcyBieSBoYXNoIHRhYmxlczoYQXZlcmFnZSBoYXNoIHRhYmxlcyBzaXplQjdhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNVc2VkRm9ySGFzaC9BdmVyYWdlUgsIBBICCDwaAwiwCQrJAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNVc2VkRm9ySGFzaC9NYXhpbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoCQnkyI1NwYWNlIHRha2VuIGluIGJ5dGVzIGJ5IGhhc2ggdGFibGVzOhhNYXhpbXVtIGhhc2ggdGFibGVzIHNpemVCN2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1VzZWRGb3JIYXNoL01heGltdW1SCwgEEgIIPBoDCLAJCskCCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1VzZWRGb3JIYXNoL01pbmltdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgJCeTIjU3BhY2UgdGFrZW4gaW4gYnl0ZXMgYnkgaGFzaCB0YWJsZXM6GE1pbmltdW0gaGFzaCB0YWJsZXMgc2l6ZUI3YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckhhc2gvTWluaW11bVILCAQSAgg8GgMIsAkK0wIKcHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckhhc2gvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMiNTcGFjZSB0YWtlbiBpbiBieXRlcyBieSBoYXNoIHRhYmxlczobU2FtcGxlcyBvZiBoYXNoIHRhYmxlcyBzaXplQjthd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNVc2VkRm9ySGFzaC9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKuQIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzVXNlZEZvckhhc2gvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoCQnkyI1NwYWNlIHRha2VuIGluIGJ5dGVzIGJ5IGhhc2ggdGFibGVzOhBIYXNoIHRhYmxlcyBzaXplQjNhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNVc2VkRm9ySGFzaC9TdW1SCwgEEgIIPBoDCLAJCuECCnhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1dyaXR0ZW5PdXRGcm9tTWVtY2FjaGVkL0F2ZXJhZ2USTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgJCeTIZRGF0YSB3cml0dGVuIGJ5IE1lbWNhY2hlZDoiQXZlcmFnZSBieXRlcyB3cml0dGVuIGJ5IE1lbWNhY2hlZEJDYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzV3JpdHRlbk91dEZyb21NZW1jYWNoZWQvQXZlcmFnZVILCAQSAgg8GgMIsAkK4QIKeHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0J5dGVzV3JpdHRlbk91dEZyb21NZW1jYWNoZWQvTWF4aW11bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5MhlEYXRhIHdyaXR0ZW4gYnkgTWVtY2FjaGVkOiJNYXhpbXVtIGJ5dGVzIHdyaXR0ZW4gYnkgTWVtY2FjaGVkQkNhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNXcml0dGVuT3V0RnJvbU1lbWNhY2hlZC9NYXhpbXVtUgsIBBICCDwaAwiwCQrhAgp4cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNXcml0dGVuT3V0RnJvbU1lbWNhY2hlZC9NaW5pbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoCQnkyGURhdGEgd3JpdHRlbiBieSBNZW1jYWNoZWQ6Ik1pbmltdW0gYnl0ZXMgd3JpdHRlbiBieSBNZW1jYWNoZWRCQ2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1dyaXR0ZW5PdXRGcm9tTWVtY2FjaGVkL01pbmltdW1SCwgEEgIIPBoDCLAJCuwCCnxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1dyaXR0ZW5PdXRGcm9tTWVtY2FjaGVkL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoCQnkyGURhdGEgd3JpdHRlbiBieSBNZW1jYWNoZWQ6JVNhbXBsZXMgb2YgYnl0ZXMgd3JpdHRlbiBieSBNZW1jYWNoZWRCR2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1dyaXR0ZW5PdXRGcm9tTWVtY2FjaGVkL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrRAgp0cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQnl0ZXNXcml0dGVuT3V0RnJvbU1lbWNhY2hlZC9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgJCeTIZRGF0YSB3cml0dGVuIGJ5IE1lbWNhY2hlZDoaQnl0ZXMgd3JpdHRlbiBieSBNZW1jYWNoZWRCP2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9CeXRlc1dyaXR0ZW5PdXRGcm9tTWVtY2FjaGVkL1N1bVILCAQSAgg8GgMIsAkKswIKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NQVVV0aWxpemF0aW9uL0F2ZXJhZ2USTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgElMhpDUFUgdXNlZCBieSB0aGUgY2FjaGUgbm9kZToQQXZlcmFnZSBDUFUgdXNlZEI1YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NQVVV0aWxpemF0aW9uL0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCrMCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DUFVVdGlsaXphdGlvbi9NYXhpbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoBJTIaQ1BVIHVzZWQgYnkgdGhlIGNhY2hlIG5vZGU6EE1heGltdW0gQ1BVIHVzZWRCNWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DUFVVdGlsaXphdGlvbi9NYXhpbXVtUgsIBBICCDwaAwiwCQqzAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ1BVVXRpbGl6YXRpb24vTWluaW11bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqASUyGkNQVSB1c2VkIGJ5IHRoZSBjYWNoZSBub2RlOhBNaW5pbXVtIENQVSB1c2VkQjVhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ1BVVXRpbGl6YXRpb24vTWluaW11bVILCAQSAgg8GgMIsAkKvgIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NQVVV0aWxpemF0aW9uL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIaQ1BVIHVzZWQgYnkgdGhlIGNhY2hlIG5vZGU6E1NhbXBsZXMgb2YgQ1BVIHVzZWRCOWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DUFVVdGlsaXphdGlvbi9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKowIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NQVVV0aWxpemF0aW9uL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqASUyGkNQVSB1c2VkIGJ5IHRoZSBjYWNoZSBub2RlOghDUFUgdXNlZEIxYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NQVVV0aWxpemF0aW9uL1N1bVILCAQSAgg8GgMIsAkKpgIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NhY2hlSGl0cy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyCkNhY2hlIGhpdHM6FVNhbXBsZXMgb2YgY2FjaGUgaGl0c0I0YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NhY2hlSGl0cy9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKiwIKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NhY2hlSGl0cy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMgpDYWNoZSBoaXRzOgpDYWNoZSBoaXRzQixhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ2FjaGVIaXRzL1N1bVILCAQSAgg8GgMIsAkKrgIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NhY2hlTWlzc2VzL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIMQ2FjaGUgbWlzc2VzOhdTYW1wbGVzIG9mIGNhY2hlIG1pc3Nlc0I2YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NhY2hlTWlzc2VzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqTAgpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ2FjaGVNaXNzZXMvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIMQ2FjaGUgbWlzc2VzOgxDYWNoZSBtaXNzZXNCLmF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DYWNoZU1pc3Nlcy9TdW1SCwgEEgIIPBoDCLAJCuMCCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DYXNCYWR2YWwvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMkVUaGUgbnVtYmVyIG9mIGNoZWNrLWFuZC1zZXQgcmVxdWVzdHMgcmVjZWl2ZWQgd2hlcmUgdGhlIGNoZWNrIGZhaWxlZC46F1NhbXBsZXMgb2YgQ0FTIGZhaWx1cmVzQjRhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ2FzQmFkdmFsL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrIAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ2FzQmFkdmFsL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyRVRoZSBudW1iZXIgb2YgY2hlY2stYW5kLXNldCByZXF1ZXN0cyByZWNlaXZlZCB3aGVyZSB0aGUgY2hlY2sgZmFpbGVkLjoMQ0FTIGZhaWx1cmVzQixhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ2FzQmFkdmFsL1N1bVILCAQSAgg8GgMIsAkK6AIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0Nhc0hpdHMvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMk1UaGUgbnVtYmVyIG9mIGNoZWNrLWFuZC1zZXQgcmVxdWVzdHMgcmVjZWl2ZWQgd2hlcmUgdGhlIGNoZWNrIHdhcyBzdWNjZXNzZnVsLjoYU2FtcGxlcyBvZiBDQVMgc3VjY2Vzc2VzQjJhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ2FzSGl0cy9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKzQIKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0Nhc0hpdHMvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTJNVGhlIG51bWJlciBvZiBjaGVjay1hbmQtc2V0IHJlcXVlc3RzIHJlY2VpdmVkIHdoZXJlIHRoZSBjaGVjayB3YXMgc3VjY2Vzc2Z1bC46DUNBUyBzdWNjZXNzZXNCKmF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DYXNIaXRzL1N1bVILCAQSAgg8GgMIsAkK5AIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0Nhc01pc3Nlcy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEySFRoZSBudW1iZXIgb2YgY2hlY2stYW5kLXNldCByZXF1ZXN0cyByZWNlaXZlZCB3aGVyZSB0aGUga2V5IHdhcyBtaXNzaW5nLjoVU2FtcGxlcyBvZiBDQVMgbWlzc2VzQjRhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ2FzTWlzc2VzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrJAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ2FzTWlzc2VzL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEySFRoZSBudW1iZXIgb2YgY2hlY2stYW5kLXNldCByZXF1ZXN0cyByZWNlaXZlZCB3aGVyZSB0aGUga2V5IHdhcyBtaXNzaW5nLjoKQ0FTIG1pc3Nlc0IsYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0Nhc01pc3Nlcy9TdW1SCwgEEgIIPBoDCLAJCsMCCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DbWRDb25maWdHZXQvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMhtDb3VudCBvZiAnY29uZmlnIGdldCcgY2FsbHM6G1NhbXBsZXMgb2YgY29uZmlnIGdldCBjYWxsc0I3YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NtZENvbmZpZ0dldC9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKqAIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NtZENvbmZpZ0dldC9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMhtDb3VudCBvZiAnY29uZmlnIGdldCcgY2FsbHM6EENvbmZpZyBnZXQgY2FsbHNCL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DbWRDb25maWdHZXQvU3VtUgsIBBICCDwaAwiwCQrDAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ21kQ29uZmlnU2V0L1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIbQ291bnQgb2YgJ2NvbmZpZyBzZXQnIGNhbGxzOhtTYW1wbGVzIG9mIGNvbmZpZyBzZXQgY2FsbHNCN2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DbWRDb25maWdTZXQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCqgCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DbWRDb25maWdTZXQvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIbQ291bnQgb2YgJ2NvbmZpZyBzZXQnIGNhbGxzOhBDb25maWcgc2V0IGNhbGxzQi9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ21kQ29uZmlnU2V0L1N1bVILCAQSAgg8GgMIsAkKrwIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NtZEZsdXNoL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIUQ291bnQgb2YgZmx1c2ggY2FsbHM6FlNhbXBsZXMgb2YgZmx1c2ggY2FsbHNCM2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DbWRGbHVzaC9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKlAIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NtZEZsdXNoL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyFENvdW50IG9mIGZsdXNoIGNhbGxzOgtGbHVzaCBjYWxsc0IrYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NtZEZsdXNoL1N1bVILCAQSAgg8GgMIsAkKpwIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NtZEdldC9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyEkNvdW50IG9mIGdldCBjYWxsczoUU2FtcGxlcyBvZiBnZXQgY2FsbHNCMWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DbWRHZXQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCowCCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DbWRHZXQvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTISQ291bnQgb2YgZ2V0IGNhbGxzOglHZXQgY2FsbHNCKWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DbWRHZXQvU3VtUgsIBBICCDwaAwiwCQqnAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ21kU2V0L1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTISQ291bnQgb2Ygc2V0IGNhbGxzOhRTYW1wbGVzIG9mIHNldCBjYWxsc0IxYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NtZFNldC9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKjAIKXnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NtZFNldC9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMhJDb3VudCBvZiBzZXQgY2FsbHM6CVNldCBjYWxsc0IpYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NtZFNldC9TdW1SCwgEEgIIPBoDCLAJCrECCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DbWRUb3VjaC9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyFkNvdW50IG9mICd0b3VjaCcgY2FsbHM6FlNhbXBsZXMgb2YgdG91Y2ggY2FsbHNCM2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DbWRUb3VjaC9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKlgIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0NtZFRvdWNoL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyFkNvdW50IG9mICd0b3VjaCcgY2FsbHM6C1RvdWNoIGNhbGxzQithd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ21kVG91Y2gvU3VtUgsIBBICCDwaAwiwCQqwAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ3VyckNvbmZpZy9BdmVyYWdlEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoBMTIYQ291bnQgb2YgY3VycmVudCBjb25maWdzOhdBdmVyYWdlIGN1cnJlbnQgY29uZmlnc0IxYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0N1cnJDb25maWcvQXZlcmFnZVILCAQSAgg8GgMIsAkKsAIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0N1cnJDb25maWcvTWF4aW11bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqATEyGENvdW50IG9mIGN1cnJlbnQgY29uZmlnczoXTWF4aW11bSBjdXJyZW50IGNvbmZpZ3NCMWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DdXJyQ29uZmlnL01heGltdW1SCwgEEgIIPBoDCLAJCrACCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DdXJyQ29uZmlnL01pbmltdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgExMhhDb3VudCBvZiBjdXJyZW50IGNvbmZpZ3M6F01pbmltdW0gY3VycmVudCBjb25maWdzQjFhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ3VyckNvbmZpZy9NaW5pbXVtUgsIBBICCDwaAwiwCQq7AgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ3VyckNvbmZpZy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyGENvdW50IG9mIGN1cnJlbnQgY29uZmlnczoaU2FtcGxlcyBvZiBjdXJyZW50IGNvbmZpZ3NCNWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DdXJyQ29uZmlnL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqgAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ3VyckNvbmZpZy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMhhDb3VudCBvZiBjdXJyZW50IGNvbmZpZ3M6D0N1cnJlbnQgY29uZmlnc0ItYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0N1cnJDb25maWcvU3VtUgsIBBICCDwaAwiwCQq3AgprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ3VyckNvbm5lY3Rpb25zL0F2ZXJhZ2USTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgExMhJBY3RpdmUgY29ubmVjdGlvbnM6GkF2ZXJhZ2UgYWN0aXZlIGNvbm5lY3Rpb25zQjZhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ3VyckNvbm5lY3Rpb25zL0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCrcCCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DdXJyQ29ubmVjdGlvbnMvTWF4aW11bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqATEyEkFjdGl2ZSBjb25uZWN0aW9uczoaTWF4aW11bSBhY3RpdmUgY29ubmVjdGlvbnNCNmF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DdXJyQ29ubmVjdGlvbnMvTWF4aW11bVILCAQSAgg8GgMIsAkKtwIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0N1cnJDb25uZWN0aW9ucy9NaW5pbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoBMTISQWN0aXZlIGNvbm5lY3Rpb25zOhpNaW5pbXVtIGFjdGl2ZSBjb25uZWN0aW9uc0I2YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0N1cnJDb25uZWN0aW9ucy9NaW5pbXVtUgsIBBICCDwaAwiwCQrCAgpvcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ3VyckNvbm5lY3Rpb25zL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTISQWN0aXZlIGNvbm5lY3Rpb25zOh1TYW1wbGVzIG9mIGFjdGl2ZSBjb25uZWN0aW9uc0I6YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0N1cnJDb25uZWN0aW9ucy9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKpwIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0N1cnJDb25uZWN0aW9ucy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMhJBY3RpdmUgY29ubmVjdGlvbnM6EkFjdGl2ZSBjb25uZWN0aW9uc0IyYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0N1cnJDb25uZWN0aW9ucy9TdW1SCwgEEgIIPBoDCLAJCp4CCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DdXJySXRlbXMvQXZlcmFnZRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqATEyDEl0ZW1zIGNhY2hlZDoTQXZlcmFnZSBjYWNoZSBpdGVtc0IwYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0N1cnJJdGVtcy9BdmVyYWdlUgsIBBICCDwaAwiwCQqeAgplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ3Vyckl0ZW1zL01heGltdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgExMgxJdGVtcyBjYWNoZWQ6E01heGltdW0gY2FjaGUgaXRlbXNCMGF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DdXJySXRlbXMvTWF4aW11bVILCAQSAgg8GgMIsAkKngIKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0N1cnJJdGVtcy9NaW5pbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoBMTIMSXRlbXMgY2FjaGVkOhNNaW5pbXVtIGNhY2hlIGl0ZW1zQjBhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvQ3Vyckl0ZW1zL01pbmltdW1SCwgEEgIIPBoDCLAJCqkCCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DdXJySXRlbXMvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMgxJdGVtcyBjYWNoZWQ6FlNhbXBsZXMgb2YgY2FjaGUgaXRlbXNCNGF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DdXJySXRlbXMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCo4CCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9DdXJySXRlbXMvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIMSXRlbXMgY2FjaGVkOgtDYWNoZSBpdGVtc0IsYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0N1cnJJdGVtcy9TdW1SCwgEEgIIPBoDCLAJCrsCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9EZWNySGl0cy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyHVN1Y2Nlc3NmdWwgZGVjcmVtZW50IHJlcXVlc3RzOhlTYW1wbGVzIG9mIGRlY3JlbWVudCBoaXRzQjNhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRGVjckhpdHMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCqACCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9EZWNySGl0cy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMh1TdWNjZXNzZnVsIGRlY3JlbWVudCByZXF1ZXN0czoORGVjcmVtZW50IGhpdHNCK2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9EZWNySGl0cy9TdW1SCwgEEgIIPBoDCLAJCsMCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9EZWNyTWlzc2VzL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIfVW5zdWNjZXNzZnVsIGRlY3JlbWVudCByZXF1ZXN0czobU2FtcGxlcyBvZiBkZWNyZW1lbnQgbWlzc2VzQjVhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRGVjck1pc3Nlcy9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKqAIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0RlY3JNaXNzZXMvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIfVW5zdWNjZXNzZnVsIGRlY3JlbWVudCByZXF1ZXN0czoQRGVjcmVtZW50IG1pc3Nlc0ItYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0RlY3JNaXNzZXMvU3VtUgsIBBICCDwaAwiwCQq5AgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRGVsZXRlSGl0cy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyGlN1Y2Nlc3NmdWwgZGVsZXRlIHJlcXVlc3RzOhZTYW1wbGVzIG9mIGRlbGV0ZSBoaXRzQjVhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRGVsZXRlSGl0cy9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKngIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0RlbGV0ZUhpdHMvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIaU3VjY2Vzc2Z1bCBkZWxldGUgcmVxdWVzdHM6C0RlbGV0ZSBoaXRzQi1hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRGVsZXRlSGl0cy9TdW1SCwgEEgIIPBoDCLAJCsECCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9EZWxldGVNaXNzZXMvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMhxVbnN1Y2Nlc3NmdWwgZGVsZXRlIHJlcXVlc3RzOhhTYW1wbGVzIG9mIGRlbGV0ZSBtaXNzZXNCN2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9EZWxldGVNaXNzZXMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCqYCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9EZWxldGVNaXNzZXMvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIcVW5zdWNjZXNzZnVsIGRlbGV0ZSByZXF1ZXN0czoNRGVsZXRlIG1pc3Nlc0IvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0RlbGV0ZU1pc3Nlcy9TdW1SCwgEEgIIPBoDCLAJCtACCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9FdmljdGVkVW5mZXRjaGVkL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIdVW50b3VjaGVkIExSVSBjYWNoZSBldmljdGlvbnM6HlNhbXBsZXMgb2YgdW50b3VjaGVkIGV2aWN0aW9uc0I7YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0V2aWN0ZWRVbmZldGNoZWQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCrUCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9FdmljdGVkVW5mZXRjaGVkL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyHVVudG91Y2hlZCBMUlUgY2FjaGUgZXZpY3Rpb25zOhNVbnRvdWNoZWQgZXZpY3Rpb25zQjNhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRXZpY3RlZFVuZmV0Y2hlZC9TdW1SCwgEEgIIPBoDCLAJCqoCCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9FdmljdGlvbnMvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMg9DYWNoZSBldmljdGlvbnM6FFNhbXBsZXMgb2YgZXZpY3Rpb25zQjRhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRXZpY3Rpb25zL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqPAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRXZpY3Rpb25zL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyD0NhY2hlIGV2aWN0aW9uczoJRXZpY3Rpb25zQixhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRXZpY3Rpb25zL1N1bVILCAQSAgg8GgMIsAkK1AIKcHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0V4cGlyZWRVbmZldGNoZWQvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMh9VbnRvdWNoZWQgTFJVIGNhY2hlIGV4cGlyYXRpb25zOiBTYW1wbGVzIG9mIHVudG91Y2hlZCBleHBpcmF0aW9uc0I7YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0V4cGlyZWRVbmZldGNoZWQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCrkCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9FeHBpcmVkVW5mZXRjaGVkL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyH1VudG91Y2hlZCBMUlUgY2FjaGUgZXhwaXJhdGlvbnM6FVVudG91Y2hlZCBleHBpcmF0aW9uc0IzYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0V4cGlyZWRVbmZldGNoZWQvU3VtUgsIBBICCDwaAwiwCQq5AgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRnJlZWFibGVNZW1vcnkvQXZlcmFnZRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5MhpDYWNoZSBub2RlJ3MgdW51c2VkIG1lbW9yeToVQXZlcmFnZSB1bnVzZWQgbWVtb3J5QjVhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRnJlZWFibGVNZW1vcnkvQXZlcmFnZVILCAQSAgg8GgMIsAkKuQIKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0ZyZWVhYmxlTWVtb3J5L01heGltdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgJCeTIaQ2FjaGUgbm9kZSdzIHVudXNlZCBtZW1vcnk6FU1heGltdW0gdW51c2VkIG1lbW9yeUI1YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0ZyZWVhYmxlTWVtb3J5L01heGltdW1SCwgEEgIIPBoDCLAJCrkCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9GcmVlYWJsZU1lbW9yeS9NaW5pbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoCQnkyGkNhY2hlIG5vZGUncyB1bnVzZWQgbWVtb3J5OhVNaW5pbXVtIHVudXNlZCBtZW1vcnlCNWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9GcmVlYWJsZU1lbW9yeS9NaW5pbXVtUgsIBBICCDwaAwiwCQrDAgpucHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRnJlZWFibGVNZW1vcnkvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMhpDYWNoZSBub2RlJ3MgdW51c2VkIG1lbW9yeToYU2FtcGxlcyBvZiB1bnVzZWQgbWVtb3J5Qjlhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvRnJlZWFibGVNZW1vcnkvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCqkCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9GcmVlYWJsZU1lbW9yeS9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgJCeTIaQ2FjaGUgbm9kZSdzIHVudXNlZCBtZW1vcnk6DVVudXNlZCBtZW1vcnlCMWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9GcmVlYWJsZU1lbW9yeS9TdW1SCwgEEgIIPBoDCLAJCq0CCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9HZXRIaXRzL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIXU3VjY2Vzc2Z1bCBnZXQgcmVxdWVzdHM6E1NhbXBsZXMgb2YgZ2V0IGhpdHNCMmF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9HZXRIaXRzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqSAgpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvR2V0SGl0cy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMhdTdWNjZXNzZnVsIGdldCByZXF1ZXN0czoIR2V0IGhpdHNCKmF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9HZXRIaXRzL1N1bVILCAQSAgg8GgMIsAkKtAIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0dldE1pc3Nlcy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyGFVuc3VjY2VzZnVsIGdldCByZXF1ZXN0czoVU2FtcGxlcyBvZiBnZXQgbWlzc2VzQjRhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvR2V0TWlzc2VzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqZAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvR2V0TWlzc2VzL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyGFVuc3VjY2VzZnVsIGdldCByZXF1ZXN0czoKR2V0IG1pc3Nlc0IsYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0dldE1pc3Nlcy9TdW1SCwgEEgIIPBoDCLAJCsUCCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9HZXRUeXBlQ21kcy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyHlRvdGFsIGdldCB0eXBlIGNvbW1hbmRzIGlzc3VlZDocU2FtcGxlcyBvZiBnZXQgdHlwZSBjb21tYW5kc0I2YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0dldFR5cGVDbWRzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqqAgpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvR2V0VHlwZUNtZHMvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIeVG90YWwgZ2V0IHR5cGUgY29tbWFuZHMgaXNzdWVkOhFHZXQgdHlwZSBjb21tYW5kc0IuYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0dldFR5cGVDbWRzL1N1bVILCAQSAgg8GgMIsAkKzAIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0hhc2hCYXNlZENtZHMvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMiVUb3RhbCBudW1iZXIgb2YgaGFzaCBjb21tYW5kcyBpc3N1ZWQuOhhTYW1wbGVzIG9mIGhhc2ggY29tbWFuZHNCOGF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9IYXNoQmFzZWRDbWRzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqxAgplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvSGFzaEJhc2VkQ21kcy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMiVUb3RhbCBudW1iZXIgb2YgaGFzaCBjb21tYW5kcyBpc3N1ZWQuOg1IYXNoIGNvbW1hbmRzQjBhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvSGFzaEJhc2VkQ21kcy9TdW1SCwgEEgIIPBoDCLAJCrsCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9JbmNySGl0cy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyHVN1Y2Nlc3NmdWwgaW5jcmVtZW50IHJlcXVlc3RzOhlTYW1wbGVzIG9mIGluY3JlbWVudCBoaXRzQjNhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvSW5jckhpdHMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCqACCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9JbmNySGl0cy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMh1TdWNjZXNzZnVsIGluY3JlbWVudCByZXF1ZXN0czoOSW5jcmVtZW50IGhpdHNCK2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9JbmNySGl0cy9TdW1SCwgEEgIIPBoDCLAJCsICCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9JbmNyTWlzc2VzL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIeVW5zdWNjZXNmdWwgaW5jcmVtZW50IHJlcXVlc3RzOhtTYW1wbGVzIG9mIGluY3JlbWVudCBtaXNzZXNCNWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9JbmNyTWlzc2VzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqnAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvSW5jck1pc3Nlcy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMh5VbnN1Y2Nlc2Z1bCBpbmNyZW1lbnQgcmVxdWVzdHM6EEluY3JlbWVudCBtaXNzZXNCLWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9JbmNyTWlzc2VzL1N1bVILCAQSAgg8GgMIsAkKyAIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0tleUJhc2VkQ21kcy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyJFRvdGFsIG51bWJlciBvZiBrZXkgY29tbWFuZHMgaXNzdWVkLjoXU2FtcGxlcyBvZiBrZXkgY29tbWFuZHNCN2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9LZXlCYXNlZENtZHMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCq0CCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9LZXlCYXNlZENtZHMvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIkVG90YWwgbnVtYmVyIG9mIGtleSBjb21tYW5kcyBpc3N1ZWQuOgxLZXkgY29tbWFuZHNCL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9LZXlCYXNlZENtZHMvU3VtUgsIBBICCDwaAwiwCQrMAgptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvTGlzdEJhc2VkQ21kcy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyJVRvdGFsIG51bWJlciBvZiBsaXN0IGNvbW1hbmRzIGlzc3VlZC46GFNhbXBsZXMgb2YgbGlzdCBjb21tYW5kc0I4YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL0xpc3RCYXNlZENtZHMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCrECCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9MaXN0QmFzZWRDbWRzL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyJVRvdGFsIG51bWJlciBvZiBsaXN0IGNvbW1hbmRzIGlzc3VlZC46DUxpc3QgY29tbWFuZHNCMGF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9MaXN0QmFzZWRDbWRzL1N1bVILCAQSAgg8GgMIsAkKxgIKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL05ldHdvcmtCeXRlc0luL0F2ZXJhZ2USTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgJCeTIjTmV0d29yayBkYXRhIHJlYWQgYnkgdGhlIGNhY2hlIG5vZGU6GUF2ZXJhZ2UgbmV0d29yayBkYXRhIHJlYWRCNWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXR3b3JrQnl0ZXNJbi9BdmVyYWdlUgsIBBICCDwaAwiwCQrGAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvTmV0d29ya0J5dGVzSW4vTWF4aW11bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5MiNOZXR3b3JrIGRhdGEgcmVhZCBieSB0aGUgY2FjaGUgbm9kZToZTWF4aW11bSBuZXR3b3JrIGRhdGEgcmVhZEI1YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL05ldHdvcmtCeXRlc0luL01heGltdW1SCwgEEgIIPBoDCLAJCsYCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXR3b3JrQnl0ZXNJbi9NaW5pbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoCQnkyI05ldHdvcmsgZGF0YSByZWFkIGJ5IHRoZSBjYWNoZSBub2RlOhlNaW5pbXVtIG5ldHdvcmsgZGF0YSByZWFkQjVhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvTmV0d29ya0J5dGVzSW4vTWluaW11bVILCAQSAgg8GgMIsAkK0AIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL05ldHdvcmtCeXRlc0luL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIjTmV0d29yayBkYXRhIHJlYWQgYnkgdGhlIGNhY2hlIG5vZGU6HFNhbXBsZXMgb2YgbmV0d29yayBkYXRhIHJlYWRCOWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXR3b3JrQnl0ZXNJbi9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKtgIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL05ldHdvcmtCeXRlc0luL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqAkJ5MiNOZXR3b3JrIGRhdGEgcmVhZCBieSB0aGUgY2FjaGUgbm9kZToRTmV0d29yayBkYXRhIHJlYWRCMWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXR3b3JrQnl0ZXNJbi9TdW1SCwgEEgIIPBoDCLAJCs4CCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXR3b3JrQnl0ZXNPdXQvQXZlcmFnZRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5MiZOZXR3b3JrIGRhdGEgd3JpdHRlbiBieSB0aGUgY2FjaGUgbm9kZTocQXZlcmFnZSBuZXR3b3JrIGRhdGEgd3JpdHRlbkI2YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL05ldHdvcmtCeXRlc091dC9BdmVyYWdlUgsIBBICCDwaAwiwCQrOAgprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvTmV0d29ya0J5dGVzT3V0L01heGltdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgJCeTImTmV0d29yayBkYXRhIHdyaXR0ZW4gYnkgdGhlIGNhY2hlIG5vZGU6HE1heGltdW0gbmV0d29yayBkYXRhIHdyaXR0ZW5CNmF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXR3b3JrQnl0ZXNPdXQvTWF4aW11bVILCAQSAgg8GgMIsAkKzgIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL05ldHdvcmtCeXRlc091dC9NaW5pbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoCQnkyJk5ldHdvcmsgZGF0YSB3cml0dGVuIGJ5IHRoZSBjYWNoZSBub2RlOhxNaW5pbXVtIG5ldHdvcmsgZGF0YSB3cml0dGVuQjZhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvTmV0d29ya0J5dGVzT3V0L01pbmltdW1SCwgEEgIIPBoDCLAJCtkCCm9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXR3b3JrQnl0ZXNPdXQvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgJCeTImTmV0d29yayBkYXRhIHdyaXR0ZW4gYnkgdGhlIGNhY2hlIG5vZGU6H1NhbXBsZXMgb2YgbmV0d29yayBkYXRhIHdyaXR0ZW5COmF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXR3b3JrQnl0ZXNPdXQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCr4CCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXR3b3JrQnl0ZXNPdXQvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoCQnkyJk5ldHdvcmsgZGF0YSB3cml0dGVuIGJ5IHRoZSBjYWNoZSBub2RlOhROZXR3b3JrIGRhdGEgd3JpdHRlbkIyYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL05ldHdvcmtCeXRlc091dC9TdW1SCwgEEgIIPBoDCLAJCsoCCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXdDb25uZWN0aW9ucy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyH0FkZGl0aW9uYWwgY29ubmVjdGlvbnMgcmVjZWl2ZWQ6GlNhbXBsZXMgb2YgbmV3IGNvbm5lY3Rpb25zQjlhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvTmV3Q29ubmVjdGlvbnMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCq8CCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXdDb25uZWN0aW9ucy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMh9BZGRpdGlvbmFsIGNvbm5lY3Rpb25zIHJlY2VpdmVkOg9OZXcgY29ubmVjdGlvbnNCMWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXdDb25uZWN0aW9ucy9TdW1SCwgEEgIIPBoDCLAJCq8CCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXdJdGVtcy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyFkFkZGl0aW9uYWwgaXRlbXMgc2F2ZWQ6FFNhbXBsZXMgb2YgbmV3IGl0ZW1zQjNhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvTmV3SXRlbXMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCpQCCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXdJdGVtcy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMhZBZGRpdGlvbmFsIGl0ZW1zIHNhdmVkOglOZXcgaXRlbXNCK2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9OZXdJdGVtcy9TdW1SCwgEEgIIPBoDCLAJCsUCCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9SZWNsYWltZWQvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMiRFeHBpcmVkIGl0ZW1zIHJlbW92ZWQgZnJvbSB0aGUgY2FjaGU6GlNhbXBsZXMgb2YgcmVjbGFpbWVkIGl0ZW1zQjRhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvUmVjbGFpbWVkL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqqAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvUmVjbGFpbWVkL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyJEV4cGlyZWQgaXRlbXMgcmVtb3ZlZCBmcm9tIHRoZSBjYWNoZToPUmVjbGFpbWVkIGl0ZW1zQixhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvUmVjbGFpbWVkL1N1bVILCAQSAgg8GgMIsAkK5AIKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1JlcGxpY2F0aW9uTGFnL0F2ZXJhZ2USTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgFzMkRSZWFkLXJlcGxpY2Egb25seS4gVGhlIG51bWJlciBvZiBzZWNvbmRzIGJlaGluZCB0aGUgcHJpbWFyeSBjbHVzdGVyLjoXQXZlcmFnZSByZXBsaWNhdGlvbiBsYWdCNWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9SZXBsaWNhdGlvbkxhZy9BdmVyYWdlUgsIBBICCDwaAwiwCQrkAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvUmVwbGljYXRpb25MYWcvTWF4aW11bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAXMyRFJlYWQtcmVwbGljYSBvbmx5LiBUaGUgbnVtYmVyIG9mIHNlY29uZHMgYmVoaW5kIHRoZSBwcmltYXJ5IGNsdXN0ZXIuOhdNYXhpbXVtIHJlcGxpY2F0aW9uIGxhZ0I1YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1JlcGxpY2F0aW9uTGFnL01heGltdW1SCwgEEgIIPBoDCLAJCuQCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9SZXBsaWNhdGlvbkxhZy9NaW5pbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoBczJEUmVhZC1yZXBsaWNhIG9ubHkuIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBiZWhpbmQgdGhlIHByaW1hcnkgY2x1c3Rlci46F01pbmltdW0gcmVwbGljYXRpb24gbGFnQjVhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvUmVwbGljYXRpb25MYWcvTWluaW11bVILCAQSAgg8GgMIsAkK7wIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1JlcGxpY2F0aW9uTGFnL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTJEUmVhZC1yZXBsaWNhIG9ubHkuIFRoZSBudW1iZXIgb2Ygc2Vjb25kcyBiZWhpbmQgdGhlIHByaW1hcnkgY2x1c3Rlci46GlNhbXBsZXMgb2YgcmVwbGljYXRpb24gbGFnQjlhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvUmVwbGljYXRpb25MYWcvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCtQCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9SZXBsaWNhdGlvbkxhZy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgFzMkRSZWFkLXJlcGxpY2Egb25seS4gVGhlIG51bWJlciBvZiBzZWNvbmRzIGJlaGluZCB0aGUgcHJpbWFyeSBjbHVzdGVyLjoPUmVwbGljYXRpb24gbGFnQjFhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvUmVwbGljYXRpb25MYWcvU3VtUgsIBBICCDwaAwiwCQrIAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvU2V0QmFzZWRDbWRzL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIkVG90YWwgbnVtYmVyIG9mIHNldCBjb21tYW5kcyBpc3N1ZWQuOhdTYW1wbGVzIG9mIHNldCBjb21tYW5kc0I3YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1NldEJhc2VkQ21kcy9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKrQIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1NldEJhc2VkQ21kcy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMiRUb3RhbCBudW1iZXIgb2Ygc2V0IGNvbW1hbmRzIGlzc3VlZC46DFNldCBjb21tYW5kc0IvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1NldEJhc2VkQ21kcy9TdW1SCwgEEgIIPBoDCLAJCsUCCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9TZXRUeXBlQ21kcy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyHlRvdGFsIHNldCB0eXBlIGNvbW1hbmRzIGlzc3VlZDocU2FtcGxlcyBvZiBzZXQgdHlwZSBjb21tYW5kc0I2YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1NldFR5cGVDbWRzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqqAgpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvU2V0VHlwZUNtZHMvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIeVG90YWwgc2V0IHR5cGUgY29tbWFuZHMgaXNzdWVkOhFTZXQgdHlwZSBjb21tYW5kc0IuYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1NldFR5cGVDbWRzL1N1bVILCAQSAgg8GgMIsAkKsAIKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1NsYWJzTW92ZWQvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMhFUcmFuc2ZlcnJlZCBzbGFiczoWU2FtcGxlcyBvZiBzbGFicyBtb3ZlZEI1YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1NsYWJzTW92ZWQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCpUCCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9TbGFic01vdmVkL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyEVRyYW5zZmVycmVkIHNsYWJzOgtTbGFicyBtb3ZlZEItYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1NsYWJzTW92ZWQvU3VtUgsIBBICCDwaAwiwCQriAgpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvU29ydGVkU2V0QmFzZWRDbWRzL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIrVG90YWwgbnVtYmVyIG9mIHNvcnRlZCBzZXQgY29tbWFuZHMgaXNzdWVkLjoeU2FtcGxlcyBvZiBzb3J0ZWQgc2V0IGNvbW1hbmRzQj1hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvU29ydGVkU2V0QmFzZWRDbWRzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrHAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvU29ydGVkU2V0QmFzZWRDbWRzL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyK1RvdGFsIG51bWJlciBvZiBzb3J0ZWQgc2V0IGNvbW1hbmRzIGlzc3VlZC46E1NvcnRlZCBzZXQgY29tbWFuZHNCNWF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9Tb3J0ZWRTZXRCYXNlZENtZHMvU3VtUgsIBBICCDwaAwiwCQrUAgpvcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvU3RyaW5nQmFzZWRDbWRzL1NhbXBsZUNvdW50EkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTInVG90YWwgbnVtYmVyIG9mIHN0cmluZyBjb21tYW5kcyBpc3N1ZWQuOhpTYW1wbGVzIG9mIHN0cmluZyBjb21tYW5kc0I6YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1N0cmluZ0Jhc2VkQ21kcy9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKuQIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1N0cmluZ0Jhc2VkQ21kcy9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMidUb3RhbCBudW1iZXIgb2Ygc3RyaW5nIGNvbW1hbmRzIGlzc3VlZC46D1N0cmluZyBjb21tYW5kc0IyYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1N0cmluZ0Jhc2VkQ21kcy9TdW1SCwgEEgIIPBoDCLAJCrwCCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9Td2FwVXNhZ2UvQXZlcmFnZRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5MitUaGUgYnl0ZXMgb2Ygc3dhcCBpbiB1c2UgYnkgdGhlIGNhY2hlIG5vZGUuOhFBdmVyYWdlIHN3YXAgdXNlZEIwYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1N3YXBVc2FnZS9BdmVyYWdlUgsIBBICCDwaAwiwCQq8AgplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvU3dhcFVzYWdlL01heGltdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgJCeTIrVGhlIGJ5dGVzIG9mIHN3YXAgaW4gdXNlIGJ5IHRoZSBjYWNoZSBub2RlLjoRTWF4aW11bSBzd2FwIHVzZWRCMGF3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9Td2FwVXNhZ2UvTWF4aW11bVILCAQSAgg8GgMIsAkKvAIKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1N3YXBVc2FnZS9NaW5pbXVtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoCQnkyK1RoZSBieXRlcyBvZiBzd2FwIGluIHVzZSBieSB0aGUgY2FjaGUgbm9kZS46EU1pbmltdW0gc3dhcCB1c2VkQjBhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvU3dhcFVzYWdlL01pbmltdW1SCwgEEgIIPBoDCLAJCsYCCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9Td2FwVXNhZ2UvU2FtcGxlQ291bnQSTAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgExMitUaGUgYnl0ZXMgb2Ygc3dhcCBpbiB1c2UgYnkgdGhlIGNhY2hlIG5vZGUuOhRTYW1wbGVzIG9mIHN3YXAgdXNlZEI0YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1N3YXBVc2FnZS9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKrAIKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1N3YXBVc2FnZS9TdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YAiADKgJCeTIrVGhlIGJ5dGVzIG9mIHN3YXAgaW4gdXNlIGJ5IHRoZSBjYWNoZSBub2RlLjoJU3dhcCB1c2VkQixhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvU3dhcFVzYWdlL1N1bVILCAQSAgg8GgMIsAkKrgIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1RvdWNoSGl0cy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyElN1Y2Nlc3NmdWwgdG91Y2hlczoVU2FtcGxlcyBvZiB0b3VjaCBoaXRzQjRhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvVG91Y2hIaXRzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqTAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvVG91Y2hIaXRzL1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyElN1Y2Nlc3NmdWwgdG91Y2hlczoKVG91Y2ggaGl0c0IsYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1RvdWNoSGl0cy9TdW1SCwgEEgIIPBoDCLAJCrACCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9Ub3VjaE1pc3Nlcy9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyDkZhaWxlZCB0b3VjaGVzOhdTYW1wbGVzIG9mIHRvdWNoIG1pc3Nlc0I2YXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1RvdWNoTWlzc2VzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqVAgpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvVG91Y2hNaXNzZXMvU3VtEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAIgAyoBMTIORmFpbGVkIHRvdWNoZXM6DFRvdWNoIG1pc3Nlc0IuYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1RvdWNoTWlzc2VzL1N1bVILCAQSAgg8GgMIsAkKwgIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1VudXNlZE1lbW9yeS9BdmVyYWdlEkwKC0NhY2hlTm9kZUlkGj1UaGUgbm9kZSBJRCB3aXRoaW4gdGhlIGNsdXN0ZXIuIElEIGNhbiBiZSByZXVzZWQgYWNyb3NzIHRpbWUuGAEgAyoCQnkyJ01lbW9yeSBhdmFpbGFibGUgZm9yIHN0b3JhZ2Ugb3BlcmF0aW9uczoVQXZlcmFnZSB1bnVzZWQgbWVtb3J5QjNhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvVW51c2VkTWVtb3J5L0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCsICCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9VbnVzZWRNZW1vcnkvTWF4aW11bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgBIAMqAkJ5MidNZW1vcnkgYXZhaWxhYmxlIGZvciBzdG9yYWdlIG9wZXJhdGlvbnM6FU1heGltdW0gdW51c2VkIG1lbW9yeUIzYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1VudXNlZE1lbW9yeS9NYXhpbXVtUgsIBBICCDwaAwiwCQrCAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvVW51c2VkTWVtb3J5L01pbmltdW0STAoLQ2FjaGVOb2RlSWQaPVRoZSBub2RlIElEIHdpdGhpbiB0aGUgY2x1c3Rlci4gSUQgY2FuIGJlIHJldXNlZCBhY3Jvc3MgdGltZS4YASADKgJCeTInTWVtb3J5IGF2YWlsYWJsZSBmb3Igc3RvcmFnZSBvcGVyYXRpb25zOhVNaW5pbXVtIHVudXNlZCBtZW1vcnlCM2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9VbnVzZWRNZW1vcnkvTWluaW11bVILCAQSAgg8GgMIsAkKzAIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0VsYXN0aUNhY2hlL1VudXNlZE1lbW9yeS9TYW1wbGVDb3VudBJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqATEyJ01lbW9yeSBhdmFpbGFibGUgZm9yIHN0b3JhZ2Ugb3BlcmF0aW9uczoYU2FtcGxlcyBvZiB1bnVzZWQgbWVtb3J5Qjdhd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvVW51c2VkTWVtb3J5L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqyAgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vRWxhc3RpQ2FjaGUvVW51c2VkTWVtb3J5L1N1bRJMCgtDYWNoZU5vZGVJZBo9VGhlIG5vZGUgSUQgd2l0aGluIHRoZSBjbHVzdGVyLiBJRCBjYW4gYmUgcmV1c2VkIGFjcm9zcyB0aW1lLhgCIAMqAkJ5MidNZW1vcnkgYXZhaWxhYmxlIGZvciBzdG9yYWdlIG9wZXJhdGlvbnM6DVVudXNlZCBtZW1vcnlCL2F3cy5nb29nbGVhcGlzLmNvbS9FbGFzdGlDYWNoZS9VbnVzZWRNZW1vcnkvU3VtUgsIBBICCDwaAwiwCQqIAgprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzQnl0ZXMvU2FtcGxlQ291bnQYAiADKgJCeTI1TnVtYmVyIG9mIGJ5dGVzIHJlYWQgZnJvbSB0aGUgc3RyZWFtIHVzaW5nIEdldFJlY29yZC46FVNhbXBsZXMgb2YgYnl0ZXMgcmVhZEI2YXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvR2V0UmVjb3Jkc0J5dGVzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrtAQpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzQnl0ZXMvU3VtGAIgAyoCQnkyNU51bWJlciBvZiBieXRlcyByZWFkIGZyb20gdGhlIHN0cmVhbSB1c2luZyBHZXRSZWNvcmQuOgpCeXRlcyByZWFkQi5hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzQnl0ZXMvU3VtUgsIBBICCDwaAwiwCQrBAgp5cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzSXRlcmF0b3JBZ2VNaWxsaXNlY29uZHMvQXZlcmFnZRgBIAMqAm1zMkhGb3IgYSBzdHJlYW0sIHRpbWUgcGFzc2VkIGJldHdlZW4gbGFzdCBHZXRSZWNvcmRzIGNhbGwgYW5kIGN1cnJlbnQgdGltZS46H0F2ZXJhZ2UgR2V0UmVjb3JkcyBpdGVyYXRvciBhZ2VCRGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0dldFJlY29yZHNJdGVyYXRvckFnZU1pbGxpc2Vjb25kcy9BdmVyYWdlUgsIBBICCDwaAwiwCQrBAgp5cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzSXRlcmF0b3JBZ2VNaWxsaXNlY29uZHMvTWF4aW11bRgBIAMqAm1zMkhGb3IgYSBzdHJlYW0sIHRpbWUgcGFzc2VkIGJldHdlZW4gbGFzdCBHZXRSZWNvcmRzIGNhbGwgYW5kIGN1cnJlbnQgdGltZS46H01heGltdW0gR2V0UmVjb3JkcyBpdGVyYXRvciBhZ2VCRGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0dldFJlY29yZHNJdGVyYXRvckFnZU1pbGxpc2Vjb25kcy9NYXhpbXVtUgsIBBICCDwaAwiwCQrBAgp5cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzSXRlcmF0b3JBZ2VNaWxsaXNlY29uZHMvTWluaW11bRgBIAMqAm1zMkhGb3IgYSBzdHJlYW0sIHRpbWUgcGFzc2VkIGJldHdlZW4gbGFzdCBHZXRSZWNvcmRzIGNhbGwgYW5kIGN1cnJlbnQgdGltZS46H01pbmltdW0gR2V0UmVjb3JkcyBpdGVyYXRvciBhZ2VCRGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0dldFJlY29yZHNJdGVyYXRvckFnZU1pbGxpc2Vjb25kcy9NaW5pbXVtUgsIBBICCDwaAwiwCQrLAgp9cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzSXRlcmF0b3JBZ2VNaWxsaXNlY29uZHMvU2FtcGxlQ291bnQYAiADKgExMkhGb3IgYSBzdHJlYW0sIHRpbWUgcGFzc2VkIGJldHdlZW4gbGFzdCBHZXRSZWNvcmRzIGNhbGwgYW5kIGN1cnJlbnQgdGltZS46IlNhbXBsZXMgb2YgR2V0UmVjb3JkcyBpdGVyYXRvciBhZ2VCSGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0dldFJlY29yZHNJdGVyYXRvckFnZU1pbGxpc2Vjb25kcy9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKsQIKdXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvR2V0UmVjb3Jkc0l0ZXJhdG9yQWdlTWlsbGlzZWNvbmRzL1N1bRgCIAMqAm1zMkhGb3IgYSBzdHJlYW0sIHRpbWUgcGFzc2VkIGJldHdlZW4gbGFzdCBHZXRSZWNvcmRzIGNhbGwgYW5kIGN1cnJlbnQgdGltZS46F0dldFJlY29yZHMgaXRlcmF0b3IgYWdlQkBhd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzSXRlcmF0b3JBZ2VNaWxsaXNlY29uZHMvU3VtUgsIBBICCDwaAwiwCQqBAgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzTGF0ZW5jeS9BdmVyYWdlGAEgAyoCbXMyLVRvdGFsIHRpbWUgcmVxdWlyZWQgYnkgR2V0UmVjb3JkcyBvcGVyYXRpb25zLjoaQXZlcmFnZSBHZXRSZWNvcmRzIGxhdGVuY3lCNGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0dldFJlY29yZHNMYXRlbmN5L0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCoECCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0dldFJlY29yZHNMYXRlbmN5L01heGltdW0YASADKgJtczItVG90YWwgdGltZSByZXF1aXJlZCBieSBHZXRSZWNvcmRzIG9wZXJhdGlvbnMuOhpNYXhpbXVtIEdldFJlY29yZHMgbGF0ZW5jeUI0YXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvR2V0UmVjb3Jkc0xhdGVuY3kvTWF4aW11bVILCAQSAgg8GgMIsAkKgQIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvR2V0UmVjb3Jkc0xhdGVuY3kvTWluaW11bRgBIAMqAm1zMi1Ub3RhbCB0aW1lIHJlcXVpcmVkIGJ5IEdldFJlY29yZHMgb3BlcmF0aW9ucy46Gk1pbmltdW0gR2V0UmVjb3JkcyBsYXRlbmN5QjRhd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzTGF0ZW5jeS9NaW5pbXVtUgsIBBICCDwaAwiwCQqLAgptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzTGF0ZW5jeS9TYW1wbGVDb3VudBgCIAMqATEyLVRvdGFsIHRpbWUgcmVxdWlyZWQgYnkgR2V0UmVjb3JkcyBvcGVyYXRpb25zLjodU2FtcGxlcyBvZiBHZXRSZWNvcmRzIGxhdGVuY3lCOGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0dldFJlY29yZHNMYXRlbmN5L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrxAQplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzTGF0ZW5jeS9TdW0YAiADKgJtczItVG90YWwgdGltZSByZXF1aXJlZCBieSBHZXRSZWNvcmRzIG9wZXJhdGlvbnMuOhJHZXRSZWNvcmRzIGxhdGVuY3lCMGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0dldFJlY29yZHNMYXRlbmN5L1N1bVILCAQSAgg8GgMIsAkKgQIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvR2V0UmVjb3Jkc1N1Y2Nlc3MvU2FtcGxlQ291bnQYAiADKgExMiBDb21wbGV0ZWQgR2V0UmVjb3JkcyBvcGVyYXRpb25zLjogU2FtcGxlcyBvZiBHZXRSZWNvcmRzIG9wZXJhdGlvbnNCOGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0dldFJlY29yZHNTdWNjZXNzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrmAQplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzU3VjY2Vzcy9TdW0YAiADKgExMiBDb21wbGV0ZWQgR2V0UmVjb3JkcyBvcGVyYXRpb25zLjoVR2V0UmVjb3JkcyBvcGVyYXRpb25zQjBhd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9HZXRSZWNvcmRzU3VjY2Vzcy9TdW1SCwgEEgIIPBoDCLAJCsgCCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0luY29taW5nQnl0ZXMvU2FtcGxlQ291bnQSMQoHU2hhcmRJZBomVGhlIHNoYXJkIElEIHdpdGhpbiB0aGUgS2luZXNpcyBzdHJlYW0YAiADKgExMkdUb3RhbCBudW1iZXIgb2YgYnl0ZXMgc2VudCB0byB0aGUgc3RyZWFtIHdpdGggUHV0UmVjb3JkIGFuZCBQdXRSZWNvcmRzLjoVU2FtcGxlcyBvZiBieXRlcyBzZW50QjRhd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9JbmNvbWluZ0J5dGVzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQquAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9JbmNvbWluZ0J5dGVzL1N1bRIxCgdTaGFyZElkGiZUaGUgc2hhcmQgSUQgd2l0aGluIHRoZSBLaW5lc2lzIHN0cmVhbRgCIAMqAkJ5MkdUb3RhbCBudW1iZXIgb2YgYnl0ZXMgc2VudCB0byB0aGUgc3RyZWFtIHdpdGggUHV0UmVjb3JkIGFuZCBQdXRSZWNvcmRzLjoKQnl0ZXMgc2VudEIsYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvSW5jb21pbmdCeXRlcy9TdW1SCwgEEgIIPBoDCLAJCr0CCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0luY29taW5nUmVjb3Jkcy9TYW1wbGVDb3VudBIxCgdTaGFyZElkGiZUaGUgc2hhcmQgSUQgd2l0aGluIHRoZSBLaW5lc2lzIHN0cmVhbRgCIAMqATEyNk51bWJlciBvZiByZWNvcmRzIHB1dCBhY3Jvc3MgUHV0UmVjb3JkIGFuZCBQdXRSZWNvcmRzLjoXU2FtcGxlcyBvZiByZWNvcmRzIHNlbnRCNmF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL0luY29taW5nUmVjb3Jkcy9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKogIKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvSW5jb21pbmdSZWNvcmRzL1N1bRIxCgdTaGFyZElkGiZUaGUgc2hhcmQgSUQgd2l0aGluIHRoZSBLaW5lc2lzIHN0cmVhbRgCIAMqATEyNk51bWJlciBvZiByZWNvcmRzIHB1dCBhY3Jvc3MgUHV0UmVjb3JkIGFuZCBQdXRSZWNvcmRzLjoMUmVjb3JkcyBzZW50Qi5hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9JbmNvbWluZ1JlY29yZHMvU3VtUgsIBBICCDwaAwiwCQr9AQpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRCeXRlcy9TYW1wbGVDb3VudBgCIAMqATEyKEJ5dGVzIHNlbnQgdG8gdGhlIHN0cmVhbSB3aXRoIFB1dFJlY29yZC46GlNhbXBsZXMgb2YgUHV0UmVjb3JkIGJ5dGVzQjVhd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRCeXRlcy9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkK4wEKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3JkQnl0ZXMvU3VtGAIgAyoCQnkyKEJ5dGVzIHNlbnQgdG8gdGhlIHN0cmVhbSB3aXRoIFB1dFJlY29yZC46D1B1dFJlY29yZCBieXRlc0ItYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3JkQnl0ZXMvU3VtUgsIBBICCDwaAwiwCQr9AQpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRMYXRlbmN5L0F2ZXJhZ2UYASADKgJtczIsVG90YWwgdGltZSByZXF1aXJlZCBieSBQdXRSZWNvcmQgb3BlcmF0aW9ucy46GUF2ZXJhZ2UgUHV0UmVjb3JkIGxhdGVuY3lCM2F3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1B1dFJlY29yZExhdGVuY3kvQXZlcmFnZVILCAQSAgg8GgMIsAkK/QEKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3JkTGF0ZW5jeS9NYXhpbXVtGAEgAyoCbXMyLFRvdGFsIHRpbWUgcmVxdWlyZWQgYnkgUHV0UmVjb3JkIG9wZXJhdGlvbnMuOhlNYXhpbXVtIFB1dFJlY29yZCBsYXRlbmN5QjNhd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRMYXRlbmN5L01heGltdW1SCwgEEgIIPBoDCLAJCv0BCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1B1dFJlY29yZExhdGVuY3kvTWluaW11bRgBIAMqAm1zMixUb3RhbCB0aW1lIHJlcXVpcmVkIGJ5IFB1dFJlY29yZCBvcGVyYXRpb25zLjoZTWluaW11bSBQdXRSZWNvcmQgbGF0ZW5jeUIzYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3JkTGF0ZW5jeS9NaW5pbXVtUgsIBBICCDwaAwiwCQqHAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRMYXRlbmN5L1NhbXBsZUNvdW50GAIgAyoBMTIsVG90YWwgdGltZSByZXF1aXJlZCBieSBQdXRSZWNvcmQgb3BlcmF0aW9ucy46HFNhbXBsZXMgb2YgUHV0UmVjb3JkIGxhdGVuY3lCN2F3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1B1dFJlY29yZExhdGVuY3kvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCu0BCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1B1dFJlY29yZExhdGVuY3kvU3VtGAIgAyoCbXMyLFRvdGFsIHRpbWUgcmVxdWlyZWQgYnkgUHV0UmVjb3JkIG9wZXJhdGlvbnMuOhFQdXRSZWNvcmQgbGF0ZW5jeUIvYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3JkTGF0ZW5jeS9TdW1SCwgEEgIIPBoDCLAJCv0BCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1B1dFJlY29yZFN1Y2Nlc3MvU2FtcGxlQ291bnQYAiADKgExMh9Db21wbGV0ZWQgUHV0UmVjb3JkIG9wZXJhdGlvbnMuOh9TYW1wbGVzIG9mIFB1dFJlY29yZCBvcGVyYXRpb25zQjdhd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRTdWNjZXNzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQriAQpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRTdWNjZXNzL1N1bRgCIAMqATEyH0NvbXBsZXRlZCBQdXRSZWNvcmQgb3BlcmF0aW9ucy46FFB1dFJlY29yZCBvcGVyYXRpb25zQi9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRTdWNjZXNzL1N1bVILCAQSAgg8GgMIsAkKgQIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3Jkc0J5dGVzL1NhbXBsZUNvdW50GAIgAyoBMTIpQnl0ZXMgc2VudCB0byB0aGUgc3RyZWFtIHdpdGggUHV0UmVjb3Jkcy46G1NhbXBsZXMgb2YgUHV0UmVjb3JkcyBieXRlc0I2YXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3Jkc0J5dGVzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrnAQpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRzQnl0ZXMvU3VtGAIgAyoCQnkyKUJ5dGVzIHNlbnQgdG8gdGhlIHN0cmVhbSB3aXRoIFB1dFJlY29yZHMuOhBQdXRSZWNvcmRzIGJ5dGVzQi5hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRzQnl0ZXMvU3VtUgsIBBICCDwaAwiwCQqBAgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRzTGF0ZW5jeS9BdmVyYWdlGAEgAyoCbXMyLVRvdGFsIHRpbWUgcmVxdWlyZWQgYnkgUHV0UmVjb3JkcyBvcGVyYXRpb25zLjoaQXZlcmFnZSBQdXRSZWNvcmRzIGxhdGVuY3lCNGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1B1dFJlY29yZHNMYXRlbmN5L0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCoECCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1B1dFJlY29yZHNMYXRlbmN5L01heGltdW0YASADKgJtczItVG90YWwgdGltZSByZXF1aXJlZCBieSBQdXRSZWNvcmRzIG9wZXJhdGlvbnMuOhpNYXhpbXVtIFB1dFJlY29yZHMgbGF0ZW5jeUI0YXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3Jkc0xhdGVuY3kvTWF4aW11bVILCAQSAgg8GgMIsAkKgQIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3Jkc0xhdGVuY3kvTWluaW11bRgBIAMqAm1zMi1Ub3RhbCB0aW1lIHJlcXVpcmVkIGJ5IFB1dFJlY29yZHMgb3BlcmF0aW9ucy46Gk1pbmltdW0gUHV0UmVjb3JkcyBsYXRlbmN5QjRhd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRzTGF0ZW5jeS9NaW5pbXVtUgsIBBICCDwaAwiwCQqLAgptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRzTGF0ZW5jeS9TYW1wbGVDb3VudBgCIAMqATEyLVRvdGFsIHRpbWUgcmVxdWlyZWQgYnkgUHV0UmVjb3JkcyBvcGVyYXRpb25zLjodU2FtcGxlcyBvZiBQdXRSZWNvcmRzIGxhdGVuY3lCOGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1B1dFJlY29yZHNMYXRlbmN5L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrxAQplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRzTGF0ZW5jeS9TdW0YAiADKgJtczItVG90YWwgdGltZSByZXF1aXJlZCBieSBQdXRSZWNvcmRzIG9wZXJhdGlvbnMuOhJQdXRSZWNvcmRzIGxhdGVuY3lCMGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1B1dFJlY29yZHNMYXRlbmN5L1N1bVILCAQSAgg8GgMIsAkKmAIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3Jkc1JlY29yZHMvU2FtcGxlQ291bnQYAiADKgExMjVDb3VudCBvZiByZWNvcmRzIGluY2x1ZGVkIGluIGEgUHV0UmVjb3JkcyBvcGVyYXRpb25zLjoiU2FtcGxlcyBvZiBQdXRSZWNvcmRzIHJlY29yZCBjb3VudEI4YXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3Jkc1JlY29yZHMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCv0BCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1B1dFJlY29yZHNSZWNvcmRzL1N1bRgCIAMqATEyNUNvdW50IG9mIHJlY29yZHMgaW5jbHVkZWQgaW4gYSBQdXRSZWNvcmRzIG9wZXJhdGlvbnMuOhdQdXRSZWNvcmRzIHJlY29yZCBjb3VudEIwYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvUHV0UmVjb3Jkc1JlY29yZHMvU3VtUgsIBBICCDwaAwiwCQr2AQptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRzU3VjY2Vzcy9TYW1wbGVDb3VudBgCIAMqATEyIENvbXBsZXRlZCBQdXRSZWNvcmRzIG9wZXJhdGlvbnMuOhVQdXRSZWNvcmRzIG9wZXJhdGlvbnNCOGF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1B1dFJlY29yZHNTdWNjZXNzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQrmAQplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRzU3VjY2Vzcy9TdW0YAiADKgExMiBDb21wbGV0ZWQgUHV0UmVjb3JkcyBvcGVyYXRpb25zLjoVUHV0UmVjb3JkcyBvcGVyYXRpb25zQjBhd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9QdXRSZWNvcmRzU3VjY2Vzcy9TdW1SCwgEEgIIPBoDCLAJCs0BCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1NoYXJkQ291bnQvQXZlcmFnZRgBIAMqATEyFENvdW50IG9mIHRoZSBzaGFyZHMuOg5BdmVyYWdlIHNoYXJkc0ItYXdzLmdvb2dsZWFwaXMuY29tL0tpbmVzaXMvU2hhcmRDb3VudC9BdmVyYWdlUgsIBBICCDwaAwiwCQq9AQpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vS2luZXNpcy9TaGFyZENvdW50L1N1bRgCIAMqATEyFENvdW50IG9mIHRoZSBzaGFyZHMuOgZTaGFyZHNCKWF3cy5nb29nbGVhcGlzLmNvbS9LaW5lc2lzL1NoYXJkQ291bnQvU3VtUgsIBBICCDwaAwiwCQq2AgpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vTGFtYmRhL0R1cmF0aW9uL0F2ZXJhZ2USQAoIUmVzb3VyY2UaNEFXUyBSZXNvdXJjZSB0aGUgbGFtYmRhIGZ1bmN0aW9uIGlzIGFzc29jaWF0ZWQgd2l0aC4YASADKgJtczI0RWxhcHNlZCB0aW1lIHRha2VuIGJ5IGFuIGludm9jYXRpb24gb2YgdGhlIGZ1bmN0aW9uLjoaQXZlcmFnZSBpbnZvY2F0aW9uIGxhdGVuY3lCKmF3cy5nb29nbGVhcGlzLmNvbS9MYW1iZGEvRHVyYXRpb24vQXZlcmFnZVILCAQSAgg8GgMIiA4KtgIKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0xhbWJkYS9EdXJhdGlvbi9NYXhpbXVtEkAKCFJlc291cmNlGjRBV1MgUmVzb3VyY2UgdGhlIGxhbWJkYSBmdW5jdGlvbiBpcyBhc3NvY2lhdGVkIHdpdGguGAEgAyoCbXMyNEVsYXBzZWQgdGltZSB0YWtlbiBieSBhbiBpbnZvY2F0aW9uIG9mIHRoZSBmdW5jdGlvbi46Gk1heGltdW0gaW52b2NhdGlvbiBsYXRlbmN5Qiphd3MuZ29vZ2xlYXBpcy5jb20vTGFtYmRhL0R1cmF0aW9uL01heGltdW1SCwgEEgIIPBoDCIgOCrYCCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9MYW1iZGEvRHVyYXRpb24vTWluaW11bRJACghSZXNvdXJjZRo0QVdTIFJlc291cmNlIHRoZSBsYW1iZGEgZnVuY3Rpb24gaXMgYXNzb2NpYXRlZCB3aXRoLhgBIAMqAm1zMjRFbGFwc2VkIHRpbWUgdGFrZW4gYnkgYW4gaW52b2NhdGlvbiBvZiB0aGUgZnVuY3Rpb24uOhpNaW5pbXVtIGludm9jYXRpb24gbGF0ZW5jeUIqYXdzLmdvb2dsZWFwaXMuY29tL0xhbWJkYS9EdXJhdGlvbi9NaW5pbXVtUgsIBBICCDwaAwiIDgrBAgpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vTGFtYmRhL0R1cmF0aW9uL1NhbXBsZUNvdW50EkAKCFJlc291cmNlGjRBV1MgUmVzb3VyY2UgdGhlIGxhbWJkYSBmdW5jdGlvbiBpcyBhc3NvY2lhdGVkIHdpdGguGAIgAyoCbXMyNEVsYXBzZWQgdGltZSB0YWtlbiBieSBhbiBpbnZvY2F0aW9uIG9mIHRoZSBmdW5jdGlvbi46HVNhbXBsZXMgb2YgaW52b2NhdGlvbiBsYXRlbmN5Qi5hd3MuZ29vZ2xlYXBpcy5jb20vTGFtYmRhL0R1cmF0aW9uL1NhbXBsZUNvdW50UgsIBBICCDwaAwiIDgqmAgpbcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vTGFtYmRhL0R1cmF0aW9uL1N1bRJACghSZXNvdXJjZRo0QVdTIFJlc291cmNlIHRoZSBsYW1iZGEgZnVuY3Rpb24gaXMgYXNzb2NpYXRlZCB3aXRoLhgCIAMqAm1zMjRFbGFwc2VkIHRpbWUgdGFrZW4gYnkgYW4gaW52b2NhdGlvbiBvZiB0aGUgZnVuY3Rpb24uOhJJbnZvY2F0aW9uIGxhdGVuY3lCJmF3cy5nb29nbGVhcGlzLmNvbS9MYW1iZGEvRHVyYXRpb24vU3VtUgsIBBICCDwaAwiIDgqiAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vTGFtYmRhL0Vycm9ycy9TYW1wbGVDb3VudBJACghSZXNvdXJjZRo0QVdTIFJlc291cmNlIHRoZSBsYW1iZGEgZnVuY3Rpb24gaXMgYXNzb2NpYXRlZCB3aXRoLhgCIAMqATEyG0NvdW50IG9mIGZhaWxlZCBvcGVyYXRpb25zLjocU2FtcGxlcyBvZiBmYWlsZWQgb3BlcmF0aW9uc0IsYXdzLmdvb2dsZWFwaXMuY29tL0xhbWJkYS9FcnJvcnMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCIgOCocCCllwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9MYW1iZGEvRXJyb3JzL1N1bRJACghSZXNvdXJjZRo0QVdTIFJlc291cmNlIHRoZSBsYW1iZGEgZnVuY3Rpb24gaXMgYXNzb2NpYXRlZCB3aXRoLhgCIAMqATEyG0NvdW50IG9mIGZhaWxlZCBvcGVyYXRpb25zLjoRRmFpbGVkIG9wZXJhdGlvbnNCJGF3cy5nb29nbGVhcGlzLmNvbS9MYW1iZGEvRXJyb3JzL1N1bVILCAQSAgg8GgMIiA4KwQIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0xhbWJkYS9JbnZvY2F0aW9ucy9TYW1wbGVDb3VudBJACghSZXNvdXJjZRo0QVdTIFJlc291cmNlIHRoZSBsYW1iZGEgZnVuY3Rpb24gaXMgYXNzb2NpYXRlZCB3aXRoLhgCIAMqATEyNk51bWJlciBvZiB0aW1lcyB0aGUgZnVuY3Rpb24gd2FzIGNhbGxlZCBpbiB0aGUgcGVyaW9kLjoWU2FtcGxlcyBvZiBpbnZvY2F0aW9uc0IxYXdzLmdvb2dsZWFwaXMuY29tL0xhbWJkYS9JbnZvY2F0aW9ucy9TYW1wbGVDb3VudFILCAQSAgg8GgMIiA4KpgIKXnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0xhbWJkYS9JbnZvY2F0aW9ucy9TdW0SQAoIUmVzb3VyY2UaNEFXUyBSZXNvdXJjZSB0aGUgbGFtYmRhIGZ1bmN0aW9uIGlzIGFzc29jaWF0ZWQgd2l0aC4YAiADKgExMjZOdW1iZXIgb2YgdGltZXMgdGhlIGZ1bmN0aW9uIHdhcyBjYWxsZWQgaW4gdGhlIHBlcmlvZC46C0ludm9jYXRpb25zQilhd3MuZ29vZ2xlYXBpcy5jb20vTGFtYmRhL0ludm9jYXRpb25zL1N1bVILCAQSAgg8GgMIiA4K5QIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0xhbWJkYS9UaHJvdHRsZXMvU2FtcGxlQ291bnQSQAoIUmVzb3VyY2UaNEFXUyBSZXNvdXJjZSB0aGUgbGFtYmRhIGZ1bmN0aW9uIGlzIGFzc29jaWF0ZWQgd2l0aC4YAiADKgExMlZDb3VudCBvZiBmdW5jdGlvbnMgdGhhdCBleGNlZWRlZCB0aGUgaW52b2NhdGlvbiBsaW1pdCBhbmQgd2VyZSBzdWJzZXF1ZW50bHkgdGhyb3R0bGVkLjoeU2FtcGxlcyBvZiB0aHJvdHRsZWQgZnVuY3Rpb25zQi9hd3MuZ29vZ2xlYXBpcy5jb20vTGFtYmRhL1Rocm90dGxlcy9TYW1wbGVDb3VudFILCAQSAgg8GgMIiA4KygIKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL0xhbWJkYS9UaHJvdHRsZXMvU3VtEkAKCFJlc291cmNlGjRBV1MgUmVzb3VyY2UgdGhlIGxhbWJkYSBmdW5jdGlvbiBpcyBhc3NvY2lhdGVkIHdpdGguGAIgAyoBMTJWQ291bnQgb2YgZnVuY3Rpb25zIHRoYXQgZXhjZWVkZWQgdGhlIGludm9jYXRpb24gbGltaXQgYW5kIHdlcmUgc3Vic2VxdWVudGx5IHRocm90dGxlZC46E1Rocm90dGxlZCBmdW5jdGlvbnNCJ2F3cy5nb29nbGVhcGlzLmNvbS9MYW1iZGEvVGhyb3R0bGVzL1N1bVILCAQSAgg8GgMIiA4K1AIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9BdmVyYWdlRGlza1VzYWdlL0F2ZXJhZ2USPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqASUyHFRoZSBwZXJjZW50YWdlIG9mIGRpc2sgdXNlZC46GEF2ZXJhZ2UgZGlzayB1dGlsaXphdGlvbkIvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9BdmVyYWdlRGlza1VzYWdlL0F2ZXJhZ2VSCwgEEgIIPBoDCNgECtwCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvQXZlcmFnZU1lbW9yeVVzYWdlL0F2ZXJhZ2USPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqASUyHlRoZSBwZXJjZW50YWdlIG9mIG1lbW9yeSB1c2VkLjoaQXZlcmFnZSBtZW1vcnkgdXRpbGl6YXRpb25CMWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvQXZlcmFnZU1lbW9yeVVzYWdlL0F2ZXJhZ2VSCwgEEgIIPBoDCNgECuQCCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvQmluTG9nRGlza1VzYWdlL0F2ZXJhZ2USPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqAkJ5Mi1CeXRlcyBhbGxvY2F0ZWQgdG8gYmluYXJ5IGxvZ3Mgb24gdGhlIG1hc3Rlci46GEF2ZXJhZ2UgYmluYXJ5IGxvZyBieXRlc0IuYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9CaW5Mb2dEaXNrVXNhZ2UvQXZlcmFnZVILCAQSAgg8GgMI2AQK5AIKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9CaW5Mb2dEaXNrVXNhZ2UvTWF4aW11bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoCQnkyLUJ5dGVzIGFsbG9jYXRlZCB0byBiaW5hcnkgbG9ncyBvbiB0aGUgbWFzdGVyLjoYTWF4aW11bSBiaW5hcnkgbG9nIGJ5dGVzQi5hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0JpbkxvZ0Rpc2tVc2FnZS9NYXhpbXVtUgsIBBICCDwaAwjYBArkAgpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0JpbkxvZ0Rpc2tVc2FnZS9NaW5pbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgJCeTItQnl0ZXMgYWxsb2NhdGVkIHRvIGJpbmFyeSBsb2dzIG9uIHRoZSBtYXN0ZXIuOhhNaW5pbXVtIGJpbmFyeSBsb2cgYnl0ZXNCLmF3cy5nb29nbGVhcGlzLmNvbS9SRFMvQmluTG9nRGlza1VzYWdlL01pbmltdW1SCwgEEgIIPBoDCNgECu4CCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvQmluTG9nRGlza1VzYWdlL1NhbXBsZUNvdW50Ej0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgExMi1CeXRlcyBhbGxvY2F0ZWQgdG8gYmluYXJ5IGxvZ3Mgb24gdGhlIG1hc3Rlci46G1NhbXBsZXMgb2YgYmluYXJ5IGxvZyBieXRlc0IyYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9CaW5Mb2dEaXNrVXNhZ2UvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECtQCCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvQmluTG9nRGlza1VzYWdlL1N1bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAIgAyoCQnkyLUJ5dGVzIGFsbG9jYXRlZCB0byBiaW5hcnkgbG9ncyBvbiB0aGUgbWFzdGVyLjoQQmluYXJ5IGxvZyBieXRlc0IqYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9CaW5Mb2dEaXNrVXNhZ2UvU3VtUgsIBBICCDwaAwjYBArRAgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0NQVUNyZWRpdEJhbGFuY2UvQXZlcmFnZRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoBMTIXQWNjcnVlZCBDUFUgYWxsb3R0bWVudC46GkF2ZXJhZ2UgQ1BVIGNyZWRpdCBiYWxhbmNlQi9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0NQVUNyZWRpdEJhbGFuY2UvQXZlcmFnZVILCAQSAgg8GgMI2AQK0QIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9DUFVDcmVkaXRCYWxhbmNlL01heGltdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqATEyF0FjY3J1ZWQgQ1BVIGFsbG90dG1lbnQuOhpNYXhpbXVtIENQVSBjcmVkaXQgYmFsYW5jZUIvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9DUFVDcmVkaXRCYWxhbmNlL01heGltdW1SCwgEEgIIPBoDCNgECtECCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvQ1BVQ3JlZGl0QmFsYW5jZS9NaW5pbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgExMhdBY2NydWVkIENQVSBhbGxvdHRtZW50LjoaTWluaW11bSBDUFUgY3JlZGl0IGJhbGFuY2VCL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvQ1BVQ3JlZGl0QmFsYW5jZS9NaW5pbXVtUgsIBBICCDwaAwjYBArcAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0NQVUNyZWRpdEJhbGFuY2UvU2FtcGxlQ291bnQSPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqATEyF0FjY3J1ZWQgQ1BVIGFsbG90dG1lbnQuOh1TYW1wbGVzIG9mIENQVSBjcmVkaXQgYmFsYW5jZUIzYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9DUFVDcmVkaXRCYWxhbmNlL1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBArBAgpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0NQVUNyZWRpdEJhbGFuY2UvU3VtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgExMhdBY2NydWVkIENQVSBhbGxvdHRtZW50LjoSQ1BVIGNyZWRpdCBiYWxhbmNlQithd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0NQVUNyZWRpdEJhbGFuY2UvU3VtUgsIBBICCDwaAwjYBArMAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0NQVUNyZWRpdFVzYWdlL0F2ZXJhZ2USPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqATEyGENvbnN1bWVkIENQVSBhbGxvdHRtZW50LjoYQXZlcmFnZSBDUFUgY3JlZGl0IHVzYWdlQi1hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0NQVUNyZWRpdFVzYWdlL0F2ZXJhZ2VSCwgEEgIIPBoDCNgECswCCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvQ1BVQ3JlZGl0VXNhZ2UvTWF4aW11bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoBMTIYQ29uc3VtZWQgQ1BVIGFsbG90dG1lbnQuOhhNYXhpbXVtIENQVSBjcmVkaXQgdXNhZ2VCLWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvQ1BVQ3JlZGl0VXNhZ2UvTWF4aW11bVILCAQSAgg8GgMI2AQKzAIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9DUFVDcmVkaXRVc2FnZS9NaW5pbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgExMhhDb25zdW1lZCBDUFUgYWxsb3R0bWVudC46GE1pbmltdW0gQ1BVIGNyZWRpdCB1c2FnZUItYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9DUFVDcmVkaXRVc2FnZS9NaW5pbXVtUgsIBBICCDwaAwjYBArXAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0NQVUNyZWRpdFVzYWdlL1NhbXBsZUNvdW50Ej0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgExMhhDb25zdW1lZCBDUFUgYWxsb3R0bWVudC46G1NhbXBsZXMgb2YgQ1BVIGNyZWRpdCB1c2FnZUIxYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9DUFVDcmVkaXRVc2FnZS9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKvAIKXnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9DUFVDcmVkaXRVc2FnZS9TdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqATEyGENvbnN1bWVkIENQVSBhbGxvdHRtZW50LjoQQ1BVIGNyZWRpdCB1c2FnZUIpYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9DUFVDcmVkaXRVc2FnZS9TdW1SCwgEEgIIPBoDCNgECtECCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvQ1BVVXRpbGl6YXRpb24vQXZlcmFnZRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoBJTIeQ1BVIHJlcXVpcmVkIGZvciBSRFMgcHJvY2Vzc2VzOhdBdmVyYWdlIENQVSB1dGlsaXphdGlvbkItYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9DUFVVdGlsaXphdGlvbi9BdmVyYWdlUgsIBBICCDwaAwjYBArRAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0NQVVV0aWxpemF0aW9uL01heGltdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqASUyHkNQVSByZXF1aXJlZCBmb3IgUkRTIHByb2Nlc3NlczoXTWF4aW11bSBDUFUgdXRpbGl6YXRpb25CLWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvQ1BVVXRpbGl6YXRpb24vTWF4aW11bVILCAQSAgg8GgMI2AQK0QIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9DUFVVdGlsaXphdGlvbi9NaW5pbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgElMh5DUFUgcmVxdWlyZWQgZm9yIFJEUyBwcm9jZXNzZXM6F01pbmltdW0gQ1BVIHV0aWxpemF0aW9uQi1hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0NQVVV0aWxpemF0aW9uL01pbmltdW1SCwgEEgIIPBoDCNgECtwCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvQ1BVVXRpbGl6YXRpb24vU2FtcGxlQ291bnQSPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqASUyHkNQVSByZXF1aXJlZCBmb3IgUkRTIHByb2Nlc3NlczoaU2FtcGxlcyBvZiBDUFUgdXRpbGl6YXRpb25CMWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvQ1BVVXRpbGl6YXRpb24vU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECsECCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvQ1BVVXRpbGl6YXRpb24vU3VtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgExMh5DUFUgcmVxdWlyZWQgZm9yIFJEUyBwcm9jZXNzZXM6D0NQVSB1dGlsaXphdGlvbkIpYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9DUFVVdGlsaXphdGlvbi9TdW1SCwgEEgIIPBoDCNgECuYCCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRGF0YWJhc2VDb25uZWN0aW9ucy9BdmVyYWdlEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgExMiRDb3VudCBvZiBjb25uZWN0aW9ucyB0byB0aGUgZGF0YWJhc2U6HEF2ZXJhZ2UgZGF0YWJhc2UgY29ubmVjdGlvbnNCMmF3cy5nb29nbGVhcGlzLmNvbS9SRFMvRGF0YWJhc2VDb25uZWN0aW9ucy9BdmVyYWdlUgsIBBICCDwaAwjYBArmAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0RhdGFiYXNlQ29ubmVjdGlvbnMvTWF4aW11bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoBMTIkQ291bnQgb2YgY29ubmVjdGlvbnMgdG8gdGhlIGRhdGFiYXNlOhxNYXhpbXVtIGRhdGFiYXNlIGNvbm5lY3Rpb25zQjJhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0RhdGFiYXNlQ29ubmVjdGlvbnMvTWF4aW11bVILCAQSAgg8GgMI2AQK5gIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9EYXRhYmFzZUNvbm5lY3Rpb25zL01pbmltdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqATEyJENvdW50IG9mIGNvbm5lY3Rpb25zIHRvIHRoZSBkYXRhYmFzZTocTWluaW11bSBkYXRhYmFzZSBjb25uZWN0aW9uc0IyYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9EYXRhYmFzZUNvbm5lY3Rpb25zL01pbmltdW1SCwgEEgIIPBoDCNgECvECCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRGF0YWJhc2VDb25uZWN0aW9ucy9TYW1wbGVDb3VudBI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAIgAyoBMTIkQ291bnQgb2YgY29ubmVjdGlvbnMgdG8gdGhlIGRhdGFiYXNlOh9TYW1wbGVzIG9mIGRhdGFiYXNlIGNvbm5lY3Rpb25zQjZhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0RhdGFiYXNlQ29ubmVjdGlvbnMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECtYCCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRGF0YWJhc2VDb25uZWN0aW9ucy9TdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqATEyJENvdW50IG9mIGNvbm5lY3Rpb25zIHRvIHRoZSBkYXRhYmFzZToURGF0YWJhc2UgY29ubmVjdGlvbnNCLmF3cy5nb29nbGVhcGlzLmNvbS9SRFMvRGF0YWJhc2VDb25uZWN0aW9ucy9TdW1SCwgEEgIIPBoDCNgECt4CCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRGlza1F1ZXVlRGVwdGgvQXZlcmFnZRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoBMTIqSU8gcmVxdWVzdHMgcXVldWVkIGZvciBhY2Nlc3MgdG8gdGhlIGRpc2suOhhBdmVyYWdlIGRpc2sgcXVldWUgZGVwdGhCLWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvRGlza1F1ZXVlRGVwdGgvQXZlcmFnZVILCAQSAgg8GgMI2AQK3gIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9EaXNrUXVldWVEZXB0aC9NYXhpbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgExMipJTyByZXF1ZXN0cyBxdWV1ZWQgZm9yIGFjY2VzcyB0byB0aGUgZGlzay46GE1heGltdW0gZGlzayBxdWV1ZSBkZXB0aEItYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9EaXNrUXVldWVEZXB0aC9NYXhpbXVtUgsIBBICCDwaAwjYBAreAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0Rpc2tRdWV1ZURlcHRoL01pbmltdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqATEyKklPIHJlcXVlc3RzIHF1ZXVlZCBmb3IgYWNjZXNzIHRvIHRoZSBkaXNrLjoYTWluaW11bSBkaXNrIHF1ZXVlIGRlcHRoQi1hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0Rpc2tRdWV1ZURlcHRoL01pbmltdW1SCwgEEgIIPBoDCNgECukCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRGlza1F1ZXVlRGVwdGgvU2FtcGxlQ291bnQSPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqATEyKklPIHJlcXVlc3RzIHF1ZXVlZCBmb3IgYWNjZXNzIHRvIHRoZSBkaXNrLjobU2FtcGxlcyBvZiBkaXNrIHF1ZXVlIGRlcHRoQjFhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0Rpc2tRdWV1ZURlcHRoL1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBArOAgpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0Rpc2tRdWV1ZURlcHRoL1N1bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAIgAyoBMTIqSU8gcmVxdWVzdHMgcXVldWVkIGZvciBhY2Nlc3MgdG8gdGhlIGRpc2suOhBEaXNrIHF1ZXVlIGRlcHRoQilhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0Rpc2tRdWV1ZURlcHRoL1N1bVILCAQSAgg8GgMI2AQKzAIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9GcmVlU3RvcmFnZVNwYWNlL0F2ZXJhZ2USPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqAkJ5MhJBdmFpbGFibGUgc3RvcmFnZS46GUF2ZXJhZ2UgYXZhaWxhYmxlIHN0b3JhZ2VCL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRnJlZVN0b3JhZ2VTcGFjZS9BdmVyYWdlUgsIBBICCDwaAwjYBArMAgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0ZyZWVTdG9yYWdlU3BhY2UvTWF4aW11bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoCQnkyEkF2YWlsYWJsZSBzdG9yYWdlLjoZTWF4aW11bSBhdmFpbGFibGUgc3RvcmFnZUIvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9GcmVlU3RvcmFnZVNwYWNlL01heGltdW1SCwgEEgIIPBoDCNgECswCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRnJlZVN0b3JhZ2VTcGFjZS9NaW5pbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgJCeTISQXZhaWxhYmxlIHN0b3JhZ2UuOhlNaW5pbXVtIGF2YWlsYWJsZSBzdG9yYWdlQi9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0ZyZWVTdG9yYWdlU3BhY2UvTWluaW11bVILCAQSAgg8GgMI2AQK1gIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9GcmVlU3RvcmFnZVNwYWNlL1NhbXBsZUNvdW50Ej0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgExMhJBdmFpbGFibGUgc3RvcmFnZS46HFNhbXBsZXMgb2YgYXZhaWxhYmxlIHN0b3JhZ2VCM2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRnJlZVN0b3JhZ2VTcGFjZS9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKvAIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9GcmVlU3RvcmFnZVNwYWNlL1N1bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAIgAyoCQnkyEkF2YWlsYWJsZSBzdG9yYWdlLjoRQXZhaWxhYmxlIHN0b3JhZ2VCK2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRnJlZVN0b3JhZ2VTcGFjZS9TdW1SCwgEEgIIPBoDCNgECsMCCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRnJlZWFibGVNZW1vcnkvQXZlcmFnZRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoCQnkyDkF2YWlsYWJsZSBSQU0uOhhBdmVyYWdlIGF2YWlsYWJsZSBtZW1vcnlCLWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvRnJlZWFibGVNZW1vcnkvQXZlcmFnZVILCAQSAgg8GgMI2AQKwwIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9GcmVlYWJsZU1lbW9yeS9NYXhpbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgJCeTIOQXZhaWxhYmxlIFJBTS46GE1heGltdW0gYXZhaWxhYmxlIG1lbW9yeUItYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9GcmVlYWJsZU1lbW9yeS9NYXhpbXVtUgsIBBICCDwaAwjYBArDAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0ZyZWVhYmxlTWVtb3J5L01pbmltdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqAkJ5Mg5BdmFpbGFibGUgUkFNLjoYTWluaW11bSBhdmFpbGFibGUgbWVtb3J5Qi1hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL0ZyZWVhYmxlTWVtb3J5L01pbmltdW1SCwgEEgIIPBoDCNgECs0CCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRnJlZWFibGVNZW1vcnkvU2FtcGxlQ291bnQSPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqATEyDkF2YWlsYWJsZSBSQU0uOhtTYW1wbGVzIG9mIGF2YWlsYWJsZSBtZW1vcnlCMWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvRnJlZWFibGVNZW1vcnkvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECrMCCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvRnJlZWFibGVNZW1vcnkvU3VtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgJCeTIOQXZhaWxhYmxlIFJBTS46EEF2YWlsYWJsZSBtZW1vcnlCKWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvRnJlZWFibGVNZW1vcnkvU3VtUgsIBBICCDwaAwjYBAqNAwpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL05ldHdvcmtSZWNlaXZlVGhyb3VnaHB1dC9BdmVyYWdlEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgRCeS9zMjhJbmNvbWluZyBuZXR3b3JrIHRyYWZmaWMsIGluY2x1ZGluZyByZXBsaWNhdGlvbiB0cmFmZmljLjoiQXZlcmFnZSBuZXR3b3JrIHJlY2VpdmUgdGhyb3VnaHB1dEI3YXdzLmdvb2dsZWFwaXMuY29tL1JEUy9OZXR3b3JrUmVjZWl2ZVRocm91Z2hwdXQvQXZlcmFnZVILCAQSAgg8GgMI2AQKjQMKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9OZXR3b3JrUmVjZWl2ZVRocm91Z2hwdXQvTWF4aW11bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoEQnkvczI4SW5jb21pbmcgbmV0d29yayB0cmFmZmljLCBpbmNsdWRpbmcgcmVwbGljYXRpb24gdHJhZmZpYy46Ik1heGltdW0gbmV0d29yayByZWNlaXZlIHRocm91Z2hwdXRCN2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvTmV0d29ya1JlY2VpdmVUaHJvdWdocHV0L01heGltdW1SCwgEEgIIPBoDCNgECo0DCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvTmV0d29ya1JlY2VpdmVUaHJvdWdocHV0L01pbmltdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqBEJ5L3MyOEluY29taW5nIG5ldHdvcmsgdHJhZmZpYywgaW5jbHVkaW5nIHJlcGxpY2F0aW9uIHRyYWZmaWMuOiJNaW5pbXVtIG5ldHdvcmsgcmVjZWl2ZSB0aHJvdWdocHV0Qjdhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL05ldHdvcmtSZWNlaXZlVGhyb3VnaHB1dC9NaW5pbXVtUgsIBBICCDwaAwjYBAqVAwpwcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL05ldHdvcmtSZWNlaXZlVGhyb3VnaHB1dC9TYW1wbGVDb3VudBI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAIgAyoBMTI4SW5jb21pbmcgbmV0d29yayB0cmFmZmljLCBpbmNsdWRpbmcgcmVwbGljYXRpb24gdHJhZmZpYy46JVNhbXBsZXMgb2YgbmV0d29yayByZWNlaXZlIHRocm91Z2hwdXRCO2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvTmV0d29ya1JlY2VpdmVUaHJvdWdocHV0L1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBAr9AgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL05ldHdvcmtSZWNlaXZlVGhyb3VnaHB1dC9TdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqBEJ5L3MyOEluY29taW5nIG5ldHdvcmsgdHJhZmZpYywgaW5jbHVkaW5nIHJlcGxpY2F0aW9uIHRyYWZmaWMuOhpOZXR3b3JrIHJlY2VpdmUgdGhyb3VnaHB1dEIzYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9OZXR3b3JrUmVjZWl2ZVRocm91Z2hwdXQvU3VtUgsIBBICCDwaAwjYBAqQAwptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL05ldHdvcmtUcmFuc21pdFRocm91Z2hwdXQvQXZlcmFnZRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoEQnkvczI4T3V0Z29pbmcgbmV0d29yayB0cmFmZmljLCBpbmNsdWRpbmcgcmVwbGljYXRpb24gdHJhZmZpYy46I0F2ZXJhZ2UgbmV0d29yayB0cmFuc21pdCB0aHJvdWdocHV0Qjhhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL05ldHdvcmtUcmFuc21pdFRocm91Z2hwdXQvQXZlcmFnZVILCAQSAgg8GgMI2AQKkAMKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9OZXR3b3JrVHJhbnNtaXRUaHJvdWdocHV0L01heGltdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqBEJ5L3MyOE91dGdvaW5nIG5ldHdvcmsgdHJhZmZpYywgaW5jbHVkaW5nIHJlcGxpY2F0aW9uIHRyYWZmaWMuOiNNYXhpbXVtIG5ldHdvcmsgdHJhbnNtaXQgdGhyb3VnaHB1dEI4YXdzLmdvb2dsZWFwaXMuY29tL1JEUy9OZXR3b3JrVHJhbnNtaXRUaHJvdWdocHV0L01heGltdW1SCwgEEgIIPBoDCNgECpADCm1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvTmV0d29ya1RyYW5zbWl0VGhyb3VnaHB1dC9NaW5pbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgRCeS9zMjhPdXRnb2luZyBuZXR3b3JrIHRyYWZmaWMsIGluY2x1ZGluZyByZXBsaWNhdGlvbiB0cmFmZmljLjojTWluaW11bSBuZXR3b3JrIHRyYW5zbWl0IHRocm91Z2hwdXRCOGF3cy5nb29nbGVhcGlzLmNvbS9SRFMvTmV0d29ya1RyYW5zbWl0VGhyb3VnaHB1dC9NaW5pbXVtUgsIBBICCDwaAwjYBAqYAwpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL05ldHdvcmtUcmFuc21pdFRocm91Z2hwdXQvU2FtcGxlQ291bnQSPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqATEyOE91dGdvaW5nIG5ldHdvcmsgdHJhZmZpYywgaW5jbHVkaW5nIHJlcGxpY2F0aW9uIHRyYWZmaWMuOiZTYW1wbGVzIG9mIG5ldHdvcmsgdHJhbnNtaXQgdGhyb3VnaHB1dEI8YXdzLmdvb2dsZWFwaXMuY29tL1JEUy9OZXR3b3JrVHJhbnNtaXRUaHJvdWdocHV0L1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBAqAAwppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL05ldHdvcmtUcmFuc21pdFRocm91Z2hwdXQvU3VtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgRCeS9zMjhPdXRnb2luZyBuZXR3b3JrIHRyYWZmaWMsIGluY2x1ZGluZyByZXBsaWNhdGlvbiB0cmFmZmljLjobTmV0d29yayB0cmFuc21pdCB0aHJvdWdocHV0QjRhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL05ldHdvcmtUcmFuc21pdFRocm91Z2hwdXQvU3VtUgsIBBICCDwaAwjYBAqtAgpXcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1F1ZXJpZXMvU3VtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgd7cXVlcnl9MhpUaGUgbnVtYmVyIG9mIFJEUyBxdWVyaWVzLjoHUXVlcmllc0IiYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9RdWVyaWVzL1N1bVILCAQSAgg8GgMI2AQK0AIKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9SZWFkSU9QUy9BdmVyYWdlEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgMxL3MyHEF2ZXJhZ2UgbnVtYmVyIG9mIHJlYWQgSU9QUy46IkF2ZXJhZ2UgcmVhZCBvcGVyYXRpb25zIHBlciBzZWNvbmRCJ2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZElPUFMvQXZlcmFnZVILCAQSAgg8GgMI2AQK0AIKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9SZWFkSU9QUy9NYXhpbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgMxL3MyHEF2ZXJhZ2UgbnVtYmVyIG9mIHJlYWQgSU9QUy46Ik1heGltdW0gcmVhZCBvcGVyYXRpb25zIHBlciBzZWNvbmRCJ2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZElPUFMvTWF4aW11bVILCAQSAgg8GgMI2AQK0AIKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9SZWFkSU9QUy9NaW5pbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgMxL3MyHEF2ZXJhZ2UgbnVtYmVyIG9mIHJlYWQgSU9QUy46Ik1pbmltdW0gcmVhZCBvcGVyYXRpb25zIHBlciBzZWNvbmRCJ2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZElPUFMvTWluaW11bVILCAQSAgg8GgMI2AQK2gIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9SZWFkSU9QUy9TYW1wbGVDb3VudBI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAIgAyoBMTIcQXZlcmFnZSBudW1iZXIgb2YgcmVhZCBJT1BTLjomU2FtcGxlcyBmb3IgcmVhZCBvcGVyYXRpb25zIHBlciBzZWNvbmRCK2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZElPUFMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECsACClhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZElPUFMvU3VtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgMxL3MyHEF2ZXJhZ2UgbnVtYmVyIG9mIHJlYWQgSU9QUy46GlJlYWQgb3BlcmF0aW9ucyBwZXIgc2Vjb25kQiNhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlYWRJT1BTL1N1bVILCAQSAgg8GgMI2AQK1QIKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9SZWFkTGF0ZW5jeS9BdmVyYWdlEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgFzMiFBdmVyYWdlIHRpbWUgdGFrZW4gZm9yIHJlYWQgSU9QUy46HkF2ZXJhZ2UgcmVhZCBvcGVyYXRpb24gbGF0ZW5jeUIqYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9SZWFkTGF0ZW5jeS9BdmVyYWdlUgsIBBICCDwaAwjYBArVAgpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlYWRMYXRlbmN5L01heGltdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqAXMyIUF2ZXJhZ2UgdGltZSB0YWtlbiBmb3IgcmVhZCBJT1BTLjoeTWF4aW11bSByZWFkIG9wZXJhdGlvbiBsYXRlbmN5Qiphd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlYWRMYXRlbmN5L01heGltdW1SCwgEEgIIPBoDCNgECtUCCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZExhdGVuY3kvTWluaW11bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoBczIhQXZlcmFnZSB0aW1lIHRha2VuIGZvciByZWFkIElPUFMuOh5NaW5pbXVtIHJlYWQgb3BlcmF0aW9uIGxhdGVuY3lCKmF3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZExhdGVuY3kvTWluaW11bVILCAQSAgg8GgMI2AQK4AIKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9SZWFkTGF0ZW5jeS9TYW1wbGVDb3VudBI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAIgAyoBMTIhQXZlcmFnZSB0aW1lIHRha2VuIGZvciByZWFkIElPUFMuOiFTYW1wbGVzIG9mIHJlYWQgb3BlcmF0aW9uIGxhdGVuY3lCLmF3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZExhdGVuY3kvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECsUCCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZExhdGVuY3kvU3VtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgFzMiFBdmVyYWdlIHRpbWUgdGFrZW4gZm9yIHJlYWQgSU9QUy46FlJlYWQgb3BlcmF0aW9uIGxhdGVuY3lCJmF3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZExhdGVuY3kvU3VtUgsIBBICCDwaAwjYBArXAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlYWRUaHJvdWdocHV0L0F2ZXJhZ2USPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqBEJ5L3MyHEJ5dGVzL3NlY29uZCByZWFkIGZyb20gZGlzay46HEF2ZXJhZ2UgZGlzayByZWFkIHRocm91Z2hwdXRCLWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZFRocm91Z2hwdXQvQXZlcmFnZVILCAQSAgg8GgMI2AQK1wIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9SZWFkVGhyb3VnaHB1dC9NYXhpbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgRCeS9zMhxCeXRlcy9zZWNvbmQgcmVhZCBmcm9tIGRpc2suOhxNYXhpbXVtIGRpc2sgcmVhZCB0aHJvdWdocHV0Qi1hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlYWRUaHJvdWdocHV0L01heGltdW1SCwgEEgIIPBoDCNgECtcCCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZFRocm91Z2hwdXQvTWluaW11bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoEQnkvczIcQnl0ZXMvc2Vjb25kIHJlYWQgZnJvbSBkaXNrLjocTWluaW11bSBkaXNrIHJlYWQgdGhyb3VnaHB1dEItYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9SZWFkVGhyb3VnaHB1dC9NaW5pbXVtUgsIBBICCDwaAwjYBArfAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlYWRUaHJvdWdocHV0L1NhbXBsZUNvdW50Ej0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgExMhxCeXRlcy9zZWNvbmQgcmVhZCBmcm9tIGRpc2suOh9TYW1wbGVzIG9mIGRpc2sgcmVhZCB0aHJvdWdocHV0QjFhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlYWRUaHJvdWdocHV0L1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBArHAgpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlYWRUaHJvdWdocHV0L1N1bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAIgAyoEQnkvczIcQnl0ZXMvc2Vjb25kIHJlYWQgZnJvbSBkaXNrLjoURGlzayByZWFkIHRocm91Z2hwdXRCKWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVhZFRocm91Z2hwdXQvU3VtUgsIBBICCDwaAwjYBArTAgpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlcGxpY2FMYWcvQXZlcmFnZRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoBczIoUmVwbGljYXRpb24gbGFnIChzZWNvbmRzIGJlaGluZCBtYXN0ZXIpLjoXQXZlcmFnZSByZXBsaWNhdGlvbiBsYWdCKWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVwbGljYUxhZy9BdmVyYWdlUgsIBBICCDwaAwjYBArTAgpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlcGxpY2FMYWcvTWF4aW11bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoBczIoUmVwbGljYXRpb24gbGFnIChzZWNvbmRzIGJlaGluZCBtYXN0ZXIpLjoXTWF4aW11bSByZXBsaWNhdGlvbiBsYWdCKWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVwbGljYUxhZy9NYXhpbXVtUgsIBBICCDwaAwjYBArTAgpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlcGxpY2FMYWcvTWluaW11bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoBczIoUmVwbGljYXRpb24gbGFnIChzZWNvbmRzIGJlaGluZCBtYXN0ZXIpLjoXTWluaW11bSByZXBsaWNhdGlvbiBsYWdCKWF3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVwbGljYUxhZy9NaW5pbXVtUgsIBBICCDwaAwjYBAreAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlcGxpY2FMYWcvU2FtcGxlQ291bnQSPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqATEyKFJlcGxpY2F0aW9uIGxhZyAoc2Vjb25kcyBiZWhpbmQgbWFzdGVyKS46GlNhbXBsZXMgb2YgcmVwbGljYXRpb24gbGFnQi1hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1JlcGxpY2FMYWcvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECsMCClpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvUmVwbGljYUxhZy9TdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqAXMyKFJlcGxpY2F0aW9uIGxhZyAoc2Vjb25kcyBiZWhpbmQgbWFzdGVyKS46D1JlcGxpY2F0aW9uIGxhZ0IlYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9SZXBsaWNhTGFnL1N1bVILCAQSAgg8GgMI2AQKtAIKXXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Td2FwVXNhZ2UvQXZlcmFnZRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoCQnkyEFN3YXAgc3BhY2UgdXNlZC46EUF2ZXJhZ2Ugc3dhcCB1c2VkQihhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1N3YXBVc2FnZS9BdmVyYWdlUgsIBBICCDwaAwjYBAq0AgpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1N3YXBVc2FnZS9NYXhpbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgJCeTIQU3dhcCBzcGFjZSB1c2VkLjoRTWF4aW11bSBzd2FwIHVzZWRCKGF3cy5nb29nbGVhcGlzLmNvbS9SRFMvU3dhcFVzYWdlL01heGltdW1SCwgEEgIIPBoDCNgECrQCCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvU3dhcFVzYWdlL01pbmltdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqAkJ5MhBTd2FwIHNwYWNlIHVzZWQuOhFNaW5pbXVtIHN3YXAgdXNlZEIoYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Td2FwVXNhZ2UvTWluaW11bVILCAQSAgg8GgMI2AQKvgIKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Td2FwVXNhZ2UvU2FtcGxlQ291bnQSPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqATEyEFN3YXAgc3BhY2UgdXNlZC46FFNhbXBsZXMgb2Ygc3dhcCB1c2VkQixhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1N3YXBVc2FnZS9TYW1wbGVDb3VudFILCAQSAgg8GgMI2AQKpAIKWXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Td2FwVXNhZ2UvU3VtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgJCeTIQU3dhcCBzcGFjZSB1c2VkLjoJU3dhcCB1c2VkQiRhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1N3YXBVc2FnZS9TdW1SCwgEEgIIPBoDCNgECtQCCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvV3JpdGVJT1BTL0F2ZXJhZ2USPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqAzEvczIdQXZlcmFnZSBudW1iZXIgb2Ygd3JpdGUgSU9QUy46I0F2ZXJhZ2Ugd3JpdGUgb3BlcmF0aW9ucyBwZXIgc2Vjb25kQihhd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlSU9QUy9BdmVyYWdlUgsIBBICCDwaAwjYBArUAgpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlSU9QUy9NYXhpbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgMxL3MyHUF2ZXJhZ2UgbnVtYmVyIG9mIHdyaXRlIElPUFMuOiNNYXhpbXVtIHdyaXRlIG9wZXJhdGlvbnMgcGVyIHNlY29uZEIoYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Xcml0ZUlPUFMvTWF4aW11bVILCAQSAgg8GgMI2AQK1AIKXXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Xcml0ZUlPUFMvTWluaW11bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoDMS9zMh1BdmVyYWdlIG51bWJlciBvZiB3cml0ZSBJT1BTLjojTWluaW11bSB3cml0ZSBvcGVyYXRpb25zIHBlciBzZWNvbmRCKGF3cy5nb29nbGVhcGlzLmNvbS9SRFMvV3JpdGVJT1BTL01pbmltdW1SCwgEEgIIPBoDCNgECt0CCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvV3JpdGVJT1BTL1NhbXBsZUNvdW50Ej0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YAiADKgExMh1BdmVyYWdlIG51bWJlciBvZiB3cml0ZSBJT1BTLjomU2FtcGxlcyBvZiB3cml0ZSBvcGVyYXRpb25zIHBlciBzZWNvbmRCLGF3cy5nb29nbGVhcGlzLmNvbS9SRFMvV3JpdGVJT1BTL1NhbXBsZUNvdW50UgsIBBICCDwaAwjYBArEAgpZcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlSU9QUy9TdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqAzEvczIdQXZlcmFnZSBudW1iZXIgb2Ygd3JpdGUgSU9QUy46G1dyaXRlIG9wZXJhdGlvbnMgcGVyIHNlY29uZEIkYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Xcml0ZUlPUFMvU3VtUgsIBBICCDwaAwjYBArZAgpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlTGF0ZW5jeS9BdmVyYWdlEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgFzMiJBdmVyYWdlIHRpbWUgdGFrZW4gZm9yIHdyaXRlIElPUFMuOh9BdmVyYWdlIHdyaXRlIG9wZXJhdGlvbiBsYXRlbmN5Qithd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlTGF0ZW5jeS9BdmVyYWdlUgsIBBICCDwaAwjYBArZAgpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlTGF0ZW5jeS9NYXhpbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgFzMiJBdmVyYWdlIHRpbWUgdGFrZW4gZm9yIHdyaXRlIElPUFMuOh9NYXhpbXVtIHdyaXRlIG9wZXJhdGlvbiBsYXRlbmN5Qithd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlTGF0ZW5jeS9NYXhpbXVtUgsIBBICCDwaAwjYBArZAgpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlTGF0ZW5jeS9NaW5pbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgFzMiJBdmVyYWdlIHRpbWUgdGFrZW4gZm9yIHdyaXRlIElPUFMuOh9NaW5pbXVtIHdyaXRlIG9wZXJhdGlvbiBsYXRlbmN5Qithd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlTGF0ZW5jeS9NaW5pbXVtUgsIBBICCDwaAwjYBArkAgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlTGF0ZW5jeS9TYW1wbGVDb3VudBI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAIgAyoBMTIiQXZlcmFnZSB0aW1lIHRha2VuIGZvciB3cml0ZSBJT1BTLjoiU2FtcGxlcyBvZiB3cml0ZSBvcGVyYXRpb24gbGF0ZW5jeUIvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Xcml0ZUxhdGVuY3kvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECskCClxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvV3JpdGVMYXRlbmN5L1N1bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAIgAyoBczIiQXZlcmFnZSB0aW1lIHRha2VuIGZvciB3cml0ZSBJT1BTLjoXV3JpdGUgb3BlcmF0aW9uIGxhdGVuY3lCJ2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvV3JpdGVMYXRlbmN5L1N1bVILCAQSAgg8GgMI2AQK2wIKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Xcml0ZVRocm91Z2hwdXQvQXZlcmFnZRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAEgAyoEQnkvczIdQnl0ZXMvc2Vjb25kIHdyaXR0ZW4gdG8gZGlzay46HUF2ZXJhZ2UgZGlzayB3cml0ZSB0aHJvdWdocHV0Qi5hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlVGhyb3VnaHB1dC9BdmVyYWdlUgsIBBICCDwaAwjYBArbAgpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUkRTL1dyaXRlVGhyb3VnaHB1dC9NYXhpbXVtEj0KCkVuZ2luZU5hbWUaL0RhdGFiYXNlIGVuZ2luZSBuYW1lIHRvIGZpbHRlciBieSAoZS5nLiBteXNxbCkuEjAKDURhdGFiYXNlQ2xhc3MaH0RhdGFiYXNlIGluc3RhbmNlIGNsYXNzIGZpbHRlci4YASADKgRCeS9zMh1CeXRlcy9zZWNvbmQgd3JpdHRlbiB0byBkaXNrLjodTWF4aW11bSBkaXNrIHdyaXRlIHRocm91Z2hwdXRCLmF3cy5nb29nbGVhcGlzLmNvbS9SRFMvV3JpdGVUaHJvdWdocHV0L01heGltdW1SCwgEEgIIPBoDCNgECtsCCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvV3JpdGVUaHJvdWdocHV0L01pbmltdW0SPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgBIAMqBEJ5L3MyHUJ5dGVzL3NlY29uZCB3cml0dGVuIHRvIGRpc2suOh1NaW5pbXVtIGRpc2sgd3JpdGUgdGhyb3VnaHB1dEIuYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Xcml0ZVRocm91Z2hwdXQvTWluaW11bVILCAQSAgg8GgMI2AQK4wIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Xcml0ZVRocm91Z2hwdXQvU2FtcGxlQ291bnQSPQoKRW5naW5lTmFtZRovRGF0YWJhc2UgZW5naW5lIG5hbWUgdG8gZmlsdGVyIGJ5IChlLmcuIG15c3FsKS4SMAoNRGF0YWJhc2VDbGFzcxofRGF0YWJhc2UgaW5zdGFuY2UgY2xhc3MgZmlsdGVyLhgCIAMqATEyHUJ5dGVzL3NlY29uZCB3cml0dGVuIHRvIGRpc2suOiBTYW1wbGVzIG9mIGRpc2sgd3JpdGUgdGhyb3VnaHB1dEIyYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Xcml0ZVRocm91Z2hwdXQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCNgECssCCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SRFMvV3JpdGVUaHJvdWdocHV0L1N1bRI9CgpFbmdpbmVOYW1lGi9EYXRhYmFzZSBlbmdpbmUgbmFtZSB0byBmaWx0ZXIgYnkgKGUuZy4gbXlzcWwpLhIwCg1EYXRhYmFzZUNsYXNzGh9EYXRhYmFzZSBpbnN0YW5jZSBjbGFzcyBmaWx0ZXIuGAIgAyoEQnkvczIdQnl0ZXMvc2Vjb25kIHdyaXR0ZW4gdG8gZGlzay46FURpc2sgd3JpdGUgdGhyb3VnaHB1dEIqYXdzLmdvb2dsZWFwaXMuY29tL1JEUy9Xcml0ZVRocm91Z2hwdXQvU3VtUgsIBBICCDwaAwjYBAqSAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvQ1BVVXRpbGl6YXRpb24vQXZlcmFnZRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqASUyHENQVSB1dGlsaXplZCBieSB0aGUgY2x1c3Rlci46F0F2ZXJhZ2UgQ1BVIHV0aWxpemF0aW9uQjJhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvQ1BVVXRpbGl6YXRpb24vQXZlcmFnZVILCAQSAgg8GgMIsAkKkgIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L0NQVVV0aWxpemF0aW9uL01heGltdW0SKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YASADKgElMhxDUFUgdXRpbGl6ZWQgYnkgdGhlIGNsdXN0ZXIuOhdNYXhpbXVtIENQVSB1dGlsaXphdGlvbkIyYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L0NQVVV0aWxpemF0aW9uL01heGltdW1SCwgEEgIIPBoDCLAJCpICCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9DUFVVdGlsaXphdGlvbi9NaW5pbXVtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBJTIcQ1BVIHV0aWxpemVkIGJ5IHRoZSBjbHVzdGVyLjoXTWluaW11bSBDUFUgdXRpbGl6YXRpb25CMmF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9DUFVVdGlsaXphdGlvbi9NaW5pbXVtUgsIBBICCDwaAwiwCQqdAgprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvQ1BVVXRpbGl6YXRpb24vU2FtcGxlQ291bnQSKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YAiADKgExMhxDUFUgdXRpbGl6ZWQgYnkgdGhlIGNsdXN0ZXIuOhpTYW1wbGVzIG9mIENQVSB1dGlsaXphdGlvbkI2YXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L0NQVVV0aWxpemF0aW9uL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqCAgpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvQ1BVVXRpbGl6YXRpb24vU3VtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAIgAyoBJTIcQ1BVIHV0aWxpemVkIGJ5IHRoZSBjbHVzdGVyLjoPQ1BVIHV0aWxpemF0aW9uQi5hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvQ1BVVXRpbGl6YXRpb24vU3VtUgsIBBICCDwaAwiwCQqpAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvRGF0YWJhc2VDb25uZWN0aW9ucy9BdmVyYWdlEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBMTIkQ291bnQgb2YgdG90YWwgZGF0YWJhc2UgY29ubmVjdGlvbnMuOhxBdmVyYWdlIGRhdGFiYXNlIGNvbm5lY3Rpb25zQjdhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvRGF0YWJhc2VDb25uZWN0aW9ucy9BdmVyYWdlUgsIBBICCDwaAwiwCQqpAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvRGF0YWJhc2VDb25uZWN0aW9ucy9NYXhpbXVtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBMTIkQ291bnQgb2YgdG90YWwgZGF0YWJhc2UgY29ubmVjdGlvbnMuOhxNYXhpbXVtIGRhdGFiYXNlIGNvbm5lY3Rpb25zQjdhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvRGF0YWJhc2VDb25uZWN0aW9ucy9NYXhpbXVtUgsIBBICCDwaAwiwCQqpAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvRGF0YWJhc2VDb25uZWN0aW9ucy9NaW5pbXVtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBMTIkQ291bnQgb2YgdG90YWwgZGF0YWJhc2UgY29ubmVjdGlvbnMuOhxNaW5pbXVtIGRhdGFiYXNlIGNvbm5lY3Rpb25zQjdhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvRGF0YWJhc2VDb25uZWN0aW9ucy9NaW5pbXVtUgsIBBICCDwaAwiwCQq0AgpwcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvRGF0YWJhc2VDb25uZWN0aW9ucy9TYW1wbGVDb3VudBIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqATEyJENvdW50IG9mIHRvdGFsIGRhdGFiYXNlIGNvbm5lY3Rpb25zLjofU2FtcGxlcyBvZiBkYXRhYmFzZSBjb25uZWN0aW9uc0I7YXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L0RhdGFiYXNlQ29ubmVjdGlvbnMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCpkCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9EYXRhYmFzZUNvbm5lY3Rpb25zL1N1bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqATEyJENvdW50IG9mIHRvdGFsIGRhdGFiYXNlIGNvbm5lY3Rpb25zLjoURGF0YWJhc2UgY29ubmVjdGlvbnNCM2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9EYXRhYmFzZUNvbm5lY3Rpb25zL1N1bVILCAQSAgg8GgMIsAkKuwIKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L0hlYWx0aFN0YXR1cy9BdmVyYWdlEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBMTJDQm9vbGVhbiB0aGF0IHJlcHJlc2VudHMgdGhlIHN0YXR1cyBvZiB0aGUgY2x1c3RlciBhbmQgaXRzIGRhdGFiYXNlLjodQXZlcmFnZSBjbHVzdGVyIGhlYWx0aCBzdGF0dXNCMGF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9IZWFsdGhTdGF0dXMvQXZlcmFnZVILCAQSAgg8GgMIsAkKxgIKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L0hlYWx0aFN0YXR1cy9TYW1wbGVDb3VudBIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqATEyQ0Jvb2xlYW4gdGhhdCByZXByZXNlbnRzIHRoZSBzdGF0dXMgb2YgdGhlIGNsdXN0ZXIgYW5kIGl0cyBkYXRhYmFzZS46IFNhbXBsZXMgb2YgY2x1c3RlciBoZWFsdGggc3RhdHVzQjRhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvSGVhbHRoU3RhdHVzL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqrAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvSGVhbHRoU3RhdHVzL1N1bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqATEyQ0Jvb2xlYW4gdGhhdCByZXByZXNlbnRzIHRoZSBzdGF0dXMgb2YgdGhlIGNsdXN0ZXIgYW5kIGl0cyBkYXRhYmFzZS46FUNsdXN0ZXIgaGVhbHRoIHN0YXR1c0IsYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L0hlYWx0aFN0YXR1cy9TdW1SCwgEEgIIPBoDCLAJCsYCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9NYWludGVuYW5jZU1vZGUvQXZlcmFnZRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqATEyPkJvb2xlYW4gaW5kaWNhdGluZyB0aGUgbWFpbnRlbmFuY2UgbW9kZSBzdGF0dXMgb2YgdGhlIGNsdXN0ZXIuOidBdmVyYWdlIENsdXN0ZXIgbWFpbnRlbmFuY2UgbW9kZSBzdGF0dXNCM2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9NYWludGVuYW5jZU1vZGUvQXZlcmFnZVILCAQSAgg8GgMIsAkK0QIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L01haW50ZW5hbmNlTW9kZS9TYW1wbGVDb3VudBIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqATEyPkJvb2xlYW4gaW5kaWNhdGluZyB0aGUgbWFpbnRlbmFuY2UgbW9kZSBzdGF0dXMgb2YgdGhlIGNsdXN0ZXIuOipTYW1wbGVzIG9mIGNsdXN0ZXIgbWFpbnRlbmFuY2UgbW9kZSBzdGF0dXNCN2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9NYWludGVuYW5jZU1vZGUvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCrYCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9NYWludGVuYW5jZU1vZGUvU3VtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAIgAyoBMTI+Qm9vbGVhbiBpbmRpY2F0aW5nIHRoZSBtYWludGVuYW5jZSBtb2RlIHN0YXR1cyBvZiB0aGUgY2x1c3Rlci46H0NsdXN0ZXIgbWFpbnRlbmFuY2UgbW9kZSBzdGF0dXNCL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9NYWludGVuYW5jZU1vZGUvU3VtUgsIBBICCDwaAwiwCQqqAgpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvTmV0d29ya1JlY2VpdmVUaHJvdWdocHV0L0F2ZXJhZ2USKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YASADKgRCeS9zMhJEYXRhIHJlY2VpdmUgcmF0ZS46IkF2ZXJhZ2UgbmV0d29yayByZWNlaXZlIHRocm91Z2hwdXRCPGF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9OZXR3b3JrUmVjZWl2ZVRocm91Z2hwdXQvQXZlcmFnZVILCAQSAgg8GgMIsAkKqgIKcXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L05ldHdvcmtSZWNlaXZlVGhyb3VnaHB1dC9NYXhpbXVtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoEQnkvczISRGF0YSByZWNlaXZlIHJhdGUuOiJNYXhpbXVtIG5ldHdvcmsgcmVjZWl2ZSB0aHJvdWdocHV0Qjxhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvTmV0d29ya1JlY2VpdmVUaHJvdWdocHV0L01heGltdW1SCwgEEgIIPBoDCLAJCqoCCnFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9OZXR3b3JrUmVjZWl2ZVRocm91Z2hwdXQvTWluaW11bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqBEJ5L3MyEkRhdGEgcmVjZWl2ZSByYXRlLjoiTWluaW11bSBuZXR3b3JrIHJlY2VpdmUgdGhyb3VnaHB1dEI8YXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L05ldHdvcmtSZWNlaXZlVGhyb3VnaHB1dC9NaW5pbXVtUgsIBBICCDwaAwiwCQqyAgp1cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvTmV0d29ya1JlY2VpdmVUaHJvdWdocHV0L1NhbXBsZUNvdW50EigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAIgAyoBMTISRGF0YSByZWNlaXZlIHJhdGUuOiVTYW1wbGVzIG9mIG5ldHdvcmsgcmVjZWl2ZSB0aHJvdWdocHV0QkBhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvTmV0d29ya1JlY2VpdmVUaHJvdWdocHV0L1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQqaAgptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvTmV0d29ya1JlY2VpdmVUaHJvdWdocHV0L1N1bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqBEJ5L3MyEkRhdGEgcmVjZWl2ZSByYXRlLjoaTmV0d29yayByZWNlaXZlIHRocm91Z2hwdXRCOGF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9OZXR3b3JrUmVjZWl2ZVRocm91Z2hwdXQvU3VtUgsIBBICCDwaAwiwCQqrAgpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvTmV0d29ya1RyYW5zbWl0VGhyb3VnaHB1dC9BdmVyYWdlEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoEQnkvczIQRGF0YSB3cml0ZSByYXRlLjojQXZlcmFnZSBuZXR3b3JrIHRyYW5zbWl0IHRocm91Z2hwdXRCPWF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9OZXR3b3JrVHJhbnNtaXRUaHJvdWdocHV0L0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCqsCCnJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9OZXR3b3JrVHJhbnNtaXRUaHJvdWdocHV0L01heGltdW0SKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YASADKgRCeS9zMhBEYXRhIHdyaXRlIHJhdGUuOiNNYXhpbXVtIG5ldHdvcmsgdHJhbnNtaXQgdGhyb3VnaHB1dEI9YXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L05ldHdvcmtUcmFuc21pdFRocm91Z2hwdXQvTWF4aW11bVILCAQSAgg8GgMIsAkKqwIKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L05ldHdvcmtUcmFuc21pdFRocm91Z2hwdXQvTWluaW11bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqBEJ5L3MyEERhdGEgd3JpdGUgcmF0ZS46I01pbmltdW0gbmV0d29yayB0cmFuc21pdCB0aHJvdWdocHV0Qj1hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvTmV0d29ya1RyYW5zbWl0VGhyb3VnaHB1dC9NaW5pbXVtUgsIBBICCDwaAwiwCQqzAgp2cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvTmV0d29ya1RyYW5zbWl0VGhyb3VnaHB1dC9TYW1wbGVDb3VudBIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqATEyEERhdGEgd3JpdGUgcmF0ZS46JlNhbXBsZXMgb2YgbmV0d29yayB0cmFuc21pdCB0aHJvdWdocHV0QkFhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvTmV0d29ya1RyYW5zbWl0VGhyb3VnaHB1dC9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKmwIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L05ldHdvcmtUcmFuc21pdFRocm91Z2hwdXQvU3VtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAIgAyoEQnkvczIQRGF0YSB3cml0ZSByYXRlLjobTmV0d29yayB0cmFuc21pdCB0aHJvdWdocHV0Qjlhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvTmV0d29ya1RyYW5zbWl0VGhyb3VnaHB1dC9TdW1SCwgEEgIIPBoDCLAJCp0CCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9QZXJjZW50YWdlRGlza1NwYWNlVXNlZC9BdmVyYWdlEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBJTIUVXRpbGl6ZWQgZGlzayBzcGFjZS46GEF2ZXJhZ2UgZGlzayB1dGlsaXphdGlvbkI7YXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1BlcmNlbnRhZ2VEaXNrU3BhY2VVc2VkL0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCp0CCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9QZXJjZW50YWdlRGlza1NwYWNlVXNlZC9NYXhpbXVtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBJTIUVXRpbGl6ZWQgZGlzayBzcGFjZS46GE1heGltdW0gZGlzayB1dGlsaXphdGlvbkI7YXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1BlcmNlbnRhZ2VEaXNrU3BhY2VVc2VkL01heGltdW1SCwgEEgIIPBoDCLAJCp0CCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9QZXJjZW50YWdlRGlza1NwYWNlVXNlZC9NaW5pbXVtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBJTIUVXRpbGl6ZWQgZGlzayBzcGFjZS46GE1pbmltdW0gZGlzayB1dGlsaXphdGlvbkI7YXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1BlcmNlbnRhZ2VEaXNrU3BhY2VVc2VkL01pbmltdW1SCwgEEgIIPBoDCLAJCqgCCnRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9QZXJjZW50YWdlRGlza1NwYWNlVXNlZC9TYW1wbGVDb3VudBIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqATEyFFV0aWxpemVkIGRpc2sgc3BhY2UuOhtTYW1wbGVzIG9mIGRpc2sgdXRpbGl6YXRpb25CP2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9QZXJjZW50YWdlRGlza1NwYWNlVXNlZC9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKjQIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1BlcmNlbnRhZ2VEaXNrU3BhY2VVc2VkL1N1bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqASUyFFV0aWxpemVkIGRpc2sgc3BhY2UuOhBEaXNrIHV0aWxpemF0aW9uQjdhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUGVyY2VudGFnZURpc2tTcGFjZVVzZWQvU3VtUgsIBBICCDwaAwiwCQqIAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUmVhZElPUFMvQXZlcmFnZRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqAzEvczIRUmVhZHMgcGVyIHNlY29uZC46IkF2ZXJhZ2UgcmVhZCBvcGVyYXRpb25zIHBlciBzZWNvbmRCLGF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkSU9QUy9BdmVyYWdlUgsIBBICCDwaAwiwCQqIAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUmVhZElPUFMvTWF4aW11bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqAzEvczIRUmVhZHMgcGVyIHNlY29uZC46Ik1heGltdW0gcmVhZCBvcGVyYXRpb25zIHBlciBzZWNvbmRCLGF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkSU9QUy9NYXhpbXVtUgsIBBICCDwaAwiwCQqIAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUmVhZElPUFMvTWluaW11bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqAzEvczIRUmVhZHMgcGVyIHNlY29uZC46Ik1pbmltdW0gcmVhZCBvcGVyYXRpb25zIHBlciBzZWNvbmRCLGF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkSU9QUy9NaW5pbXVtUgsIBBICCDwaAwiwCQqRAgplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUmVhZElPUFMvU2FtcGxlQ291bnQSKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YAiADKgExMhFSZWFkcyBwZXIgc2Vjb25kLjolU2FtcGxlcyBvZiByZWFkIG9wZXJhdGlvbnMgcGVyIHNlY29uZEIwYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1JlYWRJT1BTL1NhbXBsZUNvdW50UgsIBBICCDwaAwiwCQr4AQpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUmVhZElPUFMvU3VtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAIgAyoDMS9zMhFSZWFkcyBwZXIgc2Vjb25kLjoaUmVhZCBvcGVyYXRpb25zIHBlciBzZWNvbmRCKGF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkSU9QUy9TdW1SCwgEEgIIPBoDCLAJCqMCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkTGF0ZW5jeS9BdmVyYWdlEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBczIsVGhlIGF2ZXJhZ2UgZGlzayBJL08gcmVhZCBvcGVyYXRpb24gbGF0ZW5jeS46HkF2ZXJhZ2UgcmVhZCBvcGVyYXRpb24gbGF0ZW5jeUIvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1JlYWRMYXRlbmN5L0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCqMCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkTGF0ZW5jeS9NYXhpbXVtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBczIsVGhlIGF2ZXJhZ2UgZGlzayBJL08gcmVhZCBvcGVyYXRpb24gbGF0ZW5jeS46Hk1heGltdW0gcmVhZCBvcGVyYXRpb24gbGF0ZW5jeUIvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1JlYWRMYXRlbmN5L01heGltdW1SCwgEEgIIPBoDCLAJCqMCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkTGF0ZW5jeS9NaW5pbXVtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBczIsVGhlIGF2ZXJhZ2UgZGlzayBJL08gcmVhZCBvcGVyYXRpb24gbGF0ZW5jeS46Hk1pbmltdW0gcmVhZCBvcGVyYXRpb24gbGF0ZW5jeUIvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1JlYWRMYXRlbmN5L01pbmltdW1SCwgEEgIIPBoDCLAJCq4CCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkTGF0ZW5jeS9TYW1wbGVDb3VudBIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqATEyLFRoZSBhdmVyYWdlIGRpc2sgSS9PIHJlYWQgb3BlcmF0aW9uIGxhdGVuY3kuOiFTYW1wbGVzIG9mIHJlYWQgb3BlcmF0aW9uIGxhdGVuY3lCM2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkTGF0ZW5jeS9TYW1wbGVDb3VudFILCAQSAgg8GgMIsAkKkwIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1JlYWRMYXRlbmN5L1N1bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqAXMyLFRoZSBhdmVyYWdlIGRpc2sgSS9PIHJlYWQgb3BlcmF0aW9uIGxhdGVuY3kuOhZSZWFkIG9wZXJhdGlvbiBsYXRlbmN5Qithd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUmVhZExhdGVuY3kvU3VtUgsIBBICCDwaAwiwCQqjAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUmVhZFRocm91Z2hwdXQvQXZlcmFnZRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqBEJ5L3MyJVRoZSBhdmVyYWdlIGRpc2sgSS9PIHJlYWQgdGhyb3VnaHB1dC46HEF2ZXJhZ2UgZGlzayByZWFkIHRocm91Z2hwdXRCMmF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkVGhyb3VnaHB1dC9BdmVyYWdlUgsIBBICCDwaAwiwCQqjAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUmVhZFRocm91Z2hwdXQvTWF4aW11bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqBEJ5L3MyJVRoZSBhdmVyYWdlIGRpc2sgSS9PIHJlYWQgdGhyb3VnaHB1dC46HE1heGltdW0gZGlzayByZWFkIHRocm91Z2hwdXRCMmF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkVGhyb3VnaHB1dC9NYXhpbXVtUgsIBBICCDwaAwiwCQqjAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUmVhZFRocm91Z2hwdXQvTWluaW11bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqBEJ5L3MyJVRoZSBhdmVyYWdlIGRpc2sgSS9PIHJlYWQgdGhyb3VnaHB1dC46HE1pbmltdW0gZGlzayByZWFkIHRocm91Z2hwdXRCMmF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkVGhyb3VnaHB1dC9NaW5pbXVtUgsIBBICCDwaAwiwCQqrAgprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUmVhZFRocm91Z2hwdXQvU2FtcGxlQ291bnQSKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YAiADKgExMiVUaGUgYXZlcmFnZSBkaXNrIEkvTyByZWFkIHRocm91Z2hwdXQuOh9TYW1wbGVzIG9mIGRpc2sgcmVhZCB0aHJvdWdocHV0QjZhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvUmVhZFRocm91Z2hwdXQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCpMCCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9SZWFkVGhyb3VnaHB1dC9TdW0SKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YAiADKgRCeS9zMiVUaGUgYXZlcmFnZSBkaXNrIEkvTyByZWFkIHRocm91Z2hwdXQuOhREaXNrIHJlYWQgdGhyb3VnaHB1dEIuYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1JlYWRUaHJvdWdocHV0L1N1bVILCAQSAgg8GgMIsAkKjAIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1dyaXRlSU9QUy9BdmVyYWdlEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoDMS9zMhJXcml0ZXMgcGVyIHNlY29uZC46I0F2ZXJhZ2Ugd3JpdGUgb3BlcmF0aW9ucyBwZXIgc2Vjb25kQi1hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvV3JpdGVJT1BTL0F2ZXJhZ2VSCwgEEgIIPBoDCLAJCowCCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZUlPUFMvTWF4aW11bRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqAzEvczISV3JpdGVzIHBlciBzZWNvbmQuOiNNYXhpbXVtIHdyaXRlIG9wZXJhdGlvbnMgcGVyIHNlY29uZEItYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1dyaXRlSU9QUy9NYXhpbXVtUgsIBBICCDwaAwiwCQqMAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvV3JpdGVJT1BTL01pbmltdW0SKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YASADKgMxL3MyEldyaXRlcyBwZXIgc2Vjb25kLjojTWluaW11bSB3cml0ZSBvcGVyYXRpb25zIHBlciBzZWNvbmRCLWF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZUlPUFMvTWluaW11bVILCAQSAgg8GgMIsAkKlQIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1dyaXRlSU9QUy9TYW1wbGVDb3VudBIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgCIAMqATEyEldyaXRlcyBwZXIgc2Vjb25kLjomU2FtcGxlcyBvZiB3cml0ZSBvcGVyYXRpb25zIHBlciBzZWNvbmRCMWF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZUlPUFMvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCvwBCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZUlPUFMvU3VtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAIgAyoDMS9zMhJXcml0ZXMgcGVyIHNlY29uZC46G1dyaXRlIG9wZXJhdGlvbnMgcGVyIHNlY29uZEIpYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1dyaXRlSU9QUy9TdW1SCwgEEgIIPBoDCLAJCqcCCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZUxhdGVuY3kvQXZlcmFnZRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqAXMyLVRoZSBhdmVyYWdlIGRpc2sgSS9PIHdyaXRlIG9wZXJhdGlvbiBsYXRlbmN5LjofQXZlcmFnZSB3cml0ZSBvcGVyYXRpb24gbGF0ZW5jeUIwYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1dyaXRlTGF0ZW5jeS9BdmVyYWdlUgsIBBICCDwaAwiwCQqnAgplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvV3JpdGVMYXRlbmN5L01heGltdW0SKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YASADKgFzMi1UaGUgYXZlcmFnZSBkaXNrIEkvTyB3cml0ZSBvcGVyYXRpb24gbGF0ZW5jeS46H01heGltdW0gd3JpdGUgb3BlcmF0aW9uIGxhdGVuY3lCMGF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZUxhdGVuY3kvTWF4aW11bVILCAQSAgg8GgMIsAkKpwIKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1dyaXRlTGF0ZW5jeS9NaW5pbXVtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoBczItVGhlIGF2ZXJhZ2UgZGlzayBJL08gd3JpdGUgb3BlcmF0aW9uIGxhdGVuY3kuOh9NaW5pbXVtIHdyaXRlIG9wZXJhdGlvbiBsYXRlbmN5QjBhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvV3JpdGVMYXRlbmN5L01pbmltdW1SCwgEEgIIPBoDCLAJCrICCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZUxhdGVuY3kvU2FtcGxlQ291bnQSKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YAiADKgExMi1UaGUgYXZlcmFnZSBkaXNrIEkvTyB3cml0ZSBvcGVyYXRpb24gbGF0ZW5jeS46IlNhbXBsZXMgb2Ygd3JpdGUgb3BlcmF0aW9uIGxhdGVuY3lCNGF3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZUxhdGVuY3kvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCpcCCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZUxhdGVuY3kvU3VtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAIgAyoBczItVGhlIGF2ZXJhZ2UgZGlzayBJL08gd3JpdGUgb3BlcmF0aW9uIGxhdGVuY3kuOhdXcml0ZSBvcGVyYXRpb24gbGF0ZW5jeUIsYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1dyaXRlTGF0ZW5jeS9TdW1SCwgEEgIIPBoDCLAJCqcCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZVRocm91Z2hwdXQvQXZlcmFnZRIoCgZOb2RlSUQaHlRoZSBJRCBvZiBhIG5vZGUgaW4gYSBjbHVzdGVyLhgBIAMqBEJ5L3MyJlRoZSBhdmVyYWdlIGRpc2sgSS9PIHdyaXRlIHRocm91Z2hwdXQuOh1BdmVyYWdlIGRpc2sgd3JpdGUgdGhyb3VnaHB1dEIzYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1dyaXRlVGhyb3VnaHB1dC9BdmVyYWdlUgsIBBICCDwaAwiwCQqnAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvV3JpdGVUaHJvdWdocHV0L01heGltdW0SKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YASADKgRCeS9zMiZUaGUgYXZlcmFnZSBkaXNrIEkvTyB3cml0ZSB0aHJvdWdocHV0LjodTWF4aW11bSBkaXNrIHdyaXRlIHRocm91Z2hwdXRCM2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZVRocm91Z2hwdXQvTWF4aW11bVILCAQSAgg8GgMIsAkKpwIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1dyaXRlVGhyb3VnaHB1dC9NaW5pbXVtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAEgAyoEQnkvczImVGhlIGF2ZXJhZ2UgZGlzayBJL08gd3JpdGUgdGhyb3VnaHB1dC46HU1pbmltdW0gZGlzayB3cml0ZSB0aHJvdWdocHV0QjNhd3MuZ29vZ2xlYXBpcy5jb20vUmVkc2hpZnQvV3JpdGVUaHJvdWdocHV0L01pbmltdW1SCwgEEgIIPBoDCLAJCq8CCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZVRocm91Z2hwdXQvU2FtcGxlQ291bnQSKAoGTm9kZUlEGh5UaGUgSUQgb2YgYSBub2RlIGluIGEgY2x1c3Rlci4YAiADKgExMiZUaGUgYXZlcmFnZSBkaXNrIEkvTyB3cml0ZSB0aHJvdWdocHV0LjogU2FtcGxlcyBvZiBkaXNrIHdyaXRlIHRocm91Z2hwdXRCN2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZVRocm91Z2hwdXQvU2FtcGxlQ291bnRSCwgEEgIIPBoDCLAJCpcCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9SZWRzaGlmdC9Xcml0ZVRocm91Z2hwdXQvU3VtEigKBk5vZGVJRBoeVGhlIElEIG9mIGEgbm9kZSBpbiBhIGNsdXN0ZXIuGAIgAyoEQnkvczImVGhlIGF2ZXJhZ2UgZGlzayBJL08gd3JpdGUgdGhyb3VnaHB1dC46FURpc2sgd3JpdGUgdGhyb3VnaHB1dEIvYXdzLmdvb2dsZWFwaXMuY29tL1JlZHNoaWZ0L1dyaXRlVGhyb3VnaHB1dC9TdW1SCwgEEgIIPBoDCLAJCvwBCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TMy9CdWNrZXRTaXplQnl0ZXMvU3VtEiMKC1N0b3JhZ2VUeXBlGhRTdG9yYWdlIGJ1Y2tldCB0eXBlLhgCIAMqAkJ5MiROdW1iZXIgb2YgYnl0ZXMgY3VycmVudGx5IGluIGJ1Y2tldC46DEJ1Y2tldCBieXRlc0IpYXdzLmdvb2dsZWFwaXMuY29tL1MzL0J1Y2tldFNpemVCeXRlcy9TdW1SDggEEgQIgKMFGgQI4KgBCusBCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TMy9OdW1iZXJPZk9iamVjdHMvU3VtEiMKC1N0b3JhZ2VUeXBlGhRTdG9yYWdlIGJ1Y2tldCB0eXBlLhgCIAMqATEyEk9iamVjdHMgaW4gYnVja2V0LjoOQnVja2V0IG9iamVjdHNCKWF3cy5nb29nbGVhcGlzLmNvbS9TMy9OdW1iZXJPZk9iamVjdHMvU3VtUg4IBBIECICjBRoECOCoAQrQAQpTcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU0VTL0JvdW5jZXMYAiADKgExMjRUaGUgbnVtYmVyIG9mIGJvdW5jZWQgZW1haWxzIGluIHRoZSBwYXN0IDE1IG1pbnV0ZXMuOg5FbWFpbHMgYm91bmNlZEIeYXdzLmdvb2dsZWFwaXMuY29tL1NFUy9Cb3VuY2VzUgwIBBIDCKwCGgMIiA4K2gEKVnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NFUy9Db21wbGFpbnRzGAIgAyoBMTI2VGhlIG51bWJlciBvZiBlbWFpbCBjb21wbGFpbnRzIGluIHRoZSBwYXN0IDE1IG1pbnV0ZXMuOhBFbWFpbCBjb21wbGFpbnRzQiFhd3MuZ29vZ2xlYXBpcy5jb20vU0VTL0NvbXBsYWludHNSDAgEEgMIrAIaAwiIDgrcAQpccHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU0VTL0RlbGl2ZXJ5QXR0ZW1wdHMYAiADKgExMjFUaGUgbnVtYmVyIG9mIGVtYWlscyBzZW50IGluIHRoZSBwYXN0IDE1IG1pbnV0ZXMuOgtFbWFpbHMgc2VudEInYXdzLmdvb2dsZWFwaXMuY29tL1NFUy9EZWxpdmVyeUF0dGVtcHRzUgwIBBIDCKwCGgMIiA4K+AEKWXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NFUy9NYXgyNEhvdXJTZW5kGAEgAyoBMTJLVGhlIG1heGltdW0gbnVtYmVyIG9mIGVtYWlscyB0aGF0IHlvdSBjYW4gc2VuZCBvdmVyIHRoZSBjb3Vyc2Ugb2YgMjQgaG91cnMuOhNFbWFpbCBtYXhpbXVtICgyNGgpQiRhd3MuZ29vZ2xlYXBpcy5jb20vU0VTL01heDI0SG91clNlbmRSDAgEEgMIrAIaAwiIDgrkAQpXcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU0VTL01heFNlbmRSYXRlGAEgAyoDMS9zMjpUaGUgbWF4aW11bSBudW1iZXIgb2YgZW1haWxzIHRoYXQgeW91IGNhbiBzZW5kIHBlciBzZWNvbmQuOhJFbWFpbCBtYXhpbXVtIHJhdGVCImF3cy5nb29nbGVhcGlzLmNvbS9TRVMvTWF4U2VuZFJhdGVSDAgEEgMIrAIaAwiIDgrSAQpTcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU0VTL1JlamVjdHMYAiADKgExMjVUaGUgbnVtYmVyIG9mIHJlamVjdGVkIGVtYWlscyBpbiB0aGUgcGFzdCAxNSBtaW51dGVzLjoPRW1haWxzIHJlamVjdGVkQh5hd3MuZ29vZ2xlYXBpcy5jb20vU0VTL1JlamVjdHNSDAgEEgMIrAIaAwiIDgrPAQpbcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU0VTL1NlbnRMYXN0MjRIb3VycxgBIAMqATEyIVNlbnQgZW1haWxzIGluIHRoZSBsYXN0IDI0IGhvdXJzLjoQRW1haWwgc2VudCAoMjRoKUImYXdzLmdvb2dsZWFwaXMuY29tL1NFUy9TZW50TGFzdDI0SG91cnNSDAgEEgMIrAIaAwiIDgq7AgpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU05TL051bWJlck9mTWVzc2FnZXNQdWJsaXNoZWQvU2FtcGxlQ291bnQSMwoIUGxhdGZvcm0aJ1RoZSBwdXNoIG5vdGlmaWNhdGlvbiBzZXJ2aWNlIHBsYXRmb3JtLhgCIAMqATEyJE1lc3NhZ2VzIHB1Ymxpc2hlZCB0byB0aGUgU05TIHRvcGljLjoYU2FtcGxlcyBvZiBtZXNzYWdlcyBzZW50Qjxhd3MuZ29vZ2xlYXBpcy5jb20vU05TL051bWJlck9mTWVzc2FnZXNQdWJsaXNoZWQvU2FtcGxlQ291bnRSDAgEEgMIrAIaAwjYBAqgAgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU05TL051bWJlck9mTWVzc2FnZXNQdWJsaXNoZWQvU3VtEjMKCFBsYXRmb3JtGidUaGUgcHVzaCBub3RpZmljYXRpb24gc2VydmljZSBwbGF0Zm9ybS4YAiADKgExMiRNZXNzYWdlcyBwdWJsaXNoZWQgdG8gdGhlIFNOUyB0b3BpYy46DU1lc3NhZ2VzIHNlbnRCNGF3cy5nb29nbGVhcGlzLmNvbS9TTlMvTnVtYmVyT2ZNZXNzYWdlc1B1Ymxpc2hlZC9TdW1SDAgEEgMIrAIaAwjYBArXAgp2cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU05TL051bWJlck9mTm90aWZpY2F0aW9uc0RlbGl2ZXJlZC9TYW1wbGVDb3VudBIzCghQbGF0Zm9ybRonVGhlIHB1c2ggbm90aWZpY2F0aW9uIHNlcnZpY2UgcGxhdGZvcm0uGAIgAyoBMTIxTm90aWZpY2F0aW9ucyBzdWNjZXNzZnVsbHkgc2VudCB0byB0aGUgU05TIHRvcGljLjodU2FtcGxlcyBvZiBtZXNzYWdlcyBkZWxpdmVyZWRCQWF3cy5nb29nbGVhcGlzLmNvbS9TTlMvTnVtYmVyT2ZOb3RpZmljYXRpb25zRGVsaXZlcmVkL1NhbXBsZUNvdW50UgwIBBIDCKwCGgMI2AQKvAIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NOUy9OdW1iZXJPZk5vdGlmaWNhdGlvbnNEZWxpdmVyZWQvU3VtEjMKCFBsYXRmb3JtGidUaGUgcHVzaCBub3RpZmljYXRpb24gc2VydmljZSBwbGF0Zm9ybS4YAiADKgExMjFOb3RpZmljYXRpb25zIHN1Y2Nlc3NmdWxseSBzZW50IHRvIHRoZSBTTlMgdG9waWMuOhJNZXNzYWdlcyBkZWxpdmVyZWRCOWF3cy5nb29nbGVhcGlzLmNvbS9TTlMvTnVtYmVyT2ZOb3RpZmljYXRpb25zRGVsaXZlcmVkL1N1bVIMCAQSAwisAhoDCNgECs4CCnNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TTlMvTnVtYmVyT2ZOb3RpZmljYXRpb25zRmFpbGVkL1NhbXBsZUNvdW50EjMKCFBsYXRmb3JtGidUaGUgcHVzaCBub3RpZmljYXRpb24gc2VydmljZSBwbGF0Zm9ybS4YAiADKgExMjFOb3RpZmljYXRpb25zIHVuYWJsZSB0byBiZSBzZW50IHRvIHRoZSBTTlMgdG9waWMuOhpTYW1wbGVzIG9mIG1lc3NhZ2VzIGZhaWxlZEI+YXdzLmdvb2dsZWFwaXMuY29tL1NOUy9OdW1iZXJPZk5vdGlmaWNhdGlvbnNGYWlsZWQvU2FtcGxlQ291bnRSDAgEEgMIrAIaAwjYBAqzAgprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU05TL051bWJlck9mTm90aWZpY2F0aW9uc0ZhaWxlZC9TdW0SMwoIUGxhdGZvcm0aJ1RoZSBwdXNoIG5vdGlmaWNhdGlvbiBzZXJ2aWNlIHBsYXRmb3JtLhgCIAMqATEyMU5vdGlmaWNhdGlvbnMgdW5hYmxlIHRvIGJlIHNlbnQgdG8gdGhlIFNOUyB0b3BpYy46D01lc3NhZ2VzIGZhaWxlZEI2YXdzLmdvb2dsZWFwaXMuY29tL1NOUy9OdW1iZXJPZk5vdGlmaWNhdGlvbnNGYWlsZWQvU3VtUgwIBBIDCKwCGgMI2AQKoAIKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NOUy9QdWJsaXNoU2l6ZS9BdmVyYWdlEjMKCFBsYXRmb3JtGidUaGUgcHVzaCBub3RpZmljYXRpb24gc2VydmljZSBwbGF0Zm9ybS4YASADKgJCeTIwQXZlcmFnZSBtZXNzYWdlIHNpemUgcHVibGlzaGVkIHRvIHRoZSBTTlMgdG9waWMuOhRBdmVyYWdlIG1lc3NhZ2Ugc2l6ZUIqYXdzLmdvb2dsZWFwaXMuY29tL1NOUy9QdWJsaXNoU2l6ZS9BdmVyYWdlUgwIBBIDCKwCGgMI2AQKoAIKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NOUy9QdWJsaXNoU2l6ZS9NYXhpbXVtEjMKCFBsYXRmb3JtGidUaGUgcHVzaCBub3RpZmljYXRpb24gc2VydmljZSBwbGF0Zm9ybS4YASADKgJCeTIwQXZlcmFnZSBtZXNzYWdlIHNpemUgcHVibGlzaGVkIHRvIHRoZSBTTlMgdG9waWMuOhRNYXhpbXVtIG1lc3NhZ2Ugc2l6ZUIqYXdzLmdvb2dsZWFwaXMuY29tL1NOUy9QdWJsaXNoU2l6ZS9NYXhpbXVtUgwIBBIDCKwCGgMI2AQKoAIKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NOUy9QdWJsaXNoU2l6ZS9NaW5pbXVtEjMKCFBsYXRmb3JtGidUaGUgcHVzaCBub3RpZmljYXRpb24gc2VydmljZSBwbGF0Zm9ybS4YASADKgJCeTIwQXZlcmFnZSBtZXNzYWdlIHNpemUgcHVibGlzaGVkIHRvIHRoZSBTTlMgdG9waWMuOhRNaW5pbXVtIG1lc3NhZ2Ugc2l6ZUIqYXdzLmdvb2dsZWFwaXMuY29tL1NOUy9QdWJsaXNoU2l6ZS9NaW5pbXVtUgwIBBIDCKwCGgMI2AQKqgIKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NOUy9QdWJsaXNoU2l6ZS9TYW1wbGVDb3VudBIzCghQbGF0Zm9ybRonVGhlIHB1c2ggbm90aWZpY2F0aW9uIHNlcnZpY2UgcGxhdGZvcm0uGAIgAyoBMTIwQXZlcmFnZSBtZXNzYWdlIHNpemUgcHVibGlzaGVkIHRvIHRoZSBTTlMgdG9waWMuOhdTYW1wbGVzIG9mIG1lc3NhZ2Ugc2l6ZUIuYXdzLmdvb2dsZWFwaXMuY29tL1NOUy9QdWJsaXNoU2l6ZS9TYW1wbGVDb3VudFIMCAQSAwisAhoDCNgECpACCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TTlMvUHVibGlzaFNpemUvU3VtEjMKCFBsYXRmb3JtGidUaGUgcHVzaCBub3RpZmljYXRpb24gc2VydmljZSBwbGF0Zm9ybS4YAiADKgJCeTIwQXZlcmFnZSBtZXNzYWdlIHNpemUgcHVibGlzaGVkIHRvIHRoZSBTTlMgdG9waWMuOgxNZXNzYWdlIHNpemVCJmF3cy5nb29nbGVhcGlzLmNvbS9TTlMvUHVibGlzaFNpemUvU3VtUgwIBBIDCKwCGgMI2AQKgwIKcXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZUFnZU9mT2xkZXN0TWVzc2FnZS9BdmVyYWdlGAEgAyoBczIfQWdlIG9mIG9sZGVzdCBtZXNzYWdlIGluIHF1ZXVlLjoaQXZlcmFnZSBvbGRlc3QgbWVzc2FnZSBhZ2VCPGF3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVBZ2VPZk9sZGVzdE1lc3NhZ2UvQXZlcmFnZVIMCAQSAwisAhoDCNgECoMCCnFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVBZ2VPZk9sZGVzdE1lc3NhZ2UvTWF4aW11bRgBIAMqAXMyH0FnZSBvZiBvbGRlc3QgbWVzc2FnZSBpbiBxdWV1ZS46Gk1heGltdW0gb2xkZXN0IG1lc3NhZ2UgYWdlQjxhd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlQWdlT2ZPbGRlc3RNZXNzYWdlL01heGltdW1SDAgEEgMIrAIaAwjYBAqDAgpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlQWdlT2ZPbGRlc3RNZXNzYWdlL01pbmltdW0YASADKgFzMh9BZ2Ugb2Ygb2xkZXN0IG1lc3NhZ2UgaW4gcXVldWUuOhpNaW5pbXVtIG9sZGVzdCBtZXNzYWdlIGFnZUI8YXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZUFnZU9mT2xkZXN0TWVzc2FnZS9NaW5pbXVtUgwIBBIDCKwCGgMI2AQKjgIKdXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZUFnZU9mT2xkZXN0TWVzc2FnZS9TYW1wbGVDb3VudBgCIAMqATEyH0FnZSBvZiBvbGRlc3QgbWVzc2FnZSBpbiBxdWV1ZS46HVNhbXBsZXMgb2Ygb2xkZXN0IG1lc3NhZ2UgYWdlQkBhd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlQWdlT2ZPbGRlc3RNZXNzYWdlL1NhbXBsZUNvdW50UgwIBBIDCKwCGgMI2AQK8wEKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZUFnZU9mT2xkZXN0TWVzc2FnZS9TdW0YAiADKgFzMh9BZ2Ugb2Ygb2xkZXN0IG1lc3NhZ2UgaW4gcXVldWUuOhJPbGRlc3QgbWVzc2FnZSBhZ2VCOGF3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVBZ2VPZk9sZGVzdE1lc3NhZ2UvU3VtUgwIBBIDCKwCGgMI2AQKjQIKdnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZU51bWJlck9mTWVzc2FnZXNEZWxheWVkL0F2ZXJhZ2UYASADKgExMiFEZWxheWVkIGFuZCB1bmF2YWlsYWJsZSBtZXNzYWdlcy46GEF2ZXJhZ2UgbWVzc2FnZXMgZGVsYXllZEJBYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZU51bWJlck9mTWVzc2FnZXNEZWxheWVkL0F2ZXJhZ2VSDAgEEgMIrAIaAwjYBAqNAgp2cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlTnVtYmVyT2ZNZXNzYWdlc0RlbGF5ZWQvTWF4aW11bRgBIAMqATEyIURlbGF5ZWQgYW5kIHVuYXZhaWxhYmxlIG1lc3NhZ2VzLjoYTWF4aW11bSBtZXNzYWdlcyBkZWxheWVkQkFhd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlTnVtYmVyT2ZNZXNzYWdlc0RlbGF5ZWQvTWF4aW11bVIMCAQSAwisAhoDCNgECo0CCnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzRGVsYXllZC9NaW5pbXVtGAEgAyoBMTIhRGVsYXllZCBhbmQgdW5hdmFpbGFibGUgbWVzc2FnZXMuOhhNaW5pbnVtIG1lc3NhZ2VzIGRlbGF5ZWRCQWF3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzRGVsYXllZC9NaW5pbXVtUgwIBBIDCKwCGgMI2AQKmAIKenByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZU51bWJlck9mTWVzc2FnZXNEZWxheWVkL1NhbXBsZUNvdW50GAIgAyoBMTIhRGVsYXllZCBhbmQgdW5hdmFpbGFibGUgbWVzc2FnZXMuOhtTYW1wbGVzIG9mIG1lc3NhZ2VzIGRlbGF5ZWRCRWF3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzRGVsYXllZC9TYW1wbGVDb3VudFIMCAQSAwisAhoDCNgECv0BCnJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzRGVsYXllZC9TdW0YAiADKgExMiFEZWxheWVkIGFuZCB1bmF2YWlsYWJsZSBtZXNzYWdlcy46EE1lc3NhZ2VzIGRlbGF5ZWRCPWF3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzRGVsYXllZC9TdW1SDAgEEgMIrAIaAwjYBAqUAgp5cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlTnVtYmVyT2ZNZXNzYWdlc05vdFZpc2libGUvQXZlcmFnZRgBIAMqATEyHk1lc3NhZ2VzIGN1cnJlbnRseSBpbiB0cmFuc2l0LjocQXZlcmFnZSBtZXNzYWdlcyBub3QgdmlzaWJsZUJEYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZU51bWJlck9mTWVzc2FnZXNOb3RWaXNpYmxlL0F2ZXJhZ2VSDAgEEgMIrAIaAwjYBAqUAgp5cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlTnVtYmVyT2ZNZXNzYWdlc05vdFZpc2libGUvTWF4aW11bRgBIAMqATEyHk1lc3NhZ2VzIGN1cnJlbnRseSBpbiB0cmFuc2l0LjocTWF4aW11bSBtZXNzYWdlcyBub3QgdmlzaWJsZUJEYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZU51bWJlck9mTWVzc2FnZXNOb3RWaXNpYmxlL01heGltdW1SDAgEEgMIrAIaAwjYBAqUAgp5cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlTnVtYmVyT2ZNZXNzYWdlc05vdFZpc2libGUvTWluaW11bRgBIAMqATEyHk1lc3NhZ2VzIGN1cnJlbnRseSBpbiB0cmFuc2l0LjocTWluaW11bSBtZXNzYWdlcyBub3QgdmlzaWJsZUJEYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZU51bWJlck9mTWVzc2FnZXNOb3RWaXNpYmxlL01pbmltdW1SDAgEEgMIrAIaAwjYBAqfAgp9cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlTnVtYmVyT2ZNZXNzYWdlc05vdFZpc2libGUvU2FtcGxlQ291bnQYAiADKgExMh5NZXNzYWdlcyBjdXJyZW50bHkgaW4gdHJhbnNpdC46H1NhbXBsZXMgb2YgbWVzc2FnZXMgbm90IHZpc2libGVCSGF3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzTm90VmlzaWJsZS9TYW1wbGVDb3VudFIMCAQSAwisAhoDCNgECoQCCnVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzTm90VmlzaWJsZS9TdW0YAiADKgExMh5NZXNzYWdlcyBjdXJyZW50bHkgaW4gdHJhbnNpdC46FE1lc3NhZ2VzIG5vdCB2aXNpYmxlQkBhd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlTnVtYmVyT2ZNZXNzYWdlc05vdFZpc2libGUvU3VtUgwIBBIDCKwCGgMI2AQKgQIKdnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZU51bWJlck9mTWVzc2FnZXNWaXNpYmxlL0F2ZXJhZ2UYASADKgExMhNBdmFpbGFibGUgbWVzc2FnZXMuOhpBdmVyYWdlIG1lc3NhZ2VzIGF2YWlsYWJsZUJBYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZU51bWJlck9mTWVzc2FnZXNWaXNpYmxlL0F2ZXJhZ2VSDAgEEgMIrAIaAwjYBAqBAgp2cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlTnVtYmVyT2ZNZXNzYWdlc1Zpc2libGUvTWF4aW11bRgBIAMqATEyE0F2YWlsYWJsZSBtZXNzYWdlcy46Gk1heGltdW0gbWVzc2FnZXMgYXZhaWxhYmxlQkFhd3MuZ29vZ2xlYXBpcy5jb20vU1FTL0FwcHJveGltYXRlTnVtYmVyT2ZNZXNzYWdlc1Zpc2libGUvTWF4aW11bVIMCAQSAwisAhoDCNgECoECCnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzVmlzaWJsZS9NaW5pbXVtGAEgAyoBMTITQXZhaWxhYmxlIG1lc3NhZ2VzLjoaTWluaW11bSBtZXNzYWdlcyBhdmFpbGFibGVCQWF3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzVmlzaWJsZS9NaW5pbXVtUgwIBBIDCKwCGgMI2AQKjAIKenByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9BcHByb3hpbWF0ZU51bWJlck9mTWVzc2FnZXNWaXNpYmxlL1NhbXBsZUNvdW50GAIgAyoBMTITQXZhaWxhYmxlIG1lc3NhZ2VzLjodU2FtcGxlcyBvZiBtZXNzYWdlcyBhdmFpbGFibGVCRWF3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzVmlzaWJsZS9TYW1wbGVDb3VudFIMCAQSAwisAhoDCNgECvEBCnJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzVmlzaWJsZS9TdW0YAiADKgExMhNBdmFpbGFibGUgbWVzc2FnZXMuOhJNZXNzYWdlcyBhdmFpbGFibGVCPWF3cy5nb29nbGVhcGlzLmNvbS9TUVMvQXBwcm94aW1hdGVOdW1iZXJPZk1lc3NhZ2VzVmlzaWJsZS9TdW1SDAgEEgMIrAIaAwjYBAqNAgptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL051bWJlck9mRW1wdHlSZWNlaXZlcy9TYW1wbGVDb3VudBgCIAMqATEyKU51bWJlciBvZiBibGFuayBSZWNlaXZlTWVzc2FnZSBBUEkgY2FsbHMuOiJTYW1wbGVzIG9mIGJsYW5rIG1lc3NhZ2VzIHJlY2VpdmVkQjhhd3MuZ29vZ2xlYXBpcy5jb20vU1FTL051bWJlck9mRW1wdHlSZWNlaXZlcy9TYW1wbGVDb3VudFIMCAQSAwisAhoDCNgECvIBCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvTnVtYmVyT2ZFbXB0eVJlY2VpdmVzL1N1bRgCIAMqATEyKU51bWJlciBvZiBibGFuayBSZWNlaXZlTWVzc2FnZSBBUEkgY2FsbHMuOhdCbGFuayBtZXNzYWdlcyByZWNlaXZlZEIwYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9OdW1iZXJPZkVtcHR5UmVjZWl2ZXMvU3VtUgwIBBIDCKwCGgMI2AQK8gEKb3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9OdW1iZXJPZk1lc3NhZ2VzRGVsZXRlZC9TYW1wbGVDb3VudBgCIAMqATEyEURlbGV0ZWQgbWVzc2FnZXMuOhtTYW1wbGVzIG9mIG1lc3NhZ2VzIGRlbGV0ZWRCOmF3cy5nb29nbGVhcGlzLmNvbS9TUVMvTnVtYmVyT2ZNZXNzYWdlc0RlbGV0ZWQvU2FtcGxlQ291bnRSDAgEEgMIrAIaAwjYBArXAQpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL051bWJlck9mTWVzc2FnZXNEZWxldGVkL1N1bRgCIAMqATEyEURlbGV0ZWQgbWVzc2FnZXMuOhBNZXNzYWdlcyBkZWxldGVkQjJhd3MuZ29vZ2xlYXBpcy5jb20vU1FTL051bWJlck9mTWVzc2FnZXNEZWxldGVkL1N1bVIMCAQSAwisAhoDCNgECpQCCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvTnVtYmVyT2ZNZXNzYWdlc1JlY2VpdmVkL1NhbXBsZUNvdW50GAIgAyoBMTIwTWVzc2FnZXMgcmVjZWl2ZWQgZnJvbSBSZWNlaXZlTWVzc2FnZSBBUEkgY2FsbHMuOhxTYW1wbGVzIG9mIG1lc3NhZ2VzIHJlY2VpdmVkQjthd3MuZ29vZ2xlYXBpcy5jb20vU1FTL051bWJlck9mTWVzc2FnZXNSZWNlaXZlZC9TYW1wbGVDb3VudFIMCAQSAwisAhoDCNgECvkBCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvTnVtYmVyT2ZNZXNzYWdlc1JlY2VpdmVkL1N1bRgCIAMqATEyME1lc3NhZ2VzIHJlY2VpdmVkIGZyb20gUmVjZWl2ZU1lc3NhZ2UgQVBJIGNhbGxzLjoRTWVzc2FnZXMgcmVjZWl2ZWRCM2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvTnVtYmVyT2ZNZXNzYWdlc1JlY2VpdmVkL1N1bVIMCAQSAwisAhoDCNgECuwBCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvTnVtYmVyT2ZNZXNzYWdlc1NlbnQvU2FtcGxlQ291bnQYAiADKgExMh9NZXNzYWdlcyBzZW50IHRvIHRoZSBTUVMgcXVldWUuOg1NZXNzYWdlcyBzZW50Qjdhd3MuZ29vZ2xlYXBpcy5jb20vU1FTL051bWJlck9mTWVzc2FnZXNTZW50L1NhbXBsZUNvdW50UgwIBBIDCKwCGgMI2AQK3AEKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9OdW1iZXJPZk1lc3NhZ2VzU2VudC9TdW0YAiADKgExMh9NZXNzYWdlcyBzZW50IHRvIHRoZSBTUVMgcXVldWUuOg1NZXNzYWdlcyBzZW50Qi9hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL051bWJlck9mTWVzc2FnZXNTZW50L1N1bVIMCAQSAwisAhoDCNgECukBCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvU2VudE1lc3NhZ2VTaXplL0F2ZXJhZ2UYASADKgJCeTImQXZlcmFnZSBtZXNzYWdlIHNpemUgb2Ygc2VudCBtZXNzYWdlcy46FEF2ZXJhZ2UgbWVzc2FnZSBzaXplQi5hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL1NlbnRNZXNzYWdlU2l6ZS9BdmVyYWdlUgwIBBIDCKwCGgMI2AQK6QEKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9TZW50TWVzc2FnZVNpemUvTWF4aW11bRgBIAMqAkJ5MiZBdmVyYWdlIG1lc3NhZ2Ugc2l6ZSBvZiBzZW50IG1lc3NhZ2VzLjoUTWF4aW11bSBtZXNzYWdlIHNpemVCLmF3cy5nb29nbGVhcGlzLmNvbS9TUVMvU2VudE1lc3NhZ2VTaXplL01heGltdW1SDAgEEgMIrAIaAwjYBArpAQpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vU1FTL1NlbnRNZXNzYWdlU2l6ZS9NaW5pbXVtGAEgAyoCQnkyJkF2ZXJhZ2UgbWVzc2FnZSBzaXplIG9mIHNlbnQgbWVzc2FnZXMuOhRNaW5pbXVtIG1lc3NhZ2Ugc2l6ZUIuYXdzLmdvb2dsZWFwaXMuY29tL1NRUy9TZW50TWVzc2FnZVNpemUvTWluaW11bVIMCAQSAwisAhoDCNgECvMBCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvU2VudE1lc3NhZ2VTaXplL1NhbXBsZUNvdW50GAIgAyoBMTImQXZlcmFnZSBtZXNzYWdlIHNpemUgb2Ygc2VudCBtZXNzYWdlcy46F1NhbXBsZXMgb2YgbWVzc2FnZSBzaXplQjJhd3MuZ29vZ2xlYXBpcy5jb20vU1FTL1NlbnRNZXNzYWdlU2l6ZS9TYW1wbGVDb3VudFIMCAQSAwisAhoDCNgECtkBCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9TUVMvU2VudE1lc3NhZ2VTaXplL1N1bRgCIAMqAkJ5MiZBdmVyYWdlIG1lc3NhZ2Ugc2l6ZSBvZiBzZW50IG1lc3NhZ2VzLjoMTWVzc2FnZSBzaXplQiphd3MuZ29vZ2xlYXBpcy5jb20vU1FTL1NlbnRNZXNzYWdlU2l6ZS9TdW1SDAgEEgMIrAIaAwjYBArWAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vaGVhbHRoL0VDMi9pbnN0YW5jZV9zdGF0dXNfY2hlY2sSKwoGc3RhdHVzGiFUaGUgc3RhdHVzIG9mIHRoZSBpbnN0YW5jZSBjaGVjay4SOQoMcmVhY2hhYmlsaXR5GilUaGUgY3VycmVudCByZWFjaGFiaWxpdHkgb2YgdGhlIGluc3RhbmNlLhgBIAEyKkluZGljYXRlcyBpZiBhbiBBV1MgaW5zdGFuY2UgaXMgdW5oZWFsdGh5LjoQSW5zdGFuY2UgaGVhbHRoeUIzYXdzLmdvb2dsZWFwaXMuY29tL2hlYWx0aC9FQzIvaW5zdGFuY2Vfc3RhdHVzX2NoZWNrUgsIBBICCDwaAwjYBArkAwpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9hd3MuZ29vZ2xlYXBpcy5jb20vaGVhbHRoL0VDMi9wZW5kaW5nX2V2ZW50Ej8KCW5vdF9hZnRlchACGjBUaGUgbGF0ZXN0IGVwb2NoIHRpbWUgdGhhdCB0aGUgZXZlbnQgd2lsbCBvY2N1ci4SNAoEY29kZRosVGhlIHN0cmluZyBjb2RlIHJlcHJlc2VudGluZyB0aGUgZXZlbnQgdHlwZS4SQwoLZGVzY3JpcHRpb24aNFRoZSBodW1hbiByZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgcGVuZGluZyBldmVudC4SQgoKbm90X2JlZm9yZRACGjJUaGUgZWFybGllc3QgZXBvY2ggdGltZSB0aGF0IHRoZSBldmVudCB3aWxsIG9jY3VyLhgBIAEyM0luZGljYXRlcyB0aGF0IGEgcGVuZGluZyBpbnN0YW5jZSBldmVudCBpcyBwcmVzZW50LjoNRXZlbnQgcGVuZGluZ0IrYXdzLmdvb2dsZWFwaXMuY29tL2hlYWx0aC9FQzIvcGVuZGluZ19ldmVudFILCAQSAgg8GgMI2AQK0QIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL2hlYWx0aC9FQzIvc3lzdGVtX3N0YXR1c19jaGVjaxIpCgZzdGF0dXMaH1RoZSBzdGF0dXMgb2YgdGhlIHN5c3RlbSBjaGVjay4SNwoMcmVhY2hhYmlsaXR5GidUaGUgY3VycmVudCByZWFjaGFiaWxpdHkgb2YgdGhlIHN5c3RlbS4YASABMi9JbmRpY2F0ZXMgaWYgYW4gQVdTIGluc3RhbmNlIGhvc3QgaXMgdW5oZWFsdGh5LjoOU3lzdGVtIGhlYWx0aHlCMWF3cy5nb29nbGVhcGlzLmNvbS9oZWFsdGgvRUMyL3N5c3RlbV9zdGF0dXNfY2hlY2tSCwgEEgIIPBoDCNgECtICCnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2F3cy5nb29nbGVhcGlzLmNvbS9oZWFsdGgvRUxCL2NvbmZpZ3VyZWRfYXZhaWxhYmlsaXR5X3pvbmVfc3RhdHVzEkQKB3pvbmVfaWQaOVRoZSBBdmFpbGFiaWxpdHkgWm9uZSB0byByZXR1cm4gdGhlIGNvbmZpZ3VyZWQgc3RhdHVzIG9mLhgBIAEyMUluZGljYXRlcyBpZiB0aGVyZSBhcmUgZW1wdHkgem9uZXMgYmVoaW5kIGFuIEVMQi46C0VtcHR5IHpvbmVzQkFhd3MuZ29vZ2xlYXBpcy5jb20vaGVhbHRoL0VMQi9jb25maWd1cmVkX2F2YWlsYWJpbGl0eV96b25lX3N0YXR1c1ILCAQSAgg8GgMIrAIKwAIKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYXdzLmdvb2dsZWFwaXMuY29tL2hlYWx0aC9FTEIvaW5zdGFuY2Vfc2VydmljZV9zdGF0dXMSPQoLaW5zdGFuY2VfaWQaLlRoZSBJbnN0YW5jZSBJZCB3ZSdyZSByZWNvcmRpbmcgdGhlIHN0YXR1cyBvZi4YASABMjhJbmRpY2F0ZXMgdGhhdCBhbiBpbnN0YW5jZSBpcyBvdXQgb2Ygc2VydmljZSBmb3IgYW4gRUxCLjoRSW5zdGFuY2UgaW5jbHVkZWRCNWF3cy5nb29nbGVhcGlzLmNvbS9oZWFsdGgvRUxCL2luc3RhbmNlX3NlcnZpY2Vfc3RhdHVzUgsIBBICCDwaAwjYBAroAQpYcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWdxdWVyeS5nb29nbGVhcGlzLmNvbS9xdWVyeS9jb3VudBIyCghwcmlvcml0eRomUXVlcnkgcHJpb3JpdHkgKGJhdGNoIG9yIGludGVyYWN0aXZlKS4YASACKgExMhJJbiBmbGlnaHQgcXVlcmllcy46C1F1ZXJ5IGNvdW50QiNiaWdxdWVyeS5nb29nbGVhcGlzLmNvbS9xdWVyeS9jb3VudFILCAQSAgg8GgMIpAMKnAIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vcXVlcnkvZXhlY3V0aW9uX3RpbWVzEjIKCHByaW9yaXR5GiZRdWVyeSBwcmlvcml0eSAoYmF0Y2ggb3IgaW50ZXJhY3RpdmUpLhgBIAUqAXMyKERpc3RyaWJ1dGlvbiBvZiBxdWVyaWVzIGV4ZWN1dGlvbiB0aW1lcy46FVF1ZXJ5IGV4ZWN1dGlvbiB0aW1lc0ItYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vcXVlcnkvZXhlY3V0aW9uX3RpbWVzUgsIBBICCDwaAwikAwr4AQpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWdxdWVyeS5nb29nbGVhcGlzLmNvbS9xdWVyeS9zY2FubmVkX2J5dGVzEjIKCHByaW9yaXR5GiZRdWVyeSBwcmlvcml0eSAoYmF0Y2ggb3IgaW50ZXJhY3RpdmUpLhgCIAIqAkJ5Mg5TY2FubmVkIGJ5dGVzLjoNU2Nhbm5lZCBieXRlc0IrYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vcXVlcnkvc2Nhbm5lZF9ieXRlc1IMCAQSAgg8GgQI2KkBCpQCCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL3F1ZXJ5L3NjYW5uZWRfYnl0ZXNfYmlsbGVkEjIKCHByaW9yaXR5GiZRdWVyeSBwcmlvcml0eSAoYmF0Y2ggb3IgaW50ZXJhY3RpdmUpLhgCIAIqAkJ5MhVTY2FubmVkIGJ5dGVzIGJpbGxlZC46FFNjYW5uZWQgYnl0ZXMgYmlsbGVkQjJiaWdxdWVyeS5nb29nbGVhcGlzLmNvbS9xdWVyeS9zY2FubmVkX2J5dGVzX2JpbGxlZFIMCAQSAgg8GgQI2KkBCvgCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL3F1ZXJ5L3N0YXRlbWVudF9zY2FubmVkX2J5dGVzEjIKCHByaW9yaXR5GiZRdWVyeSBwcmlvcml0eSAoYmF0Y2ggb3IgaW50ZXJhY3RpdmUpLhJCCg5zdGF0ZW1lbnRfdHlwZRowUXVlcnkgc3RhdGVtZW50IHR5cGUgKFNFTEVDVCwgQ1JFQVRFX01PREVMIC4uLikuGAIgAioCQnkyLFNjYW5uZWQgYnl0ZXMgYnJva2VuIGRvd24gYnkgc3RhdGVtZW50IHR5cGUuOhdTdGF0ZW1lbnQgc2Nhbm5lZCBieXRlc0I1YmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vcXVlcnkvc3RhdGVtZW50X3NjYW5uZWRfYnl0ZXNSDAgDEgIIPBoECNipAQqUAwpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWdxdWVyeS5nb29nbGVhcGlzLmNvbS9xdWVyeS9zdGF0ZW1lbnRfc2Nhbm5lZF9ieXRlc19iaWxsZWQSMgoIcHJpb3JpdHkaJlF1ZXJ5IHByaW9yaXR5IChiYXRjaCBvciBpbnRlcmFjdGl2ZSkuEkIKDnN0YXRlbWVudF90eXBlGjBRdWVyeSBzdGF0ZW1lbnQgdHlwZSAoU0VMRUNULCBDUkVBVEVfTU9ERUwgLi4uKS4YAiACKgJCeTIzU2Nhbm5lZCBieXRlcyBiaWxsZWQgYnJva2VuIGRvd24gYnkgc3RhdGVtZW50IHR5cGUuOh5TdGF0ZW1lbnQgc2Nhbm5lZCBieXRlcyBiaWxsZWRCPGJpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL3F1ZXJ5L3N0YXRlbWVudF9zY2FubmVkX2J5dGVzX2JpbGxlZFIMCAMSAgg8GgQI2KkBCrEDClxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL3Nsb3RzL2FsbG9jYXRlZBJKCgtyZXNlcnZhdGlvbho7UmVzZXJ2YXRpb24uIFRoaXMgZmllbGQgaXMgdW5zZXQgaWYgdGhlIHF1ZXJ5IGlzIG9uLWRlbWFuZC4SFQoIam9iX3R5cGUaCUpvYiB0eXBlLhgBIAIqATEyf051bWJlciBvZiBCaWdRdWVyeSBzbG90cyBjdXJyZW50bHkgYWxsb2NhdGVkIGZvciBwcm9qZWN0LiBTbG90IGFsbG9jYXRpb24gY2FuIGJlIGJyb2tlbiBkb3duIGJhc2VkIG9uIHJlc2VydmF0aW9uIGFuZCBqb2IgdHlwZS46MFNsb3RzIHVzZWQgYnkgcHJvamVjdCwgcmVzZXJ2YXRpb24sIGFuZCBqb2IgdHlwZUInYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vc2xvdHMvYWxsb2NhdGVkUgsIBBICCDwaAwikAwqXAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWdxdWVyeS5nb29nbGVhcGlzLmNvbS9zbG90cy9hbGxvY2F0ZWRfZm9yX3Byb2plY3QYASACKgExMktOdW1iZXIgb2YgQmlnUXVlcnkgc2xvdHMgY3VycmVudGx5IGFsbG9jYXRlZCBmb3IgcXVlcnkgam9icyBpbiB0aGUgcHJvamVjdC46FVNsb3RzIHVzZWQgYnkgcHJvamVjdEIzYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vc2xvdHMvYWxsb2NhdGVkX2Zvcl9wcm9qZWN0UgsIBBICCDwaAwikAwrUAgp1cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWdxdWVyeS5nb29nbGVhcGlzLmNvbS9zbG90cy9hbGxvY2F0ZWRfZm9yX3Byb2plY3RfYW5kX2pvYl90eXBlEhUKCGpvYl90eXBlGglKb2IgdHlwZS4YASACKgExMkpOdW1iZXIgb2YgQmlnUXVlcnkgc2xvdHMgY3VycmVudGx5IGFsbG9jYXRlZCBmb3IgdGhlIHByb2plY3QgYW5kIGpvYiB0eXBlLjoiU2xvdHMgdXNlZCBieSBwcm9qZWN0IGFuZCBqb2IgdHlwZUJAYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vc2xvdHMvYWxsb2NhdGVkX2Zvcl9wcm9qZWN0X2FuZF9qb2JfdHlwZVILCAQSAgg8GgMIpAMKrwIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vc2xvdHMvYWxsb2NhdGVkX2Zvcl9yZXNlcnZhdGlvbhgBIAIqATEyTE51bWJlciBvZiBCaWdRdWVyeSBzbG90cyBjdXJyZW50bHkgYWxsb2NhdGVkIGZvciBwcm9qZWN0IGluIHRoZSByZXNlcnZhdGlvbi46JFNsb3RzIHVzZWQgYnkgcHJvamVjdCBpbiByZXNlcnZhdGlvbkI3YmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vc2xvdHMvYWxsb2NhdGVkX2Zvcl9yZXNlcnZhdGlvblILCAQSAgg8GgMIpAMKkAMKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vc2xvdHMvdG90YWxfYWxsb2NhdGVkX2Zvcl9yZXNlcnZhdGlvbhgBIAIqATEymwFOdW1iZXIgb2YgQmlnUXVlcnkgc2xvdHMgY3VycmVudGx5IGFsbG9jYXRlZCBhY3Jvc3MgcHJvamVjdHMgaW4gdGhlIHJlc2VydmF0aW9uLiBUaGlzIGlzIG9ubHkgcmVwb3J0ZWQgd2hpbGUgdGhlIHByb2plY3QgaXMgdXNpbmcgc2xvdHMgaW4gdGhlIHJlc2VydmF0aW9uLjopU2xvdHMgdXNlZCBhY3Jvc3MgcHJvamVjdHMgaW4gcmVzZXJ2YXRpb25CPWJpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL3Nsb3RzL3RvdGFsX2FsbG9jYXRlZF9mb3JfcmVzZXJ2YXRpb25SCwgEEgIIPBoDCKQDCu8BCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL3Nsb3RzL3RvdGFsX2F2YWlsYWJsZRgBIAIqATEyOVRvdGFsIG51bWJlciBvZiBCaWdRdWVyeSBzbG90cyBhdmFpbGFibGUgZm9yIHRoZSBwcm9qZWN0LjoLVG90YWwgc2xvdHNCLWJpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL3Nsb3RzL3RvdGFsX2F2YWlsYWJsZVILCAQSAgg8GgMI6AIK5AEKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS9zdG9yZWRfYnl0ZXMSFAoFdGFibGUaC1RhYmxlIG5hbWUuGAEgAioCQnkyF051bWJlciBvZiBieXRlcyBzdG9yZWQuOgxTdG9yZWQgYnl0ZXNCLGJpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL3N0b3JhZ2Uvc3RvcmVkX2J5dGVzUgwIBBIDCIgOGgMIsFQKxAEKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS90YWJsZV9jb3VudBgBIAIqATEyEU51bWJlciBvZiB0YWJsZXMuOgtUYWJsZSBjb3VudEIrYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS90YWJsZV9jb3VudFIMCAQSAwiIDhoDCLBUCqICCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL3N0b3JhZ2UvdXBsb2FkZWRfYnl0ZXMSPgoDYXBpGjdBcGkgdXNlZCB0byB1cGxvYWQgdGhlIGRhdGEgKGJhdGNoIGltcG9ydCBvciBzdHJlYW1pbmcpEhQKBXRhYmxlGgtUYWJsZSBuYW1lLhgCIAIqAkJ5Mg9VcGxvYWRlZCBieXRlcy46DlVwbG9hZGVkIGJ5dGVzQi5iaWdxdWVyeS5nb29nbGVhcGlzLmNvbS9zdG9yYWdlL3VwbG9hZGVkX2J5dGVzUgwIBBICCDwaBAjYqQEK5wIKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS91cGxvYWRlZF9ieXRlc19iaWxsZWQSZwoDYXBpGmBBcGkgdXNlZCB0byB1cGxvYWQgdGhlIGRhdGEgKGJhdGNoIGltcG9ydCBvciBzdHJlYW1pbmcpLiBDdXJyZW50bHkgb25seSBzdHJlYW1pbmcgYXBpIGlzIGJpbGxlZC4SFAoFdGFibGUaC1RhYmxlIG5hbWUuGAIgAioCQnkyFlVwbG9hZGVkIGJ5dGVzIGJpbGxlZC46FVVwbG9hZGVkIGJ5dGVzIGJpbGxlZEI1YmlncXVlcnkuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS91cGxvYWRlZF9ieXRlc19iaWxsZWRSDAgEEgIIPBoECNipAQqnAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWdxdWVyeS5nb29nbGVhcGlzLmNvbS9zdG9yYWdlL3VwbG9hZGVkX3Jvd19jb3VudBI+CgNhcGkaN0FwaSB1c2VkIHRvIHVwbG9hZCB0aGUgZGF0YSAoYmF0Y2ggaW1wb3J0IG9yIHN0cmVhbWluZykSFAoFdGFibGUaC1RhYmxlIG5hbWUuGAIgAioBMTIOVXBsb2FkZWQgcm93cy46DVVwbG9hZGVkIHJvd3NCMmJpZ3F1ZXJ5Lmdvb2dsZWFwaXMuY29tL3N0b3JhZ2UvdXBsb2FkZWRfcm93X2NvdW50UgwIBBICCDwaBAjYqQEK8AEKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlncXVlcnliaWVuZ2luZS5nb29nbGVhcGlzLmNvbS9tb2RlbC9pbmZsaWdodF9yZXF1ZXN0cxgBIAIqATEyIEluZmxpZ2h0IHJlcXVlc3RzIHRvIGEgQkkgbW9kZWwuOhFJbmZsaWdodCByZXF1ZXN0c0I3YmlncXVlcnliaWVuZ2luZS5nb29nbGVhcGlzLmNvbS9tb2RlbC9pbmZsaWdodF9yZXF1ZXN0c1ILCAMSAgg8GgMItAEK0AQKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlncXVlcnliaWVuZ2luZS5nb29nbGVhcGlzLmNvbS9tb2RlbC9yZXF1ZXN0X2NvdW50ErQBCgpjYWNoZV9taXNzEAEaowFJbmRpY2F0ZXMgaWYgcmVxdWVzdCB3YXMgbm90IHNlcnZlZCBmcm9tIG1lbW9yeSBjYWNoZS4gTGFyZ2UgbnVtYmVyIG9mIHJlcXVlc3RzIHdpdGggdGhpcyBmaWVsZCBzZXQgdG8gdHJ1ZSBpcyB0aGUgc2lnbiB0aGF0IHJlc2VydmF0aW9uIHNpemUgc2hvdWxkIGJlIGluY3JlYXNlZC4gEisKBnN0YXR1cxohQ29tcGxldGlvbiBzdGF0dXMgb2YgdGhlIHJlcXVlc3QuEo0BCg5leGVjdXRpb25fbW9kZRp7QklFbmdpbmUgb3IgQmlnUXVlcnkuIEJpZ1F1ZXJ5IG1lYW5zIHRoYXQgcmVxdWVzdCB3YXMgc2VydmVkIHVzaW5nIEJpZ1F1ZXJ5IHNsb3RzIHJhdGhlciB0aGFuIHVzaW5nIEJJIEVuZ2luZSByZXNlcnZhdGlvbi4gGAIgAioBMTIYQkkgRW5naW5lIHJlcXVlc3QgY291bnQuOg1SZXF1ZXN0IGNvdW50QjNiaWdxdWVyeWJpZW5naW5lLmdvb2dsZWFwaXMuY29tL21vZGVsL3JlcXVlc3RfY291bnRSCwgDEgIIPBoDCLQBCu8ECmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3F1ZXJ5YmllbmdpbmUuZ29vZ2xlYXBpcy5jb20vbW9kZWwvcmVxdWVzdF9sYXRlbmNpZXMSsAEKCmNhY2hlX21pc3MQARqfAUluZGljYXRlcyBpZiByZXF1ZXN0IHdhcyBzZXJ2ZWQgZnJvbSBtZW1vcnkgY2FjaGUuIExhcmdlIG51bWJlciBvZiByZXF1ZXN0cyB3aXRoIHRoaXMgZmllbGQgc2V0IHRvIHRydWUgaXMgdGhlIHNpZ24gdGhhdCByZXNlcnZhdGlvbiBzaXplIHNob3VsZCBiZSBpbmNyZWFzZWQuIBIrCgZzdGF0dXMaIUNvbXBsZXRpb24gc3RhdHVzIG9mIHRoZSByZXF1ZXN0LhKNAQoOZXhlY3V0aW9uX21vZGUae0JJRW5naW5lIG9yIEJpZ1F1ZXJ5LiBCaWdRdWVyeSBtZWFucyB0aGF0IHJlcXVlc3Qgd2FzIHNlcnZlZCB1c2luZyBCaWdRdWVyeSBzbG90cyByYXRoZXIgdGhhbiB1c2luZyBCSSBFbmdpbmUgcmVzZXJ2YXRpb24uIBgBIAUqAm1zMihEaXN0cmlidXRpb24gb2YgcmVxdWVzdCBleGVjdXRpb24gdGltZXMuOhdSZXF1ZXN0IGV4ZWN1dGlvbiB0aW1lc0I3YmlncXVlcnliaWVuZ2luZS5nb29nbGVhcGlzLmNvbS9tb2RlbC9yZXF1ZXN0X2xhdGVuY2llc1ILCAMSAgg8GgMItAEK+QEKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlncXVlcnliaWVuZ2luZS5nb29nbGVhcGlzLmNvbS9yZXNlcnZhdGlvbi90b3RhbF9ieXRlcxgBIAIqAkJ5MiJTaXplIG9mIHRoZSBCSSBlbmdpbmUgcmVzZXJ2YXRpb24uOhdSZXNlcnZhdGlvbiB0b3RhbCBieXRlc0I3YmlncXVlcnliaWVuZ2luZS5nb29nbGVhcGlzLmNvbS9yZXNlcnZhdGlvbi90b3RhbF9ieXRlc1ILCAMSAgg8GgMItAEK/QEKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlncXVlcnliaWVuZ2luZS5nb29nbGVhcGlzLmNvbS9yZXNlcnZhdGlvbi91c2VkX2J5dGVzGAEgAioCQnkyKVV0aWxpemF0aW9uIG9mIHRoZSBCSSBlbmdpbmUgcmVzZXJ2YXRpb24uOhZSZXNlcnZhdGlvbiB1c2VkIGJ5dGVzQjZiaWdxdWVyeWJpZW5naW5lLmdvb2dsZWFwaXMuY29tL3Jlc2VydmF0aW9uL3VzZWRfYnl0ZXNSCwgDEgIIPBoDCLQBCr0BCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvY3B1X2xvYWQYASADKgExMhZDUFUgbG9hZCBvZiBhIGNsdXN0ZXIuOghDUFUgbG9hZEIoYmlndGFibGUuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9jcHVfbG9hZFIJEgIIPBoDCLQBCvoBCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvY3B1X2xvYWRfaG90dGVzdF9ub2RlGAEgAyoBMTIqQ1BVIGxvYWQgb2YgdGhlIGJ1c2llc3Qgbm9kZSBpbiBhIGNsdXN0ZXIuOhdDUFUgbG9hZCAoaG90dGVzdCBub2RlKUI1YmlndGFibGUuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9jcHVfbG9hZF9ob3R0ZXN0X25vZGVSCRICCDwaAwi0AQrQAQpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWd0YWJsZS5nb29nbGVhcGlzLmNvbS9jbHVzdGVyL2Rpc2tfbG9hZBgBIAMqATEyJlV0aWxpemF0aW9uIG9mIEhERCBkaXNrcyBpbiBhIGNsdXN0ZXIuOglEaXNrIGxvYWRCKWJpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvZGlza19sb2FkUgkSAgg8GgMItAEK9AEKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlndGFibGUuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9ub2RlX2NvdW50Ei0KDHN0b3JhZ2VfdHlwZRodU3RvcmFnZSB0eXBlIGZvciB0aGUgY2x1c3Rlci4YASACKgExMh1OdW1iZXIgb2Ygbm9kZXMgaW4gYSBjbHVzdGVyLjoFTm9kZXNCKmJpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvbm9kZV9jb3VudFIJEgIIPBoDCLQBCqwCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvc3RvcmFnZV91dGlsaXphdGlvbhItCgxzdG9yYWdlX3R5cGUaHVN0b3JhZ2UgdHlwZSBmb3IgdGhlIGNsdXN0ZXIuGAEgAyoBMTI1U3RvcmFnZSB1c2VkIGFzIGEgZnJhY3Rpb24gb2YgdG90YWwgc3RvcmFnZSBjYXBhY2l0eS46E1N0b3JhZ2UgdXRpbGl6YXRpb25CM2JpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvc3RvcmFnZV91dGlsaXphdGlvblIJEgIIPBoDCLQBCokCClxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL2Rpc2svYnl0ZXNfdXNlZBIlCgxzdG9yYWdlX3R5cGUaFVR5cGUgb2YgZGlzayBzdG9yYWdlLhgBIAIqAkJ5MjlBbW91bnQgb2YgY29tcHJlc3NlZCBkYXRhIGZvciB0YWJsZXMgc3RvcmVkIGluIGEgY2x1c3Rlci46C0RhdGEgc3RvcmVkQidiaWd0YWJsZS5nb29nbGVhcGlzLmNvbS9kaXNrL2J5dGVzX3VzZWRSCRICCDwaAwi0AQqyAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWd0YWJsZS5nb29nbGVhcGlzLmNvbS9kaXNrL3N0b3JhZ2VfY2FwYWNpdHkSLQoMc3RvcmFnZV90eXBlGh1TdG9yYWdlIHR5cGUgZm9yIHRoZSBjbHVzdGVyLhgBIAIqAkJ5MkdDYXBhY2l0eSBvZiBjb21wcmVzc2VkIGRhdGEgZm9yIHRhYmxlcyB0aGF0IGNhbiBiZSBzdG9yZWQgaW4gYSBjbHVzdGVyLjoQU3RvcmFnZSBjYXBhY2l0eUItYmlndGFibGUuZ29vZ2xlYXBpcy5jb20vZGlzay9zdG9yYWdlX2NhcGFjaXR5UgsIAxICCDwaAwi0AQqvAwpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWd0YWJsZS5nb29nbGVhcGlzLmNvbS9yZXBsaWNhdGlvbi9sYXRlbmN5EjgKDnNvdXJjZV9jbHVzdGVyGiZTb3VyY2UgY2x1c3RlciBvZiB0aGUgcmVwbGljYXRlZCBkYXRhLhIyCgtzb3VyY2Vfem9uZRojU291cmNlIHpvbmUgb2YgdGhlIHJlcGxpY2F0ZWQgZGF0YS4YAiAFKgJtczKFAURpc3RyaWJ1dGlvbiBvZiByZXBsaWNhdGlvbiByZXF1ZXN0IGxhdGVuY2llcyBmb3IgYSB0YWJsZS4gSW5jbHVkZXMgb25seSByZXF1ZXN0cyB0aGF0IGhhdmUgYmVlbiByZWNlaXZlZCBieSB0aGUgZGVzdGluYXRpb24gY2x1c3Rlci46FVJlcGxpY2F0aW9uIGxhdGVuY2llc0IrYmlndGFibGUuZ29vZ2xlYXBpcy5jb20vcmVwbGljYXRpb24vbGF0ZW5jeVIJEgIIPBoDCLQBCr4DCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL3JlcGxpY2F0aW9uL21heF9kZWxheRI4Cg5zb3VyY2VfY2x1c3RlchomU291cmNlIGNsdXN0ZXIgb2YgdGhlIHJlcGxpY2F0ZWQgZGF0YS4SMgoLc291cmNlX3pvbmUaI1NvdXJjZSB6b25lIG9mIHRoZSByZXBsaWNhdGVkIGRhdGEuGAEgAyoBczKNAVVwcGVyIGJvdW5kIGZvciByZXBsaWNhdGlvbiBkZWxheSBiZXR3ZWVuIGNsdXN0ZXJzIG9mIGEgdGFibGUuIEluZGljYXRlcyB0aGUgdGltZSBmcmFtZSBkdXJpbmcgd2hpY2ggbGF0ZW5jeSBpbmZvcm1hdGlvbiBtYXkgbm90IGJlIGFjY3VyYXRlLjoZUmVwbGljYXRpb24gbWF4aW11bSBkZWxheUItYmlndGFibGUuZ29vZ2xlYXBpcy5jb20vcmVwbGljYXRpb24vbWF4X2RlbGF5UgkSAgg8GgMItAEKswIKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvYmlndGFibGUuZ29vZ2xlYXBpcy5jb20vc2VydmVyL2Vycm9yX2NvdW50EiQKBm1ldGhvZBoaQ2xvdWQgQmlndGFibGUgQVBJIG1ldGhvZC4SHgoKZXJyb3JfY29kZRoQZ1JQQyBFcnJvciBDb2RlLhgCIAIqATEyQE51bWJlciBvZiBzZXJ2ZXIgcmVxdWVzdHMgZm9yIGEgdGFibGUgdGhhdCBmYWlsZWQgd2l0aCBhbiBlcnJvci46C0Vycm9yIGNvdW50QipiaWd0YWJsZS5nb29nbGVhcGlzLmNvbS9zZXJ2ZXIvZXJyb3JfY291bnRSCBICCDwaAgh4CoMCCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL3NlcnZlci9sYXRlbmNpZXMSJAoGbWV0aG9kGhpDbG91ZCBCaWd0YWJsZSBBUEkgbWV0aG9kLhgCIAUqAm1zMjVEaXN0cmlidXRpb24gb2Ygc2VydmVyIHJlcXVlc3QgbGF0ZW5jaWVzIGZvciBhIHRhYmxlLjoJTGF0ZW5jaWVzQihiaWd0YWJsZS5nb29nbGVhcGlzLmNvbS9zZXJ2ZXIvbGF0ZW5jaWVzUggSAgg8GgIIeAqcAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWd0YWJsZS5nb29nbGVhcGlzLmNvbS9zZXJ2ZXIvbW9kaWZpZWRfcm93c19jb3VudBIkCgZtZXRob2QaGkNsb3VkIEJpZ3RhYmxlIEFQSSBtZXRob2QuGAIgAioBMTI3TnVtYmVyIG9mIHJvd3MgbW9kaWZpZWQgYnkgc2VydmVyIHJlcXVlc3RzIGZvciBhIHRhYmxlLjoNTW9kaWZpZWQgcm93c0IyYmlndGFibGUuZ29vZ2xlYXBpcy5jb20vc2VydmVyL21vZGlmaWVkX3Jvd3NfY291bnRSCBICCDwaAgh4CrYCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL3NlcnZlci9yZWNlaXZlZF9ieXRlc19jb3VudBIkCgZtZXRob2QaGkNsb3VkIEJpZ3RhYmxlIEFQSSBtZXRob2QuGAIgAioCQnkyTU51bWJlciBvZiB1bmNvbXByZXNzZWQgYnl0ZXMgb2YgcmVxdWVzdCBkYXRhIHJlY2VpdmVkIGJ5IHNlcnZlcnMgZm9yIGEgdGFibGUuOg5SZWNlaXZlZCBieXRlc0IzYmlndGFibGUuZ29vZ2xlYXBpcy5jb20vc2VydmVyL3JlY2VpdmVkX2J5dGVzX2NvdW50UggSAgg8GgIIeAr/AQphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWd0YWJsZS5nb29nbGVhcGlzLmNvbS9zZXJ2ZXIvcmVxdWVzdF9jb3VudBIkCgZtZXRob2QaGkNsb3VkIEJpZ3RhYmxlIEFQSSBtZXRob2QuGAIgAioBMTImTnVtYmVyIG9mIHNlcnZlciByZXF1ZXN0cyBmb3IgYSB0YWJsZS46DVJlcXVlc3QgY291bnRCLGJpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL3NlcnZlci9yZXF1ZXN0X2NvdW50UggSAgg8GgIIeAqcAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWd0YWJsZS5nb29nbGVhcGlzLmNvbS9zZXJ2ZXIvcmV0dXJuZWRfcm93c19jb3VudBIkCgZtZXRob2QaGkNsb3VkIEJpZ3RhYmxlIEFQSSBtZXRob2QuGAIgAioBMTI3TnVtYmVyIG9mIHJvd3MgcmV0dXJuZWQgYnkgc2VydmVyIHJlcXVlc3RzIGZvciBhIHRhYmxlLjoNUmV0dXJuZWQgcm93c0IyYmlndGFibGUuZ29vZ2xlYXBpcy5jb20vc2VydmVyL3JldHVybmVkX3Jvd3NfY291bnRSCBICCDwaAgh4CqcCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2JpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL3NlcnZlci9zZW50X2J5dGVzX2NvdW50EiQKBm1ldGhvZBoaQ2xvdWQgQmlndGFibGUgQVBJIG1ldGhvZC4YAiACKgJCeTJKTnVtYmVyIG9mIHVuY29tcHJlc3NlZCBieXRlcyBvZiByZXNwb25zZSBkYXRhIHNlbnQgYnkgc2VydmVycyBmb3IgYSB0YWJsZS46ClNlbnQgYnl0ZXNCL2JpZ3RhYmxlLmdvb2dsZWFwaXMuY29tL3NlcnZlci9zZW50X2J5dGVzX2NvdW50UggSAgg8GgIIeAr9AQpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9iaWd0YWJsZS5nb29nbGVhcGlzLmNvbS90YWJsZS9ieXRlc191c2VkEiUKDHN0b3JhZ2VfdHlwZRoVVHlwZSBvZiBkaXNrIHN0b3JhZ2UuGAEgAioCQnkyLEFtb3VudCBvZiBjb21wcmVzc2VkIGRhdGEgc3RvcmVkIGluIGEgdGFibGUuOgtEYXRhIHN0b3JlZEIoYmlndGFibGUuZ29vZ2xlYXBpcy5jb20vdGFibGUvYnl0ZXNfdXNlZFIIEgIIPBoCCHgK9wEKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRmdW5jdGlvbnMuZ29vZ2xlYXBpcy5jb20vZnVuY3Rpb24vYWN0aXZlX2luc3RhbmNlcxgBIAIqATEyKFRoZSBudW1iZXIgb2YgYWN0aXZlIGZ1bmN0aW9uIGluc3RhbmNlcy46EEFjdGl2ZSBpbnN0YW5jZXNCN2Nsb3VkZnVuY3Rpb25zLmdvb2dsZWFwaXMuY29tL2Z1bmN0aW9uL2FjdGl2ZV9pbnN0YW5jZXNSCwgDEgIIPBoDCPABCpUDCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3VkZnVuY3Rpb25zLmdvb2dsZWFwaXMuY29tL2Z1bmN0aW9uL2V4ZWN1dGlvbl9jb3VudBIsCgZtZW1vcnkaIk1lbW9yeSBhc3NpZ25lZCB0byBmdW5jdGlvbiBpbiBNQi4SQgoGc3RhdHVzGjhGdW5jdGlvbiBleGVjdXRpb24gc3RhdHVzIGUuZy4gJ29rJywgJ3RpbWVvdXQnLCAnZXJyb3InLhInCgx0cmlnZ2VyX3R5cGUaF0Z1bmN0aW9uJ3MgdHJpZ2dlciB0eXBlGAIgAioBMTIzQ291bnQgb2YgZnVuY3Rpb24gZXhlY3V0aW9ucyBicm9rZW4gZG93biBieSBzdGF0dXMuOgpFeGVjdXRpb25zQjZjbG91ZGZ1bmN0aW9ucy5nb29nbGVhcGlzLmNvbS9mdW5jdGlvbi9leGVjdXRpb25fY291bnRSCwgEEgIIPBoDCPABCqEDCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3VkZnVuY3Rpb25zLmdvb2dsZWFwaXMuY29tL2Z1bmN0aW9uL2V4ZWN1dGlvbl90aW1lcxIsCgZtZW1vcnkaIk1lbW9yeSBhc3NpZ25lZCB0byBmdW5jdGlvbiBpbiBNQi4SQgoGc3RhdHVzGjhGdW5jdGlvbiBleGVjdXRpb24gc3RhdHVzIGUuZy4gJ29rJywgJ3RpbWVvdXQnLCAnZXJyb3InLhInCgx0cmlnZ2VyX3R5cGUaF0Z1bmN0aW9uJ3MgdHJpZ2dlciB0eXBlGAIgBSoCbnMyOURpc3RyaWJ1dGlvbiBvZiBmdW5jdGlvbnMgZXhlY3V0aW9uIHRpbWVzIGluIG5hbm9zZWNvbmRzLjoPRXhlY3V0aW9uIHRpbWVzQjZjbG91ZGZ1bmN0aW9ucy5nb29nbGVhcGlzLmNvbS9mdW5jdGlvbi9leGVjdXRpb25fdGltZXNSCwgEEgIIPBoDCPABCs8CCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3VkZnVuY3Rpb25zLmdvb2dsZWFwaXMuY29tL2Z1bmN0aW9uL25ldHdvcmtfZWdyZXNzEiwKBm1lbW9yeRoiTWVtb3J5IGFzc2lnbmVkIHRvIGZ1bmN0aW9uIGluIE1CLhInCgx0cmlnZ2VyX3R5cGUaF0Z1bmN0aW9uJ3MgdHJpZ2dlciB0eXBlGAIgAioCQnkyLk91dGdvaW5nIG5ldHdvcmsgdHJhZmZpYyBvZiBmdW5jdGlvbiwgaW4gYnl0ZXM6Dk5ldHdvcmsgZWdyZXNzQjVjbG91ZGZ1bmN0aW9ucy5nb29nbGVhcGlzLmNvbS9mdW5jdGlvbi9uZXR3b3JrX2VncmVzc1ILCAQSAgg8GgMI8AEK8AIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRmdW5jdGlvbnMuZ29vZ2xlYXBpcy5jb20vZnVuY3Rpb24vdXNlcl9tZW1vcnlfYnl0ZXMSLAoGbWVtb3J5GiJNZW1vcnkgYXNzaWduZWQgdG8gZnVuY3Rpb24gaW4gTUIuEicKDHRyaWdnZXJfdHlwZRoXRnVuY3Rpb24ncyB0cmlnZ2VyIHR5cGUYAiAFKgJCeTJLRGlzdHJpYnV0aW9uIG9mIG1heGltdW0gZnVuY3Rpb24ncyBtZW1vcnkgdXNhZ2UgZHVyaW5nIGV4ZWN1dGlvbiwgaW4gYnl0ZXMuOgxNZW1vcnkgdXNhZ2VCOGNsb3VkZnVuY3Rpb25zLmdvb2dsZWFwaXMuY29tL2Z1bmN0aW9uL3VzZXJfbWVtb3J5X2J5dGVzUgsIBBICCDwaAwjwAQq6AgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZGlvdC5nb29nbGVhcGlzLmNvbS9kZXZpY2UvYWN0aXZlX2RldmljZXMSMQoIcHJvdG9jb2waJURldmljZSBwcm90b2NvbCAoZWcuIGBodHRwYCwgYG1xdHRgKS4YASACKgExMk5Db3VudCBvZiB0aGUgbnVtYmVyIG9mIGRldmljZXMgdGhhdCBoYXZlIHJlY2VudGx5IHNlbnQgZGF0YSB0byBDbG91ZCBJb1QgQ29yZS46DkFjdGl2ZSBkZXZpY2VzQi1jbG91ZGlvdC5nb29nbGVhcGlzLmNvbS9kZXZpY2UvYWN0aXZlX2RldmljZXNSCwgEEgIIPBoDCLQBCoEDCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3VkaW90Lmdvb2dsZWFwaXMuY29tL2RldmljZS9iaWxsaW5nX2J5dGVzX2NvdW50EjEKCHByb3RvY29sGiVEZXZpY2UgcHJvdG9jb2wgKGVnLiBgaHR0cGAsIGBtcXR0YCkuEj8KCWRpcmVjdGlvbhoyRGlyZWN0aW9uIG9mIGRhdGEgdHJhZmZpYyAoYGluZ3Jlc3NgIG9yIGBlZ3Jlc3NgKS4YASACKgJCeTI9Q291bnQgb2YgdGhlIG51bWJlciBvZiBiaWxsYWJsZSBieXRlcyB0cmFuc2ZlcnJlZCBieSBkZXZpY2VzLjoaQmlsbGFibGUgYnl0ZXMgdHJhbnNmZXJyZWRCMmNsb3VkaW90Lmdvb2dsZWFwaXMuY29tL2RldmljZS9iaWxsaW5nX2J5dGVzX2NvdW50UgsIBBICCDwaAwi0AQqTAwpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZGlvdC5nb29nbGVhcGlzLmNvbS9kZXZpY2UvZXJyb3JfY291bnQSUAoFZXJyb3IaR1R5cGUgb2YgZXJyb3IuIEZvciBleGFtcGxlLCAncHVic3ViX3B1Ymxpc2gnLCBvciAnaW5jb21pbmdfYnVmZmVyX2Z1bGwnEjEKCHByb3RvY29sGiVEZXZpY2UgcHJvdG9jb2wgKGVnLiAnbXF0dCcsICdodHRwJykuGAIgAioBMTJIRGVsdGEgY291bnQgb2YgZXJyb3JzIGNvbW11bmljYXRpbmcgd2l0aCBkZXZpY2VzLCBncm91cGVkIGJ5IGVycm9yIHR5cGUuOiFFcnJvcnMgY29tbXVuaWNhdGluZyB3aXRoIGRldmljZXNCKmNsb3VkaW90Lmdvb2dsZWFwaXMuY29tL2RldmljZS9lcnJvcl9jb3VudFILCAQSAgg8GgMItAEKpgIKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRpb3QuZ29vZ2xlYXBpcy5jb20vZGV2aWNlL29wZXJhdGlvbl9jb3VudBIuCg5vcGVyYXRpb25fdHlwZRocVHlwZSBvZiBvcGVyYXRpb24gcGVyZm9ybWVkLhgCIAIqATEyP0RlbHRhIGNvdW50IG9mIG9wZXJhdGlvbnMgcGVyZm9ybWVkLCBncm91cGVkIGJ5IG9wZXJhdGlvbiB0eXBlLjoKT3BlcmF0aW9uc0IuY2xvdWRpb3QuZ29vZ2xlYXBpcy5jb20vZGV2aWNlL29wZXJhdGlvbl9jb3VudFILCAQSAgg8GgMItAEKhgIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRpb3QuZ29vZ2xlYXBpcy5jb20vZGV2aWNlL3JlY2VpdmVkX2J5dGVzX2NvdW50GAIgAioCQnkyNURlbHRhIGNvdW50IG9mIG51bWJlciBvZiBieXRlcyByZWNlaXZlZCBmcm9tIGRldmljZXMuOhlCeXRlcyByZWNlaXZlZCBieSBkZXZpY2VzQjNjbG91ZGlvdC5nb29nbGVhcGlzLmNvbS9kZXZpY2UvcmVjZWl2ZWRfYnl0ZXNfY291bnRSCwgEEgIIPBoDCLQBCvQBCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3VkaW90Lmdvb2dsZWFwaXMuY29tL2RldmljZS9zZW50X2J5dGVzX2NvdW50GAIgAioCQnkyL0RlbHRhIGNvdW50IG9mIG51bWJlciBvZiBieXRlcyBzZW50IGJ5IGRldmljZXMuOhVCeXRlcyBzZW50IHRvIGRldmljZXNCL2Nsb3VkaW90Lmdvb2dsZWFwaXMuY29tL2RldmljZS9zZW50X2J5dGVzX2NvdW50UgsIBBICCDwaAwi0AQqSAgpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9hdXRvX2ZhaWxvdmVyX3JlcXVlc3RfY291bnQYAiACKgExMjNEZWx0YSBvZiBudW1iZXIgb2YgaW5zdGFuY2UgYXV0by1mYWlsb3ZlciByZXF1ZXN0cy46FkF1dG8tZmFpbG92ZXIgUmVxdWVzdHNCPGNsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL2F1dG9fZmFpbG92ZXJfcmVxdWVzdF9jb3VudFILCAQSAgg8GgMIlgEKmAIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvYXZhaWxhYmxlX2Zvcl9mYWlsb3ZlchgBIAIqATEyQ1RoaXMgaXMgPiAwIGlmIHRoZSBmYWlsb3ZlciBvcGVyYXRpb24gaXMgYXZhaWxhYmxlIG9uIHRoZSBpbnN0YW5jZS46FkF2YWlsYWJsZSBmb3IgZmFpbG92ZXJCN2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL2F2YWlsYWJsZV9mb3JfZmFpbG92ZXJSCwgEEgIIPBoDCPABCvMBCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL2NwdS9yZXNlcnZlZF9jb3JlcxgBIAMqATEyKk51bWJlciBvZiBjb3JlcyByZXNlcnZlZCBmb3IgdGhlIGRhdGFiYXNlLjoSQ1BVIHJlc2VydmVkIGNvcmVzQjNjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9jcHUvcmVzZXJ2ZWRfY29yZXNSCwgEEgIIPBoDCJYBCt0BCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL2NwdS91c2FnZV90aW1lGAIgAyoBczIlQ3VtdWxhdGl2ZSBDUFUgdXNhZ2UgdGltZSBpbiBzZWNvbmRzLjoJQ1BVIHVzYWdlQi9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9jcHUvdXNhZ2VfdGltZVILCAQSAgg8GgMIlgEK+gEKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvY3B1L3V0aWxpemF0aW9uGAEgAyoBMTI6VGhlIGZyYWN0aW9uIG9mIHRoZSByZXNlcnZlZCBDUFUgdGhhdCBpcyBjdXJyZW50bHkgaW4gdXNlLjoPQ1BVIHV0aWxpemF0aW9uQjBjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9jcHUvdXRpbGl6YXRpb25SCwgEEgIIPBoDCJYBCtYBCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL2Rpc2svYnl0ZXNfdXNlZBgBIAIqAkJ5MhpEYXRhIHV0aWxpemF0aW9uIGluIGJ5dGVzLjoKQnl0ZXMgdXNlZEIwY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvZGlzay9ieXRlc191c2VkUgsIBBICCDwaAwiWAQrSAQpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9kaXNrL3F1b3RhGAEgAioCQnkyIE1heGltdW0gZGF0YSBkaXNrIHNpemUgaW4gYnl0ZXMuOgpEaXNrIHF1b3RhQitjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9kaXNrL3F1b3RhUgsIBBICCDwaAwiWAQrxAQppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9kaXNrL3JlYWRfb3BzX2NvdW50GAIgAioBMTIsRGVsdGEgY291bnQgb2YgZGF0YSBkaXNrIHJlYWQgSU8gb3BlcmF0aW9ucy46DERpc2sgcmVhZCBJT0I0Y2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvZGlzay9yZWFkX29wc19jb3VudFILCAQSAgg8GgMIlgEK+wEKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvZGlzay91dGlsaXphdGlvbhgBIAMqATEyOFRoZSBmcmFjdGlvbiBvZiB0aGUgZGlzayBxdW90YSB0aGF0IGlzIGN1cnJlbnRseSBpbiB1c2UuOhBEaXNrIHV0aWxpemF0aW9uQjFjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9kaXNrL3V0aWxpemF0aW9uUgsIBBICCDwaAwiWAQrzAQpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9kaXNrL3dyaXRlX29wc19jb3VudBgCIAIqATEyKERlbHRhIGNvdW50IG9mIGRpc2sgd3JpdGUgSU8gb3BlcmF0aW9ucy46EFdyaXRlIG9wZXJhdGlvbnNCNWNsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL2Rpc2svd3JpdGVfb3BzX2NvdW50UgsIBBICCDwaAwiWAQrSAQpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9tZW1vcnkvcXVvdGEYASACKgJCeTIaTWF4aW11bSBSQU0gc2l6ZSBpbiBieXRlcy46DE1lbW9yeSBxdW90YUItY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbWVtb3J5L3F1b3RhUgsIBBICCDwaAwiWAQrLAQpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9tZW1vcnkvdXNhZ2UYASACKgJCeTITUkFNIHVzYWdlIGluIGJ5dGVzLjoMTWVtb3J5IHVzYWdlQi1jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9tZW1vcnkvdXNhZ2VSCwgEEgIIPBoDCJYBCoMCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL21lbW9yeS91dGlsaXphdGlvbhgBIAMqATEyOlRoZSBmcmFjdGlvbiBvZiB0aGUgbWVtb3J5IHF1b3RhIHRoYXQgaXMgY3VycmVudGx5IGluIHVzZS46Ek1lbW9yeSB1dGlsaXphdGlvbkIzY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbWVtb3J5L3V0aWxpemF0aW9uUgsIBBICCDwaAwiWAQqhAgp6cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9teXNxbC9pbm5vZGJfYnVmZmVyX3Bvb2xfcGFnZXNfZGlydHkYASACKgExMjROdW1iZXIgb2YgdW5mbHVzaGVkIHBhZ2VzIGluIHRoZSBJbm5vREIgYnVmZmVyIHBvb2wuOhJJbm5vREIgZGlydHkgcGFnZXNCRWNsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL2lubm9kYl9idWZmZXJfcG9vbF9wYWdlc19kaXJ0eVILCAQSAgg8GgMI8AEKmwIKeXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbXlzcWwvaW5ub2RiX2J1ZmZlcl9wb29sX3BhZ2VzX2ZyZWUYASACKgExMjFOdW1iZXIgb2YgdW51c2VkIHBhZ2VzIGluIHRoZSBJbm5vREIgYnVmZmVyIHBvb2wuOhFJbm5vREIgZnJlZSBwYWdlc0JEY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbXlzcWwvaW5ub2RiX2J1ZmZlcl9wb29sX3BhZ2VzX2ZyZWVSCwgEEgIIPBoDCPABCp0CCnpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL2lubm9kYl9idWZmZXJfcG9vbF9wYWdlc190b3RhbBgBIAIqATEyMFRvdGFsIG51bWJlciBvZiBwYWdlcyBpbiB0aGUgSW5ub0RCIGJ1ZmZlciBwb29sLjoSSW5ub0RCIHRvdGFsIHBhZ2VzQkVjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9teXNxbC9pbm5vZGJfYnVmZmVyX3Bvb2xfcGFnZXNfdG90YWxSCwgEEgIIPBoDCPABCvkBCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL2lubm9kYl9kYXRhX2ZzeW5jcxgCIAIqATEyJERlbHRhIGNvdW50IG9mIElubm9EQiBmc3luYygpIGNhbGxzLjoSSW5ub0RCIGZzeW5jIGNhbGxzQjljbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9teXNxbC9pbm5vZGJfZGF0YV9mc3luY3NSCwgEEgIIPBoDCPABCpECCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL2lubm9kYl9vc19sb2dfZnN5bmNzGAIgAioBMTI0RGVsdGEgY291bnQgb2YgSW5ub0RCIGZzeW5jKCkgY2FsbHMgdG8gdGhlIGxvZyBmaWxlLjoWSW5ub0RCIGxvZyBmc3luYyBjYWxsc0I7Y2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbXlzcWwvaW5ub2RiX29zX2xvZ19mc3luY3NSCwgEEgIIPBoDCPABCvMBCm1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL2lubm9kYl9wYWdlc19yZWFkGAIgAioBMTIhRGVsdGEgY291bnQgb2YgSW5ub0RCIHBhZ2VzIHJlYWQuOhFJbm5vREIgcGFnZXMgcmVhZEI4Y2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbXlzcWwvaW5ub2RiX3BhZ2VzX3JlYWRSCwgEEgIIPBoDCPABCv8BCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL2lubm9kYl9wYWdlc193cml0dGVuGAIgAioBMTIkRGVsdGEgY291bnQgb2YgSW5ub0RCIHBhZ2VzIHdyaXR0ZW4uOhRJbm5vREIgcGFnZXMgd3JpdHRlbkI7Y2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbXlzcWwvaW5ub2RiX3BhZ2VzX3dyaXR0ZW5SCwgEEgIIPBoDCPABCuUBCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL3F1ZXJpZXMYAiACKgExMjFEZWx0YSBjb3VudCBvZiBzdGF0ZW1lbnRzIGV4ZWN1dGVkIGJ5IHRoZSBzZXJ2ZXIuOgdRdWVyaWVzQi5jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9teXNxbC9xdWVyaWVzUgsIBBICCDwaAwjwAQr+AQplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9teXNxbC9xdWVzdGlvbnMYAiACKgExMkREZWx0YSBjb3VudCBvZiBzdGF0ZW1lbnRzIGV4ZWN1dGVkIGJ5IHRoZSBzZXJ2ZXIgc2VudCBieSB0aGUgY2xpZW50LjoJUXVlc3Rpb25zQjBjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9teXNxbC9xdWVzdGlvbnNSCwgEEgIIPBoDCPABCpYCCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL3JlY2VpdmVkX2J5dGVzX2NvdW50GAIgAioCQnkyL0RlbHRhIGNvdW50IG9mIGJ5dGVzIHJlY2VpdmVkIGJ5IE15U1FMIHByb2Nlc3MuOh9OZXR3b3JrIGJ5dGVzIHJlY2VpdmVkIGJ5IE15U1FMQjtjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9teXNxbC9yZWNlaXZlZF9ieXRlc19jb3VudFILCAQSAgg8GgMI8AEKvgMKfnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbXlzcWwvcmVwbGljYXRpb24vYXZhaWxhYmxlX2Zvcl9mYWlsb3ZlchgBIAIqATEytwFUaGlzIGlzID4gMCBpZiB0aGUgZmFpbG92ZXIgb3BlcmF0aW9uIGlzIGF2YWlsYWJsZSBvbiB0aGUgbWFzdGVyIGluc3RhbmNlLm1hc3Rlci4gVGhlIG1ldHJpYyBpcyBkZXByZWNhdGVkLiAgUGxlYXNlIHVzZSBjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9hdmFpbGFibGVfZm9yX2ZhaWxvdmVyIGluc3RlYWQ6I0F2YWlsYWJsZSBmb3IgZmFpbG92ZXIgKERlcHJlY2F0ZWQpQkljbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9teXNxbC9yZXBsaWNhdGlvbi9hdmFpbGFibGVfZm9yX2ZhaWxvdmVyUgsIBRICCDwaAwjwAQq0Agp9cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9teXNxbC9yZXBsaWNhdGlvbi9zZWNvbmRzX2JlaGluZF9tYXN0ZXIYASACKgFzMkhOdW1iZXIgb2Ygc2Vjb25kcyB0aGUgcmVhZCByZXBsaWNhIGlzIGJlaGluZCBpdHMgbWFzdGVyIChhcHByb3hpbWF0aW9uKS46C1JlcGxpY2EgbGFnQkhjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9teXNxbC9yZXBsaWNhdGlvbi9zZWNvbmRzX2JlaGluZF9tYXN0ZXJSCwgEEgIIPBoDCPABCucCCnhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL3JlcGxpY2F0aW9uL3NsYXZlX2lvX3J1bm5pbmcYASAEMnxJbmRpY2F0ZXMgd2hldGhlciB0aGUgSS9PIHRocmVhZCBmb3IgcmVhZGluZyB0aGUgbWFzdGVyJ3MgYmluYXJ5IGxvZyBpcyBydW5uaW5nLiBQb3NzaWJsZSB2YWx1ZXMgYXJlIFllcywgTm8gYW5kIENvbm5lY3RpbmcuOhhTbGF2ZSBJL08gdGhyZWFkIHJ1bm5pbmdCQ2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL3JlcGxpY2F0aW9uL3NsYXZlX2lvX3J1bm5pbmdSCggEEgIIPBoCCDwKvwIKeXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbXlzcWwvcmVwbGljYXRpb24vc2xhdmVfc3FsX3J1bm5pbmcYASAEMlJJbmRpY2F0ZXMgd2hldGhlciB0aGUgU1FMIHRocmVhZCBmb3IgZXhlY3V0aW5nIGV2ZW50cyBpbiB0aGUgcmVsYXkgbG9nIGlzIHJ1bm5pbmcuOhhTbGF2ZSBTUUwgdGhyZWFkIHJ1bm5pbmdCRGNsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL3JlcGxpY2F0aW9uL3NsYXZlX3NxbF9ydW5uaW5nUgoIBBICCDwaAgg8CoYCCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL215c3FsL3NlbnRfYnl0ZXNfY291bnQYAiACKgJCeTIrRGVsdGEgY291bnQgb2YgYnl0ZXMgc2VudCBieSBNeVNRTCBwcm9jZXNzLjobTmV0d29yayBieXRlcyBzZW50IGJ5IE15U1FMQjdjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9teXNxbC9zZW50X2J5dGVzX2NvdW50UgsIBBICCDwaAwjwAQqAAgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9uZXR3b3JrL2Nvbm5lY3Rpb25zGAEgAioBMTI2TnVtYmVyIG9mIGNvbm5lY3Rpb25zIHRvIHRoZSBDbG91ZCBTUUwgTXlTUUwgaW5zdGFuY2UuOhFNeVNRTCBDb25uZWN0aW9uc0I0Y2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbmV0d29yay9jb25uZWN0aW9uc1ILCAQSAgg8GgMIlgEKjAIKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbmV0d29yay9yZWNlaXZlZF9ieXRlc19jb3VudBgCIAIqAkJ5MjJEZWx0YSBjb3VudCBvZiBieXRlcyByZWNlaXZlZCB0aHJvdWdoIHRoZSBuZXR3b3JrLjoOUmVjZWl2ZWQgYnl0ZXNCPWNsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL25ldHdvcmsvcmVjZWl2ZWRfYnl0ZXNfY291bnRSCwgEEgIIPBoDCJYBCqoCCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL25ldHdvcmsvc2VudF9ieXRlc19jb3VudBIsCgtkZXN0aW5hdGlvbhodV2hlcmUgdGhlIGRhdGEgaXMgYmVpbmcgc2VudC4YAiACKgJCeTIuRGVsdGEgY291bnQgb2YgYnl0ZXMgc2VudCB0aHJvdWdoIHRoZSBuZXR3b3JrLjoKU2VudCBieXRlc0I5Y2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvbmV0d29yay9zZW50X2J5dGVzX2NvdW50UgsIBBICCDwaAwiWAQq1AgptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9wb3N0Z3Jlc3FsL251bV9iYWNrZW5kcxIhCghkYXRhYmFzZRoVTmFtZSBvZiB0aGUgZGF0YWJhc2UuGAEgAioBMTI7TnVtYmVyIG9mIGNvbm5lY3Rpb25zIHRvIHRoZSBDbG91ZCBTUUwgUG9zdGdyZVNRTCBpbnN0YW5jZS46FlBvc3RncmVTUUwgQ29ubmVjdGlvbnNCOGNsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL3Bvc3RncmVzcWwvbnVtX2JhY2tlbmRzUgsIBBICCDwaAwjwAQrHAwp9cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9wb3N0Z3Jlc3FsL3JlcGxpY2F0aW9uL3JlcGxpY2FfYnl0ZV9sYWcSJAoMcmVwbGljYV9uYW1lGhROYW1lIG9mIHRoZSByZXBsaWNhLhJ1ChByZXBsaWNhX2xhZ190eXBlGmFUeXBlIG9mIGxhZy4gVGhpcyBjYW4gYmUgZWl0aGVyIHJlcGxheV9sb2NhdGlvbiwgZmx1c2hfbG9jYXRpb24sIHdyaXRlX2xvY2F0aW9uIG9yIHNlbnRfbG9jYXRpb24uGAEgAioCQnkyP1JlcGxpY2F0aW9uIGxhZyBpbiBieXRlcy4gUmVwb3J0ZWQgZnJvbSB0aGUgbWFzdGVyIHBlciByZXBsaWNhLjoJTGFnIGJ5dGVzQkhjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS9wb3N0Z3Jlc3FsL3JlcGxpY2F0aW9uL3JlcGxpY2FfYnl0ZV9sYWdSCwgEEgIIPBoDCJYBCusCCnJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL3Bvc3RncmVzcWwvdHJhbnNhY3Rpb25fY291bnQSIQoIZGF0YWJhc2UaFU5hbWUgb2YgdGhlIGRhdGFiYXNlLhI/ChB0cmFuc2FjdGlvbl90eXBlGit0cmFuc2FjdGlvbl90eXBlIGNhbiBiZSBjb21taXQgb3Igcm9sbGJhY2suGAIgAioBMTImRGVsdGEgY291bnQgb2YgbnVtYmVyIG9mIHRyYW5zYWN0aW9ucy46Fk51bWJlciBvZiB0cmFuc2FjdGlvbnNCPWNsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL3Bvc3RncmVzcWwvdHJhbnNhY3Rpb25fY291bnRSCwgEEgIIPBoDCPABCqYECltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL3N0YXRlGAEgBDKGA1RoZSBjdXJyZW50IHNlcnZpbmcgc3RhdGUgb2YgdGhlIENsb3VkIFNRTCBpbnN0YW5jZS4gVGhpcyBjYW4gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcuClJVTk5BQkxFOiBUaGUgaW5zdGFuY2UgaXMgcnVubmluZywgb3IgaXMgcmVhZHkgdG8gcnVuIHdoZW4gYWNjZXNzZWQuClNVU1BFTkRFRDogVGhlIGluc3RhbmNlIGlzIG5vdCBhdmFpbGFibGUsIGZvciBleGFtcGxlIGR1ZSB0byBwcm9ibGVtcyB3aXRoIGJpbGxpbmcuClBFTkRJTkdfQ1JFQVRFOiBUaGUgaW5zdGFuY2UgaXMgYmVpbmcgY3JlYXRlZC4KTUFJTlRFTkFOQ0U6IFRoZSBpbnN0YW5jZSBpcyBkb3duIGZvciBtYWludGVuYW5jZS4KVU5LTk9XTl9TVEFURTogVGhlIHN0YXRlIG9mIHRoZSBpbnN0YW5jZSBpcyB1bmtub3duLjoFU3RhdGVCJmNsb3Vkc3FsLmdvb2dsZWFwaXMuY29tL2RhdGFiYXNlL3N0YXRlUgsIBBICCDwaAwiWAQqkAgpYcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS91cBgBIAIqATEygwFJbmRpY2F0ZXMgaWYgdGhlIHNlcnZlciBpcyB1cCBvciBub3QuIE9uLWRlbWFuZCBpbnN0YW5jZXMgYXJlIHNwdW4gZG93biBpZiBubyBjb25uZWN0aW9ucyBhcmUgbWFkZSBmb3IgYSBzdWZmaWNpZW50IGFtb3VudCBvZiB0aW1lLjoJU2VydmVyIHVwQiNjbG91ZHNxbC5nb29nbGVhcGlzLmNvbS9kYXRhYmFzZS91cFILCAQSAgg8GgMIlgEK5gEKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvdXB0aW1lGAIgAioBczJBRGVsdGEgY291bnQgb2YgdGhlIHRpbWUgaW4gc2Vjb25kcyB0aGUgaW5zdGFuY2UgaGFzIGJlZW4gcnVubmluZy46BlVwdGltZUInY2xvdWRzcWwuZ29vZ2xlYXBpcy5jb20vZGF0YWJhc2UvdXB0aW1lUgsIBBICCDwaAwiWAQrLAgpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHRhc2tzLmdvb2dsZWFwaXMuY29tL2FwaS9yZXF1ZXN0X2NvdW50EjYKCmFwaV9tZXRob2QaKFRoZSBBUEkgbWV0aG9kIGNhbGxlZCAoZS5nLiBDcmVhdGVUYXNrKS4SPwoNcmVzcG9uc2VfY29kZRouQ2Fub25pY2FsIHJlc3BvbnNlIGNvZGUgYXMgc3RyaW5nIChlLmcuICdvaycpLhgCIAIqATEyH0NvdW50IG9mIENsb3VkIFRhc2tzIEFQSSBjYWxscy46DEFQSSByZXF1ZXN0c0IrY2xvdWR0YXNrcy5nb29nbGVhcGlzLmNvbS9hcGkvcmVxdWVzdF9jb3VudFILCAQSAgg8GgMI8AEKvAIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWR0YXNrcy5nb29nbGVhcGlzLmNvbS9xdWV1ZS90YXNrX2F0dGVtcHRfY291bnQSPwoNcmVzcG9uc2VfY29kZRouQ2Fub25pY2FsIHJlc3BvbnNlIGNvZGUgYXMgc3RyaW5nIChlLmcuICdvaycpLhgCIAIqATEyNENvdW50IG9mIHRhc2sgYXR0ZW1wdHMgYnJva2VuIGRvd24gYnkgcmVzcG9uc2UgY29kZS46ElRhc2sgYXR0ZW1wdCBjb3VudEIyY2xvdWR0YXNrcy5nb29nbGVhcGlzLmNvbS9xdWV1ZS90YXNrX2F0dGVtcHRfY291bnRSCwgEEgIIPBoDCLQBCowCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2Nsb3VkdGFza3MuZ29vZ2xlYXBpcy5jb20vcXVldWUvdGFza19hdHRlbXB0X2RlbGF5cxgCIAUqAm1zMkJEZWxheSBiZXR3ZWVuIGVhY2ggc2NoZWR1bGVkIGF0dGVtcHQgdGltZSBhbmQgYWN0dWFsIGF0dGVtcHQgdGltZS46E1Rhc2sgYXR0ZW1wdCBkZWxheXNCM2Nsb3VkdGFza3MuZ29vZ2xlYXBpcy5jb20vcXVldWUvdGFza19hdHRlbXB0X2RlbGF5c1IKCAQSAgg8GgIIeArpAgptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jbG91ZHRyYWNlLmdvb2dsZWFwaXMuY29tL2JpbGxpbmcvbW9udGhseV9zcGFuc19pbmdlc3RlZBI1CgdzZXJ2aWNlGipTZXJ2aWNlIGFzc29jaWF0ZWQgd2l0aCB0aGUgaW5nZXN0ZWQgc3Bhbi4SLwoKY2hhcmdlYWJsZRABGh9XaGV0aGVyIHRoZSBzcGFuIGlzIGNoYXJnZWFibGUuGAEgAioBMTIjTW9udGgtdG8tZGF0ZSB0cmFjZSBzcGFucyBpbmdlc3RlZC46HE1vbnRobHkgdHJhY2Ugc3BhbnMgaW5nZXN0ZWRCOGNsb3VkdHJhY2UuZ29vZ2xlYXBpcy5jb20vYmlsbGluZy9tb250aGx5X3NwYW5zX2luZ2VzdGVkUgwIBBIDCIgOGgMI8C4KwgIKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY2xvdWR0cmFjZS5nb29nbGVhcGlzLmNvbS9iaWxsaW5nL3NwYW5zX2luZ2VzdGVkEjUKB3NlcnZpY2UaKlNlcnZpY2UgYXNzb2NpYXRlZCB3aXRoIHRoZSBpbmdlc3RlZCBzcGFuLhIvCgpjaGFyZ2VhYmxlEAEaH1doZXRoZXIgdGhlIHNwYW4gaXMgY2hhcmdlYWJsZS4YAiACKgExMhVUcmFjZSBzcGFucyBpbmdlc3RlZC46FFRyYWNlIHNwYW5zIGluZ2VzdGVkQjBjbG91ZHRyYWNlLmdvb2dsZWFwaXMuY29tL2JpbGxpbmcvc3BhbnNfaW5nZXN0ZWRSCwgEEgIIPBoDCKwCCqkDCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXBvc2VyLmdvb2dsZWFwaXMuY29tL2Vudmlyb25tZW50L2FwaS9yZXF1ZXN0X2NvdW50EioKBnN0YXR1cxogVGhlIHN0YXR1cyBjb2RlIG9mIHRoZSBBUEkgY2FsbC4SPgoLYXBpX3ZlcnNpb24aL1RoZSB2ZXJzaW9uIG9mIHRoZSBDb21wb3NlciBBUEksIGUuZy4sIHYxYmV0YTEuEkgKCmFwaV9tZXRob2QaOlRoZSBuYW1lIG9mIHRoZSBDb21wb3NlciBBUEkgY2FsbCwgZS5nLiwgQ3JlYXRlRW52aXJvbm1lbnQYAiACKgExMixOdW1iZXIgb2YgQ29tcG9zZXIgQVBJIHJlcXVlc3RzIHNlZW4gc28gZmFyLjoMQVBJIFJlcXVlc3RzQjVjb21wb3Nlci5nb29nbGVhcGlzLmNvbS9lbnZpcm9ubWVudC9hcGkvcmVxdWVzdF9jb3VudFILCAMSAgg8GgMItAEKsQMKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29tcG9zZXIuZ29vZ2xlYXBpcy5jb20vZW52aXJvbm1lbnQvYXBpL3JlcXVlc3RfbGF0ZW5jaWVzEioKBnN0YXR1cxogVGhlIHN0YXR1cyBjb2RlIG9mIHRoZSBBUEkgY2FsbC4SPgoLYXBpX3ZlcnNpb24aL1RoZSB2ZXJzaW9uIG9mIHRoZSBDb21wb3NlciBBUEksIGUuZy4sIHYxYmV0YTEuEkgKCmFwaV9tZXRob2QaOlRoZSBuYW1lIG9mIHRoZSBDb21wb3NlciBBUEkgY2FsbCwgZS5nLiwgQ3JlYXRlRW52aXJvbm1lbnQYAiAFKgJtczIsRGlzdHJpYnV0aW9uIG9mIENvbXBvc2VyIEFQSSBjYWxsIGxhdGVuY2llcy46C0FQSSBMYXRlbmN5Qjljb21wb3Nlci5nb29nbGVhcGlzLmNvbS9lbnZpcm9ubWVudC9hcGkvcmVxdWVzdF9sYXRlbmNpZXNSCwgDEgIIPBoDCLQBCvcBCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXBvc2VyLmdvb2dsZWFwaXMuY29tL2Vudmlyb25tZW50L2hlYWx0aHkSKwoNaW1hZ2VfdmVyc2lvbhoaVmVyc2lvbiBvZiBDb21wb3NlciBpbWFnZS4YASABMiRIZWFsdGhpbmVzcyBvZiBDb21wb3NlciBlbnZpcm9ubWVudC46B0hlYWx0aHlCK2NvbXBvc2VyLmdvb2dsZWFwaXMuY29tL2Vudmlyb25tZW50L2hlYWx0aHlSBggDEgIIPAqMAgprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb21wb3Nlci5nb29nbGVhcGlzLmNvbS9lbnZpcm9ubWVudC9udW1fY2VsZXJ5X3dvcmtlcnMSKwoNaW1hZ2VfdmVyc2lvbhoaVmVyc2lvbiBvZiBDb21wb3NlciBpbWFnZS4YASACKgExMhlOdW1iZXIgb2YgQ2VsZXJ5IHdvcmtlcnMuOg5DZWxlcnkgV29ya2Vyc0I2Y29tcG9zZXIuZ29vZ2xlYXBpcy5jb20vZW52aXJvbm1lbnQvbnVtX2NlbGVyeV93b3JrZXJzUgYIAxICCDwKlQIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29tcG9zZXIuZ29vZ2xlYXBpcy5jb20vZW52aXJvbm1lbnQvbnVtX3dvcmtmbG93cxIbCgVzdGF0ZRoSU3RhdGUgb2Ygd29ya2Zsb3cuEisKDWltYWdlX3ZlcnNpb24aGlZlcnNpb24gb2YgQ29tcG9zZXIgaW1hZ2UuGAEgAioBMTIUTnVtYmVyIG9mIHdvcmtmbG93cy46CVdvcmtmbG93c0IxY29tcG9zZXIuZ29vZ2xlYXBpcy5jb20vZW52aXJvbm1lbnQvbnVtX3dvcmtmbG93c1IGCAMSAgg8CrACCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXBvc2VyLmdvb2dsZWFwaXMuY29tL2Vudmlyb25tZW50L3Rhc2tfcXVldWVfbGVuZ3RoEisKDWltYWdlX3ZlcnNpb24aGlZlcnNpb24gb2YgQ29tcG9zZXIgaW1hZ2UuEiEKCnF1ZXVlX25hbWUaE05hbWUgb2YgdGFzayBxdWV1ZS4YASACKgExMhlOdW1iZXIgb2YgdGFza3MgaW4gcXVldWUuOhFUYXNrIFF1ZXVlIExlbmd0aEI1Y29tcG9zZXIuZ29vZ2xlYXBpcy5jb20vZW52aXJvbm1lbnQvdGFza19xdWV1ZV9sZW5ndGhSBggDEgIIPAqkAgpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb21wb3Nlci5nb29nbGVhcGlzLmNvbS93b3JrZmxvdy9ydW5fY291bnQSHwoFc3RhdGUaFlN0YXRlIG9mIHdvcmtmbG93IHJ1bi4SKwoNaW1hZ2VfdmVyc2lvbhoaVmVyc2lvbiBvZiBDb21wb3NlciBpbWFnZS4YAiACKgExMilOdW1iZXIgb2Ygd29ya2Zsb3cgcnVucyBjb21wbGV0ZWQgc28gZmFyLjoNV29ya2Zsb3cgUnVuc0IqY29tcG9zZXIuZ29vZ2xlYXBpcy5jb20vd29ya2Zsb3cvcnVuX2NvdW50UgYIAxICCDwKrQIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29tcG9zZXIuZ29vZ2xlYXBpcy5jb20vd29ya2Zsb3cvcnVuX2R1cmF0aW9uEh8KBXN0YXRlGhZTdGF0ZSBvZiB3b3JrZmxvdyBydW4uEisKDWltYWdlX3ZlcnNpb24aGlZlcnNpb24gb2YgQ29tcG9zZXIgaW1hZ2UuGAEgAyoBczIkRHVyYXRpb24gb2Ygd29ya2Zsb3cgcnVuIGNvbXBsZXRpb24uOhVXb3JrZmxvdyBSdW4gRHVyYXRpb25CLWNvbXBvc2VyLmdvb2dsZWFwaXMuY29tL3dvcmtmbG93L3J1bl9kdXJhdGlvblIGCAMSAgg8CtoCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXBvc2VyLmdvb2dsZWFwaXMuY29tL3dvcmtmbG93L3Rhc2svcnVuX2NvdW50EhcKBXN0YXRlGg5TdGF0ZSBvZiB0YXNrLhIrCg1pbWFnZV92ZXJzaW9uGhpWZXJzaW9uIG9mIENvbXBvc2VyIGltYWdlLhIaCgl0YXNrX25hbWUaDU5hbWUgb2YgdGFzay4SHQoIb3BlcmF0b3IaEU9wZXJhdG9yIG9mIHRhc2suGAIgAioBMTIqTnVtYmVyIG9mIHdvcmtmbG93IHRhc2tzIGNvbXBsZXRlZCBzbyBmYXIuOgVUYXNrc0IvY29tcG9zZXIuZ29vZ2xlYXBpcy5jb20vd29ya2Zsb3cvdGFzay9ydW5fY291bnRSBggDEgIIPAraAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb21wb3Nlci5nb29nbGVhcGlzLmNvbS93b3JrZmxvdy90YXNrL3J1bl9kdXJhdGlvbhIXCgVzdGF0ZRoOU3RhdGUgb2YgdGFzay4SKwoNaW1hZ2VfdmVyc2lvbhoaVmVyc2lvbiBvZiBDb21wb3NlciBpbWFnZS4SGgoJdGFza19uYW1lGg1OYW1lIG9mIHRhc2suEh0KCG9wZXJhdG9yGhFPcGVyYXRvciBvZiB0YXNrLhgBIAMqAXMyHER1cmF0aW9uIG9mIHRhc2sgY29tcGxldGlvbi46DVRhc2sgRHVyYXRpb25CMmNvbXBvc2VyLmdvb2dsZWFwaXMuY29tL3dvcmtmbG93L3Rhc2svcnVuX2R1cmF0aW9uUgYIAxICCDwKqgIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9maXJld2FsbC9kcm9wcGVkX2J5dGVzX2NvdW50Ei0KDWluc3RhbmNlX25hbWUaHFRoZSBuYW1lIG9mIHRoZSBWTSBpbnN0YW5jZS4YAiACKgJCeTI2RGVsdGEgY291bnQgb2YgaW5jb21pbmcgYnl0ZXMgZHJvcHBlZCBieSB0aGUgZmlyZXdhbGwuOg1Ecm9wcGVkIGJ5dGVzQjNjb21wdXRlLmdvb2dsZWFwaXMuY29tL2ZpcmV3YWxsL2Ryb3BwZWRfYnl0ZXNfY291bnRSCwgEEgIIPBoDCPABCrECCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vZmlyZXdhbGwvZHJvcHBlZF9wYWNrZXRzX2NvdW50Ei0KDWluc3RhbmNlX25hbWUaHFRoZSBuYW1lIG9mIHRoZSBWTSBpbnN0YW5jZS4YAiACKgExMjhEZWx0YSBjb3VudCBvZiBpbmNvbWluZyBwYWNrZXRzIGRyb3BwZWQgYnkgdGhlIGZpcmV3YWxsLjoPRHJvcHBlZCBwYWNrZXRzQjVjb21wdXRlLmdvb2dsZWFwaXMuY29tL2ZpcmV3YWxsL2Ryb3BwZWRfcGFja2V0c19jb3VudFILCAQSAgg8GgMI8AEKpwIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9jcHUvcmVzZXJ2ZWRfY29yZXMSLQoNaW5zdGFuY2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIFZNIGluc3RhbmNlLhgBIAMqATEyNU51bWJlciBvZiBjb3JlcyByZXNlcnZlZCBvbiB0aGUgaG9zdCBvZiB0aGUgaW5zdGFuY2UuOg5SZXNlcnZlZCBjb3Jlc0IyY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9jcHUvcmVzZXJ2ZWRfY29yZXNSCwgEEgIIPBoDCPABCvYDCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvY3B1L3VzYWdlX3RpbWUSLQoNaW5zdGFuY2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIFZNIGluc3RhbmNlLhgCIAMqAXMykAJEZWx0YSBDUFUgdXNhZ2UgZm9yIGFsbCBjb3JlcywgaW4gc2Vjb25kcy4gVG8gY29tcHV0ZSB0aGUgcGVyLWNvcmUgQ1BVIHV0aWxpemF0aW9uIGZyYWN0aW9uLCBkaXZpZGUgdGhpcyB2YWx1ZSBieSAoZW5kLXN0YXJ0KSpOLCB3aGVyZSBlbmQgYW5kIHN0YXJ0IGRlZmluZSB0aGlzIHZhbHVlJ3MgdGltZSBpbnRlcnZhbCBhbmQgTiBpcyBgY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9jcHUvcmVzZXJ2ZWRfY29yZXNgIGF0IHRoZSBlbmQgb2YgdGhlIGludGVydmFsLjoJQ1BVIHVzYWdlQi5jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91c2FnZV90aW1lUgsIBBICCDwaAwjwAQqHAwpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbhItCg1pbnN0YW5jZV9uYW1lGhxUaGUgbmFtZSBvZiB0aGUgVk0gaW5zdGFuY2UuGAEgAyoBMTKZAVRoZSBmcmFjdGlvbiBvZiB0aGUgYWxsb2NhdGVkIENQVSB0aGF0IGlzIGN1cnJlbnRseSBpbiB1c2Ugb24gdGhlIGluc3RhbmNlLiBUaGlzIHZhbHVlIGNhbiBiZSBncmVhdGVyIHRoYW4gMS4wIG9uIHNvbWUgbWFjaGluZSB0eXBlcyB0aGF0IGFsbG93IGJ1cnN0aW5nLjoPQ1BVIHV0aWxpemF0aW9uQi9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvblILCAQSAgg8GgMI8AEKxAMKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9kaXNrL3JlYWRfYnl0ZXNfY291bnQSLQoNaW5zdGFuY2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIFZNIGluc3RhbmNlLhIrCgtkZXZpY2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIGRpc2sgZGV2aWNlLhI8CgxzdG9yYWdlX3R5cGUaLFRoZSBzdG9yYWdlIHR5cGU6IGBwZC1zdGFuZGFyZGAgb3IgYHBkLXNzZGAuEjkKC2RldmljZV90eXBlGipUaGUgZGlzayB0eXBlOiBgZXBoZW1lcmFsYCBvciBgcGVybWFuZW50YC4YAiACKgJCeTIkRGVsdGEgY291bnQgb2YgYnl0ZXMgcmVhZCBmcm9tIGRpc2suOg9EaXNrIHJlYWQgYnl0ZXNCNWNvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvZGlzay9yZWFkX2J5dGVzX2NvdW50UgsIBBICCDwaAwjwAQrHAwpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2Rpc2svcmVhZF9vcHNfY291bnQSLQoNaW5zdGFuY2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIFZNIGluc3RhbmNlLhIrCgtkZXZpY2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIGRpc2sgZGV2aWNlLhI8CgxzdG9yYWdlX3R5cGUaLFRoZSBzdG9yYWdlIHR5cGU6IGBwZC1zdGFuZGFyZGAgb3IgYHBkLXNzZGAuEjkKC2RldmljZV90eXBlGipUaGUgZGlzayB0eXBlOiBgZXBoZW1lcmFsYCBvciBgcGVybWFuZW50YC4YAiACKgExMidEZWx0YSBjb3VudCBvZiBkaXNrIHJlYWQgSU8gb3BlcmF0aW9ucy46FERpc2sgcmVhZCBvcGVyYXRpb25zQjNjb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2Rpc2svcmVhZF9vcHNfY291bnRSCwgEEgIIPBoDCPABCrsECnRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvZGlzay90aHJvdHRsZWRfcmVhZF9ieXRlc19jb3VudBItCg1pbnN0YW5jZV9uYW1lGhxUaGUgbmFtZSBvZiB0aGUgVk0gaW5zdGFuY2UuEisKC2RldmljZV9uYW1lGhxUaGUgbmFtZSBvZiB0aGUgZGlzayBkZXZpY2UuEjwKDHN0b3JhZ2VfdHlwZRosVGhlIHN0b3JhZ2UgdHlwZTogYHBkLXN0YW5kYXJkYCBvciBgcGQtc3NkYC4SOQoLZGV2aWNlX3R5cGUaKlRoZSBkaXNrIHR5cGU6IGBlcGhlbWVyYWxgIG9yIGBwZXJtYW5lbnRgLhJOCg90aHJvdHRsZV9yZWFzb24aO1RoZSBsaW1pdCB0aGF0IGNhdXNlZCB0aGUgdGhyb3R0bGluZzogYFBFUl9HQmAgb3IgYFBFUl9WTWAuGAIgAioCQnkyMkRlbHRhIGNvdW50IG9mIGJ5dGVzIGluIHRocm90dGxlZCByZWFkIG9wZXJhdGlvbnMuOhRUaHJvdHRsZWQgcmVhZCBieXRlc0I/Y29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9kaXNrL3Rocm90dGxlZF9yZWFkX2J5dGVzX2NvdW50UgsIBBICCDwaAwjwAQqyBApycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2Rpc2svdGhyb3R0bGVkX3JlYWRfb3BzX2NvdW50Ei0KDWluc3RhbmNlX25hbWUaHFRoZSBuYW1lIG9mIHRoZSBWTSBpbnN0YW5jZS4SKwoLZGV2aWNlX25hbWUaHFRoZSBuYW1lIG9mIHRoZSBkaXNrIGRldmljZS4SPAoMc3RvcmFnZV90eXBlGixUaGUgc3RvcmFnZSB0eXBlOiBgcGQtc3RhbmRhcmRgIG9yIGBwZC1zc2RgLhI5CgtkZXZpY2VfdHlwZRoqVGhlIGRpc2sgdHlwZTogYGVwaGVtZXJhbGAgb3IgYHBlcm1hbmVudGAuEk4KD3Rocm90dGxlX3JlYXNvbho7VGhlIGxpbWl0IHRoYXQgY2F1c2VkIHRoZSB0aHJvdHRsaW5nOiBgUEVSX0dCYCBvciBgUEVSX1ZNYC4YAiACKgExMilEZWx0YSBjb3VudCBvZiB0aHJvdHRsZWQgcmVhZCBvcGVyYXRpb25zLjoZVGhyb3R0bGVkIHJlYWQgb3BlcmF0aW9uc0I9Y29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9kaXNrL3Rocm90dGxlZF9yZWFkX29wc19jb3VudFILCAQSAgg8GgMI8AEKvwQKdXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9kaXNrL3Rocm90dGxlZF93cml0ZV9ieXRlc19jb3VudBItCg1pbnN0YW5jZV9uYW1lGhxUaGUgbmFtZSBvZiB0aGUgVk0gaW5zdGFuY2UuEisKC2RldmljZV9uYW1lGhxUaGUgbmFtZSBvZiB0aGUgZGlzayBkZXZpY2UuEjwKDHN0b3JhZ2VfdHlwZRosVGhlIHN0b3JhZ2UgdHlwZTogYHBkLXN0YW5kYXJkYCBvciBgcGQtc3NkYC4SOQoLZGV2aWNlX3R5cGUaKlRoZSBkaXNrIHR5cGU6IGBlcGhlbWVyYWxgIG9yIGBwZXJtYW5lbnRgLhJOCg90aHJvdHRsZV9yZWFzb24aO1RoZSBsaW1pdCB0aGF0IGNhdXNlZCB0aGUgdGhyb3R0bGluZzogYFBFUl9HQmAgb3IgYFBFUl9WTWAuGAIgAioCQnkyM0RlbHRhIGNvdW50IG9mIGJ5dGVzIGluIHRocm90dGxlZCB3cml0ZSBvcGVyYXRpb25zLjoVVGhyb3R0bGVkIHdyaXRlIGJ5dGVzQkBjb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2Rpc2svdGhyb3R0bGVkX3dyaXRlX2J5dGVzX2NvdW50UgsIBBICCDwaAwjwAQq2BApzcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2Rpc2svdGhyb3R0bGVkX3dyaXRlX29wc19jb3VudBItCg1pbnN0YW5jZV9uYW1lGhxUaGUgbmFtZSBvZiB0aGUgVk0gaW5zdGFuY2UuEisKC2RldmljZV9uYW1lGhxUaGUgbmFtZSBvZiB0aGUgZGlzayBkZXZpY2UuEjwKDHN0b3JhZ2VfdHlwZRosVGhlIHN0b3JhZ2UgdHlwZTogYHBkLXN0YW5kYXJkYCBvciBgcGQtc3NkYC4SOQoLZGV2aWNlX3R5cGUaKlRoZSBkaXNrIHR5cGU6IGBlcGhlbWVyYWxgIG9yIGBwZXJtYW5lbnRgLhJOCg90aHJvdHRsZV9yZWFzb24aO1RoZSBsaW1pdCB0aGF0IGNhdXNlZCB0aGUgdGhyb3R0bGluZzogYFBFUl9HQmAgb3IgYFBFUl9WTWAuGAIgAioBMTIqRGVsdGEgY291bnQgb2YgdGhyb3R0bGVkIHdyaXRlIG9wZXJhdGlvbnMuOhpUaHJvdHRsZWQgd3JpdGUgb3BlcmF0aW9uc0I+Y29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9kaXNrL3Rocm90dGxlZF93cml0ZV9vcHNfY291bnRSCwgEEgIIPBoDCPABCsgDCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvZGlzay93cml0ZV9ieXRlc19jb3VudBItCg1pbnN0YW5jZV9uYW1lGhxUaGUgbmFtZSBvZiB0aGUgVk0gaW5zdGFuY2UuEisKC2RldmljZV9uYW1lGhxUaGUgbmFtZSBvZiB0aGUgZGlzayBkZXZpY2UuEjwKDHN0b3JhZ2VfdHlwZRosVGhlIHN0b3JhZ2UgdHlwZTogYHBkLXN0YW5kYXJkYCBvciBgcGQtc3NkYC4SOQoLZGV2aWNlX3R5cGUaKlRoZSBkaXNrIHR5cGU6IGBlcGhlbWVyYWxgIG9yIGBwZXJtYW5lbnRgLhgCIAIqAkJ5MiVEZWx0YSBjb3VudCBvZiBieXRlcyB3cml0dGVuIHRvIGRpc2suOhBEaXNrIHdyaXRlIGJ5dGVzQjZjb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2Rpc2svd3JpdGVfYnl0ZXNfY291bnRSCwgEEgIIPBoDCPABCssDCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvZGlzay93cml0ZV9vcHNfY291bnQSLQoNaW5zdGFuY2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIFZNIGluc3RhbmNlLhIrCgtkZXZpY2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIGRpc2sgZGV2aWNlLhI8CgxzdG9yYWdlX3R5cGUaLFRoZSBzdG9yYWdlIHR5cGU6IGBwZC1zdGFuZGFyZGAgb3IgYHBkLXNzZGAuEjkKC2RldmljZV90eXBlGipUaGUgZGlzayB0eXBlOiBgZXBoZW1lcmFsYCBvciBgcGVybWFuZW50YC4YAiACKgExMihEZWx0YSBjb3VudCBvZiBkaXNrIHdyaXRlIElPIG9wZXJhdGlvbnMuOhVEaXNrIHdyaXRlIG9wZXJhdGlvbnNCNGNvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvZGlzay93cml0ZV9vcHNfY291bnRSCwgEEgIIPBoDCPABCooDCntwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvaW50ZWdyaXR5L2Vhcmx5X2Jvb3RfdmFsaWRhdGlvbl9zdGF0dXMSLQoNaW5zdGFuY2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIFZNIGluc3RhbmNlLhIyCgZzdGF0dXMaKE9uZSBvZiAicGFzc2VkIiwgImZhaWxlZCIsIG9yICJ1bmtub3duIi4YASACKgExMjVUaGUgdmFsaWRhdGlvbiBzdGF0dXMgb2YgZWFybHkgYm9vdCBpbnRlZ3JpdHkgcG9saWN5LjoVRWFybHkgQm9vdCBWYWxpZGF0aW9uQkZjb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2ludGVncml0eS9lYXJseV9ib290X3ZhbGlkYXRpb25fc3RhdHVzUgsIAxICCDwaAwjwAQqGAwp6cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2ludGVncml0eS9sYXRlX2Jvb3RfdmFsaWRhdGlvbl9zdGF0dXMSLQoNaW5zdGFuY2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIFZNIGluc3RhbmNlLhIyCgZzdGF0dXMaKE9uZSBvZiAicGFzc2VkIiwgImZhaWxlZCIsIG9yICJ1bmtub3duIi4YASACKgExMjRUaGUgdmFsaWRhdGlvbiBzdGF0dXMgb2YgbGF0ZSBib290IGludGVncml0eSBwb2xpY3kuOhRMYXRlIEJvb3QgVmFsaWRhdGlvbkJFY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9pbnRlZ3JpdHkvbGF0ZV9ib290X3ZhbGlkYXRpb25fc3RhdHVzUgsIAxICCDwaAwjwAQrLBApxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL25ldHdvcmsvcmVjZWl2ZWRfYnl0ZXNfY291bnQSLQoNaW5zdGFuY2VfbmFtZRocVGhlIG5hbWUgb2YgdGhlIFZNIGluc3RhbmNlLhKSAgoMbG9hZGJhbGFuY2VkEAEa/wFXaGV0aGVyIHRyYWZmaWMgd2FzIHJlY2VpdmVkIGJ5IGFuIEwzIGxvYWRiYWxhbmNlZCBJUCBhZGRyZXNzIGFzc2lnbmVkIHRvIHRoZSBWTS4gVHJhZmZpYyB0aGF0IGlzIGV4dGVybmFsbHkgcm91dGVkIHRvIHRoZSBWTSdzIHN0YW5kYXJkIGludGVybmFsIG9yIGV4dGVybmFsIElQIGFkZHJlc3MsIHN1Y2ggYXMgTDcgbG9hZGJhbGFuY2VkIHRyYWZmaWMsIGlzIG5vdCBjb25zaWRlcmVkIHRvIGJlIGxvYWRiYWxhbmNlZCBpbiB0aGlzIG1ldHJpYy4YAiACKgJCeTIvRGVsdGEgY291bnQgb2YgYnl0ZXMgcmVjZWl2ZWQgZnJvbSB0aGUgbmV0d29yay46DlJlY2VpdmVkIGJ5dGVzQjxjb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL25ldHdvcmsvcmVjZWl2ZWRfYnl0ZXNfY291bnRSCwgEEgIIPBoDCPABCtIECnNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvbmV0d29yay9yZWNlaXZlZF9wYWNrZXRzX2NvdW50Ei0KDWluc3RhbmNlX25hbWUaHFRoZSBuYW1lIG9mIHRoZSBWTSBpbnN0YW5jZS4SkgIKDGxvYWRiYWxhbmNlZBABGv8BV2hldGhlciB0cmFmZmljIHdhcyByZWNlaXZlZCBieSBhbiBMMyBsb2FkYmFsYW5jZWQgSVAgYWRkcmVzcyBhc3NpZ25lZCB0byB0aGUgVk0uIFRyYWZmaWMgdGhhdCBpcyBleHRlcm5hbGx5IHJvdXRlZCB0byB0aGUgVk0ncyBzdGFuZGFyZCBpbnRlcm5hbCBvciBleHRlcm5hbCBJUCBhZGRyZXNzLCBzdWNoIGFzIEw3IGxvYWRiYWxhbmNlZCB0cmFmZmljLCBpcyBub3QgY29uc2lkZXJlZCB0byBiZSBsb2FkYmFsYW5jZWQgaW4gdGhpcyBtZXRyaWMuGAIgAioBMTIxRGVsdGEgY291bnQgb2YgcGFja2V0cyByZWNlaXZlZCBmcm9tIHRoZSBuZXR3b3JrLjoQUmVjZWl2ZWQgcGFja2V0c0I+Y29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9uZXR3b3JrL3JlY2VpdmVkX3BhY2tldHNfY291bnRSCwgEEgIIPBoDCPABCrsECm1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvbmV0d29yay9zZW50X2J5dGVzX2NvdW50Ei0KDWluc3RhbmNlX25hbWUaHFRoZSBuYW1lIG9mIHRoZSBWTSBpbnN0YW5jZS4SkgIKDGxvYWRiYWxhbmNlZBABGv8BV2hldGhlciB0cmFmZmljIHdhcyBzZW50IGZyb20gYW4gTDMgbG9hZGJhbGFuY2VkIElQIGFkZHJlc3MgYXNzaWduZWQgdG8gdGhlIFZNLiBUcmFmZmljIHRoYXQgaXMgZXh0ZXJuYWxseSByb3V0ZWQgZnJvbSB0aGUgVk0ncyBzdGFuZGFyZCBpbnRlcm5hbCBvciBleHRlcm5hbCBJUCBhZGRyZXNzLCBzdWNoIGFzIEw3IGxvYWRiYWxhbmNlZCB0cmFmZmljLCBpcyBub3QgY29uc2lkZXJlZCB0byBiZSBsb2FkYmFsYW5jZWQgaW4gdGhpcyBtZXRyaWMuGAIgAioCQnkyK0RlbHRhIGNvdW50IG9mIGJ5dGVzIHNlbnQgb3ZlciB0aGUgbmV0d29yay46ClNlbnQgYnl0ZXNCOGNvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvbmV0d29yay9zZW50X2J5dGVzX2NvdW50UgsIBBICCDwaAwjwAQrCBApvcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL25ldHdvcmsvc2VudF9wYWNrZXRzX2NvdW50Ei0KDWluc3RhbmNlX25hbWUaHFRoZSBuYW1lIG9mIHRoZSBWTSBpbnN0YW5jZS4SkgIKDGxvYWRiYWxhbmNlZBABGv8BV2hldGhlciB0cmFmZmljIHdhcyBzZW50IGZyb20gYW4gTDMgbG9hZGJhbGFuY2VkIElQIGFkZHJlc3MgYXNzaWduZWQgdG8gdGhlIFZNLiBUcmFmZmljIHRoYXQgaXMgZXh0ZXJuYWxseSByb3V0ZWQgZnJvbSB0aGUgVk0ncyBzdGFuZGFyZCBpbnRlcm5hbCBvciBleHRlcm5hbCBJUCBhZGRyZXNzLCBzdWNoIGFzIEw3IGxvYWRiYWxhbmNlZCB0cmFmZmljLCBpcyBub3QgY29uc2lkZXJlZCB0byBiZSBsb2FkYmFsYW5jZWQgaW4gdGhpcyBtZXRyaWMuGAIgAioBMTItRGVsdGEgY291bnQgb2YgcGFja2V0cyBzZW50IG92ZXIgdGhlIG5ldHdvcmsuOgxTZW50IHBhY2tldHNCOmNvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvbmV0d29yay9zZW50X3BhY2tldHNfY291bnRSCwgEEgIIPBoDCPABCv8BCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvdXB0aW1lEi0KDWluc3RhbmNlX25hbWUaHFRoZSBuYW1lIG9mIHRoZSBWTSBpbnN0YW5jZS4YAiADKgFzMi1Ib3cgbG9uZyB0aGUgVk0gaGFzIGJlZW4gcnVubmluZywgaW4gc2Vjb25kcy46BlVwdGltZUImY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS91cHRpbWVSCwgEEgIIPBoDCPABCssDCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbnRhaW5lci5nb29nbGVhcGlzLmNvbS9jb250YWluZXIvYWNjZWxlcmF0b3IvZHV0eV9jeWNsZRItCgRtYWtlGiVNYWtlIG9mIHRoZSBhY2NlbGVyYXRvciAoZS5nLiBudmlkaWEpEicKDmFjY2VsZXJhdG9yX2lkGhVJRCBvZiB0aGUgYWNjZWxlcmF0b3ISNQoFbW9kZWwaLE1vZGVsIG9mIHRoZSBhY2NlbGVyYXRvciAoZS5nLiAnVGVzbGEgUDEwMCcpGAEgAioBMTJmUGVyY2VudCBvZiB0aW1lIG92ZXIgdGhlIHBhc3Qgc2FtcGxlIHBlcmlvZCAoMTBzKWR1cmluZyB3aGljaCB0aGUgYWNjZWxlcmF0b3Igd2FzIGFjdGl2ZWx5IHByb2Nlc3NpbmcuOhZBY2NlbGVyYXRvciBkdXR5IGN5Y2xlQjljb250YWluZXIuZ29vZ2xlYXBpcy5jb20vY29udGFpbmVyL2FjY2VsZXJhdG9yL2R1dHlfY3ljbGVSCAgEEgIIPBoACo4DCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbnRhaW5lci5nb29nbGVhcGlzLmNvbS9jb250YWluZXIvYWNjZWxlcmF0b3IvbWVtb3J5X3RvdGFsEi0KBG1ha2UaJU1ha2Ugb2YgdGhlIGFjY2VsZXJhdG9yIChlLmcuIG52aWRpYSkSJwoOYWNjZWxlcmF0b3JfaWQaFUlEIG9mIHRoZSBhY2NlbGVyYXRvchI1CgVtb2RlbBosTW9kZWwgb2YgdGhlIGFjY2VsZXJhdG9yIChlLmcuICdUZXNsYSBQMTAwJykYASACKgJCeTIiVG90YWwgYWNjZWxlcmF0b3IgbWVtb3J5IGluIGJ5dGVzLjoYQWNjZWxlcmF0b3IgbWVtb3J5IHRvdGFsQjtjb250YWluZXIuZ29vZ2xlYXBpcy5jb20vY29udGFpbmVyL2FjY2VsZXJhdG9yL21lbW9yeV90b3RhbFIICAQSAgg8GgAKlQMKb3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29udGFpbmVyLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci9hY2NlbGVyYXRvci9tZW1vcnlfdXNlZBItCgRtYWtlGiVNYWtlIG9mIHRoZSBhY2NlbGVyYXRvciAoZS5nLiBudmlkaWEpEicKDmFjY2VsZXJhdG9yX2lkGhVJRCBvZiB0aGUgYWNjZWxlcmF0b3ISNQoFbW9kZWwaLE1vZGVsIG9mIHRoZSBhY2NlbGVyYXRvciAoZS5nLiAnVGVzbGEgUDEwMCcpGAEgAioCQnkyLFRvdGFsIGFjY2VsZXJhdG9yIG1lbW9yeSBhbGxvY2F0ZWQgaW4gYnl0ZXMuOhdBY2NlbGVyYXRvciBtZW1vcnkgdXNlZEI6Y29udGFpbmVyLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci9hY2NlbGVyYXRvci9tZW1vcnlfdXNlZFIICAQSAgg8GgAKzQIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29udGFpbmVyLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci9hY2NlbGVyYXRvci9yZXF1ZXN0EjwKDXJlc291cmNlX25hbWUaK05hbWUgb2YgdGhlIHJlcXVlc3RlZCBhY2NlbGVyYXRvciByZXNvdXJjZS4YASACKgl7ZGV2aWNlc30yOU51bWJlciBvZiBhY2NlbGVyYXRvciBkZXZpY2VzIHJlcXVlc3RlZCBieSB0aGUgY29udGFpbmVyLjoUUmVxdWVzdCBhY2NlbGVyYXRvcnNCNmNvbnRhaW5lci5nb29nbGVhcGlzLmNvbS9jb250YWluZXIvYWNjZWxlcmF0b3IvcmVxdWVzdFIICAQSAgg8GgAKpAIKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29udGFpbmVyLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci9jcHUvcmVzZXJ2ZWRfY29yZXMYASADKgExMl5OdW1iZXIgb2YgY29yZXMgb2YgQ1BVIHJlc2VydmVkIGZvciB0aGUgY29udGFpbmVyLiBJZiBubyBjb3JlIGxpbWl0IGlzIHNldCwgdGhpcyB3aWxsIGJlIHplcm8uOg5SZXNlcnZlZCBjb3Jlc0I1Y29udGFpbmVyLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci9jcHUvcmVzZXJ2ZWRfY29yZXNSCAgEEgIIPBoACuYCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbnRhaW5lci5nb29nbGVhcGlzLmNvbS9jb250YWluZXIvY3B1L3VzYWdlX3RpbWUYAyADKgFzMqwBQ3VtdWxhdGl2ZSBDUFUgdXNhZ2Ugb24gYWxsIGNvcmVzIGluIHNlY29uZHMuIFRoaXMgbnVtYmVyIGRpdmlkZWQgYnkgdGhlIGVsYXBzZWQgdGltZSByZXByZXNlbnRzIHVzYWdlIGFzIGEgbnVtYmVyIG9mIGNvcmVzLCByZWdhcmRsZXNzIG9mIGFueSBjb3JlIGxpbWl0IHRoYXQgbWlnaHQgYmUgc2V0LjoJQ1BVIHVzYWdlQjFjb250YWluZXIuZ29vZ2xlYXBpcy5jb20vY29udGFpbmVyL2NwdS91c2FnZV90aW1lUggIBBICCDwaAArJAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb250YWluZXIuZ29vZ2xlYXBpcy5jb20vY29udGFpbmVyL2NwdS91dGlsaXphdGlvbhgBIAMqASUyhAFUaGUgcGVyY2VudGFnZSBvZiB0aGUgYWxsb2NhdGVkIENQVSB0aGF0IGlzIGN1cnJlbnRseSBpbiB1c2Ugb24gdGhlIGNvbnRhaW5lci4gSWYgbm8gY29yZSBsaW1pdCBpcyBzZXQsIHRoZW4gdGhpcyBtZXRyaWMgaXMgbm90IHNldC46D0NQVSB1dGlsaXphdGlvbkIyY29udGFpbmVyLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci9jcHUvdXRpbGl6YXRpb25SCwgEEgIIPBoDCOgCCtcCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2NvbnRhaW5lci5nb29nbGVhcGlzLmNvbS9jb250YWluZXIvZGlzay9ieXRlc190b3RhbBI/CgtkZXZpY2VfbmFtZRowVGhlIGRldmljZSBuYW1lIGZvciB0aGUgZGlzayAoZS5nLiBgL2Rldi9zZGExYCkuGAEgAioCQnkyVFRvdGFsIG51bWJlciBvZiBieXRlcyBvZiBjYXBhY2l0eSBvbiB0aGUgZGlzayBpZGVudGlmaWVkIGJ5IGxhYmVsIOKAmGRldmljZV9uYW1l4oCZLjoNRGlzayBjYXBhY2l0eUIzY29udGFpbmVyLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci9kaXNrL2J5dGVzX3RvdGFsUggIBBICCDwaAArLAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb250YWluZXIuZ29vZ2xlYXBpcy5jb20vY29udGFpbmVyL2Rpc2svYnl0ZXNfdXNlZBI/CgtkZXZpY2VfbmFtZRowVGhlIGRldmljZSBuYW1lIGZvciB0aGUgZGlzayAoZS5nLiBgL2Rldi9zZGExYCkuGAEgAioCQnkyTVRvdGFsIG51bWJlciBvZiBieXRlcyB1c2VkIG9uIHRoZSBkaXNrIGlkZW50aWZpZWQgYnkgbGFiZWwg4oCYZGV2aWNlX25hbWXigJkuOgpEaXNrIHVzYWdlQjJjb250YWluZXIuZ29vZ2xlYXBpcy5jb20vY29udGFpbmVyL2Rpc2svYnl0ZXNfdXNlZFIICAQSAgg8GgAK7AEKanByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29udGFpbmVyLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci9tZW1vcnkvYnl0ZXNfdG90YWwYASACKgJCeTInTWVtb3J5IGxpbWl0IG9mIHRoZSBjb250YWluZXIgaW4gYnl0ZXMuOgxNZW1vcnkgbGltaXRCNWNvbnRhaW5lci5nb29nbGVhcGlzLmNvbS9jb250YWluZXIvbWVtb3J5L2J5dGVzX3RvdGFsUggIBBICCDwaAAquAwppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb250YWluZXIuZ29vZ2xlYXBpcy5jb20vY29udGFpbmVyL21lbW9yeS9ieXRlc191c2VkEqABCgttZW1vcnlfdHlwZRqQAUVpdGhlciBgZXZpY3RhYmxlYCBvciBgbm9uLWV2aWN0YWJsZWAuIEV2aWN0YWJsZSBtZW1vcnkgaXMgbWVtb3J5IHRoYXQgY2FuIGJlIGVhc2lseSByZWNsYWltZWQgYnkgdGhlIGtlcm5lbCwgd2hpbGUgbm9uLWV2aWN0YWJsZSBtZW1vcnkgY2Fubm90LhgBIAIqAkJ5MkhNZW1vcnkgdXNhZ2UgaW4gYnl0ZXMsIGJyb2tlbiBkb3duIGJ5IHR5cGU6IGV2aWN0YWJsZSBhbmQgbm9uLWV2aWN0YWJsZS46DE1lbW9yeSB1c2FnZUI0Y29udGFpbmVyLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci9tZW1vcnkvYnl0ZXNfdXNlZFIICAQSAgg8GgAKiAMKb3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvY29udGFpbmVyLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci9tZW1vcnkvcGFnZV9mYXVsdF9jb3VudBJ6CgpmYXVsdF90eXBlGmxGYXVsdCB0eXBlIC0gZWl0aGVyICdtYWpvcicgb3IgJ21pbm9yJywgd2l0aCB0aGUgZm9ybWVyIGluZGljYXRpbmcgdGhhdCB0aGUgcGFnZSBoYWQgdG8gYmUgbG9hZGVkIGZyb20gZGlzay4YAiACKgExMjxOdW1iZXIgb2YgcGFnZSBmYXVsdHMsIGJyb2tlbiBkb3duIGJ5IHR5cGU6IG1ham9yIGFuZCBtaW5vci46C1BhZ2UgZmF1bHRzQjpjb250YWluZXIuZ29vZ2xlYXBpcy5jb20vY29udGFpbmVyL21lbW9yeS9wYWdlX2ZhdWx0X2NvdW50UgsIBBICCDwaAwjoAgrUAQpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9jb250YWluZXIuZ29vZ2xlYXBpcy5jb20vY29udGFpbmVyL3VwdGltZRgDIAMqAXMyLk51bWJlciBvZiBzZWNvbmRzIHNpbmNlIHRoZSBjb250YWluZXIgc3RhcnRlZC46BlVwdGltZUIpY29udGFpbmVyLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci91cHRpbWVSCAgEEgIIPBoACrYBCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2N1c3RvbS5nb29nbGVhcGlzLmNvbS9zdG9yZXMvZGFpbHlfc2FsZXMSCgoIc3RvcmVfaWQYASADMhtBdXRvLWNyZWF0ZWQgY3VzdG9tIG1ldHJpYy5CKGN1c3RvbS5nb29nbGVhcGlzLmNvbS9zdG9yZXMvZGFpbHlfc2FsZXMK4AIKcHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL2JpbGxhYmxlX3NodWZmbGVfZGF0YV9wcm9jZXNzZWQSNQoGam9iX2lkGitUaGUgSUQgb2YgdGhlIGN1cnJlbnQgcnVuIG9mIHRoaXMgcGlwZWxpbmUuGAEgAioCQnkyQlRoZSBiaWxsYWJsZSBieXRlcyBvZiBzaHVmZmxlIGRhdGEgcHJvY2Vzc2VkIGJ5IHRoaXMgRGF0YWZsb3cgam9iLjofQmlsbGFibGUgc2h1ZmZsZSBkYXRhIHByb2Nlc3NlZEI7ZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL2JpbGxhYmxlX3NodWZmbGVfZGF0YV9wcm9jZXNzZWRSCwgEEgIIPBoDCLQBCosDCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFmbG93Lmdvb2dsZWFwaXMuY29tL2pvYi9jdXJyZW50X251bV92Y3B1cxI1CgZqb2JfaWQaK1RoZSBJRCBvZiB0aGUgY3VycmVudCBydW4gb2YgdGhpcyBwaXBlbGluZS4YASACKgExMooBVGhlIG51bWJlciBvZiB2Q1BVcyBjdXJyZW50bHkgYmVpbmcgdXNlZCBieSB0aGlzIERhdGFmbG93IGpvYi4gVGhpcyBpcyB0aGUgY3VycmVudCBudW1iZXIgb2Ygd29ya2VycyB0aW1lcyB0aGUgbnVtYmVyIG9mIHZDUFVzIHBlciB3b3JrZXIuOh5DdXJyZW50IG51bWJlciBvZiB2Q1BVcyBpbiB1c2VCLWRhdGFmbG93Lmdvb2dsZWFwaXMuY29tL2pvYi9jdXJyZW50X251bV92Y3B1c1ILCAQSAgg8GgMItAEKugIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL2N1cnJlbnRfc2h1ZmZsZV9zbG90cxI1CgZqb2JfaWQaK1RoZSBJRCBvZiB0aGUgY3VycmVudCBydW4gb2YgdGhpcyBwaXBlbGluZS4YASACKgExMjRUaGUgY3VycmVudCBzaHVmZmxlIHNsb3RzIHVzZWQgYnkgdGhpcyBEYXRhZmxvdyBqb2IuOhxDdXJyZW50IHNodWZmbGUgc2xvdHMgaW4gdXNlQjFkYXRhZmxvdy5nb29nbGVhcGlzLmNvbS9qb2IvY3VycmVudF9zaHVmZmxlX3Nsb3RzUgsIAxICCDwaAwi0AQrpAgpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhZmxvdy5nb29nbGVhcGlzLmNvbS9qb2IvZGF0YV93YXRlcm1hcmtfYWdlEjUKBmpvYl9pZBorVGhlIElEIG9mIHRoZSBjdXJyZW50IHJ1biBvZiB0aGlzIHBpcGVsaW5lLhgBIAIqAXMyc1RoZSBhZ2UgKHRpbWUgc2luY2UgZXZlbnQgdGltZXN0YW1wKSBvZiB0aGUgbW9zdCByZWNlbnQgaXRlbSBvZiBkYXRhIHRoYXQgaGFzIGJlZW4gZnVsbHkgcHJvY2Vzc2VkIGJ5IHRoZSBwaXBlbGluZS46EkRhdGEgd2F0ZXJtYXJrIGxhZ0IuZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL2RhdGFfd2F0ZXJtYXJrX2FnZVILCAQSAgg8GgMItAEKnQMKXXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL2VsYXBzZWRfdGltZRI1CgZqb2JfaWQaK1RoZSBJRCBvZiB0aGUgY3VycmVudCBydW4gb2YgdGhpcyBwaXBlbGluZS4YASACKgFzMrgBRHVyYXRpb24gdGhhdCB0aGUgY3VycmVudCBydW4gb2YgdGhpcyBwaXBlbGluZSBoYXMgYmVlbiBpbiB0aGUgUnVubmluZyBzdGF0ZSBzbyBmYXIsIGluIHNlY29uZHMuIFdoZW4gYSBydW4gY29tcGxldGVzLCB0aGlzIHN0YXlzIGF0IHRoZSBkdXJhdGlvbiBvZiB0aGF0IHJ1biB1bnRpbCB0aGUgbmV4dCBydW4gc3RhcnRzLjoMRWxhcHNlZCB0aW1lQihkYXRhZmxvdy5nb29nbGVhcGlzLmNvbS9qb2IvZWxhcHNlZF90aW1lUgsIBBICCDwaAwi0AQq2AwpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhZmxvdy5nb29nbGVhcGlzLmNvbS9qb2IvZWxlbWVudF9jb3VudBI1CgZqb2JfaWQaK1RoZSBJRCBvZiB0aGUgY3VycmVudCBydW4gb2YgdGhpcyBwaXBlbGluZS4SmQEKC3Bjb2xsZWN0aW9uGokBVGhlIHBpcGVsaW5lIHBjb2xsZWN0aW9uIHJlcG9ydGluZyB0aGlzIGVsZW1lbnQgY291bnQuICBQQ29sbGVjdGlvbnMgYXJlIHVzdWFsbHkgbmFtZWQgYnkgYXBwZW5kaW5nIC5vdXQgdG8gdGhlIHByb2R1Y2luZyB0cmFuc2Zvcm0gbmFtZS4YASACKgExMjNOdW1iZXIgb2YgZWxlbWVudHMgYWRkZWQgdG8gdGhlIHBjb2xsZWN0aW9uIHNvIGZhci46DUVsZW1lbnQgY291bnRCKWRhdGFmbG93Lmdvb2dsZWFwaXMuY29tL2pvYi9lbGVtZW50X2NvdW50UgsIBBICCDwaAwi0AQrVBAplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhZmxvdy5nb29nbGVhcGlzLmNvbS9qb2IvZXN0aW1hdGVkX2J5dGVfY291bnQSNQoGam9iX2lkGitUaGUgSUQgb2YgdGhlIGN1cnJlbnQgcnVuIG9mIHRoaXMgcGlwZWxpbmUuEqABCgtwY29sbGVjdGlvbhqQAVRoZSBwaXBlbGluZSBwY29sbGVjdGlvbiByZXBvcnRpbmcgdGhpcyBlc3RpbWF0ZWQgYnl0ZSBjb3VudC4gIFBDb2xsZWN0aW9ucyBhcmUgdXN1YWxseSBuYW1lZCBieSBhcHBlbmRpbmcgLm91dCB0byB0aGUgcHJvZHVjaW5nIHRyYW5zZm9ybSBuYW1lLhgBIAIqAkJ5MrQBQW4gZXN0aW1hdGVkIG51bWJlciBvZiBieXRlcyBhZGRlZCB0byB0aGUgcGNvbGxlY3Rpb24gc28gZmFyLiAgRGF0YWZsb3cgY2FsY3VsYXRlcyB0aGUgYXZlcmFnZSBlbmNvZGVkIHNpemUgb2YgZWxlbWVudHMgaW4gYSBwY29sbGVjdGlvbiBhbmQgbXV0aXBsaWVzIGl0IGJ5IHRoZSBudW1iZXIgb2YgZWxlbWVudHMuOhRFc3RpbWF0ZWQgYnl0ZSBjb3VudEIwZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL2VzdGltYXRlZF9ieXRlX2NvdW50UgsIBBICCDwaAwi0AQq0AQpacHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhZmxvdy5nb29nbGVhcGlzLmNvbS9qb2IvaXNfZmFpbGVkGAEgAioBMTIUSGFzIHRoaXMgam9iIGZhaWxlZC46BkZhaWxlZEIlZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL2lzX2ZhaWxlZFIKCAQSAgg8GgIIPArLAgpXcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhZmxvdy5nb29nbGVhcGlzLmNvbS9qb2Ivc3RhdHVzEjUKBmpvYl9pZBorVGhlIElEIG9mIHRoZSBjdXJyZW50IHJ1biBvZiB0aGlzIHBpcGVsaW5lLhgBIAQyfUN1cnJlbnQgc3RhdGUgb2YgdGhpcyBwaXBlbGluZSAoZS5nLjogUlVOTklORywgRE9ORSwgQ0FOQ0VMTEVELCBGQUlMRUQsIC4uLikuIE5vdCByZXBvcnRlZCB3aGlsZSB0aGUgcGlwZWxpbmUgaXMgbm90IHJ1bm5pbmcuOgZTdGF0dXNCImRhdGFmbG93Lmdvb2dsZWFwaXMuY29tL2pvYi9zdGF0dXNSCggEEgIIPBoCCDwKuQIKW3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL3N5c3RlbV9sYWcSNQoGam9iX2lkGitUaGUgSUQgb2YgdGhlIGN1cnJlbnQgcnVuIG9mIHRoaXMgcGlwZWxpbmUuGAEgAioBczJbVGhlIGN1cnJlbnQgbWF4aW11bSBkdXJhdGlvbiB0aGF0IGFuIGl0ZW0gb2YgZGF0YSBoYXMgYmVlbiBhd2FpdGluZyBwcm9jZXNzaW5nLCBpbiBzZWNvbmRzLjoKU3lzdGVtIGxhZ0ImZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL3N5c3RlbV9sYWdSCwgEEgIIPBoDCLQBCscCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFmbG93Lmdvb2dsZWFwaXMuY29tL2pvYi90b3RhbF9tZW1vcnlfdXNhZ2VfdGltZRI1CgZqb2JfaWQaK1RoZSBJRCBvZiB0aGUgY3VycmVudCBydW4gb2YgdGhpcyBwaXBlbGluZS4YASACKgVHQnkuczI+VGhlIHRvdGFsIEdCIHNlY29uZHMgb2YgbWVtb3J5IGFsbG9jYXRlZCB0byB0aGlzIERhdGFmbG93IGpvYi46F1RvdGFsIG1lbW9yeSB1c2FnZSB0aW1lQjNkYXRhZmxvdy5nb29nbGVhcGlzLmNvbS9qb2IvdG90YWxfbWVtb3J5X3VzYWdlX3RpbWVSCwgEEgIIPBoDCLQBCpgDCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFmbG93Lmdvb2dsZWFwaXMuY29tL2pvYi90b3RhbF9wZF91c2FnZV90aW1lEjUKBmpvYl9pZBorVGhlIElEIG9mIHRoZSBjdXJyZW50IHJ1biBvZiB0aGlzIHBpcGVsaW5lLhI2CgxzdG9yYWdlX3R5cGUaJlRoZSB0eXBlIG9mIHBlcnNpc3RlbnQgZGlzazogSERELCBTU0QuGAEgAioFR0J5LnMyY1RoZSB0b3RhbCBHQiBzZWNvbmRzIGZvciBhbGwgcGVyc2lzdGVudCBkaXNrIHVzZWQgYnkgYWxsIHdvcmtlcnMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgRGF0YWZsb3cgam9iLjoTVG90YWwgUEQgdXNhZ2UgdGltZUIvZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL3RvdGFsX3BkX3VzYWdlX3RpbWVSCwgEEgIIPBoDCLQBCtQCCm1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFmbG93Lmdvb2dsZWFwaXMuY29tL2pvYi90b3RhbF9zaHVmZmxlX2RhdGFfcHJvY2Vzc2VkEjUKBmpvYl9pZBorVGhlIElEIG9mIHRoZSBjdXJyZW50IHJ1biBvZiB0aGlzIHBpcGVsaW5lLhgBIAIqAkJ5Mj9UaGUgdG90YWwgYnl0ZXMgb2Ygc2h1ZmZsZSBkYXRhIHByb2Nlc3NlZCBieSB0aGlzIERhdGFmbG93IGpvYi46HFRvdGFsIHNodWZmbGUgZGF0YSBwcm9jZXNzZWRCOGRhdGFmbG93Lmdvb2dsZWFwaXMuY29tL2pvYi90b3RhbF9zaHVmZmxlX2RhdGFfcHJvY2Vzc2VkUgsIBBICCDwaAwi0AQrcAgpvcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhZmxvdy5nb29nbGVhcGlzLmNvbS9qb2IvdG90YWxfc3RyZWFtaW5nX2RhdGFfcHJvY2Vzc2VkEjUKBmpvYl9pZBorVGhlIElEIG9mIHRoZSBjdXJyZW50IHJ1biBvZiB0aGlzIHBpcGVsaW5lLhgBIAIqAkJ5MkFUaGUgdG90YWwgYnl0ZXMgb2Ygc3RyZWFtaW5nIGRhdGEgcHJvY2Vzc2VkIGJ5IHRoaXMgRGF0YWZsb3cgam9iLjoeVG90YWwgc3RyZWFtaW5nIGRhdGEgcHJvY2Vzc2VkQjpkYXRhZmxvdy5nb29nbGVhcGlzLmNvbS9qb2IvdG90YWxfc3RyZWFtaW5nX2RhdGFfcHJvY2Vzc2VkUgsIBBICCDwaAwi0AQqeAgpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhZmxvdy5nb29nbGVhcGlzLmNvbS9qb2IvdG90YWxfdmNwdV90aW1lEjUKBmpvYl9pZBorVGhlIElEIG9mIHRoZSBjdXJyZW50IHJ1biBvZiB0aGlzIHBpcGVsaW5lLhgBIAIqAXMyMVRoZSB0b3RhbCB2Q1BVIHNlY29uZHMgdXNlZCBieSB0aGlzIERhdGFmbG93IGpvYi46D1RvdGFsIHZDUFUgdGltZUIrZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL3RvdGFsX3ZjcHVfdGltZVILCAQSAgg8GgMItAEKhwMKXXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YWZsb3cuZ29vZ2xlYXBpcy5jb20vam9iL3VzZXJfY291bnRlchI+CgttZXRyaWNfbmFtZRovVGhlIG5hbWUgcHJvdmlkZWQgYnkgdGhlIHVzZXIgZm9yIHRoaXMgY291bnRlci4SNQoGam9iX2lkGitUaGUgSUQgb2YgdGhlIGN1cnJlbnQgcnVuIG9mIHRoaXMgcGlwZWxpbmUuEkMKCnB0cmFuc2Zvcm0aNVRoZSBwaXBlbGluZSBQVHJhbnNmb3JtIHJlcG9ydGluZyB0aGlzIGNvdW50ZXIgdmFsdWUuGAEgAyoBMTIeQSB1c2VyLWRlZmluZWQgY291bnRlciBtZXRyaWMuOgxVc2VyIENvdW50ZXJCKGRhdGFmbG93Lmdvb2dsZWFwaXMuY29tL2pvYi91c2VyX2NvdW50ZXJSCwgEEgIIPBoDCLQBCtcCCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvaGRmcy9kYXRhbm9kZXMSUgoGc3RhdHVzGkhUaGUgc3RhdHVzIG9mIERhdGFOb2RlIHN1Y2ggYXMgcnVubmluZywgZGVjb21taXNzaW9uaW5nLCBkZWNvbW1pc3Npb25lZC4YASACKgExMklJbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBIREZTIERhdGFOb2RlcyB0aGF0IGFyZSBydW5uaW5nIGluc2lkZSBhIGNsdXN0ZXIuOg5IREZTIERhdGFOb2Rlc0IuZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9oZGZzL2RhdGFub2Rlc1IKCAMSAgg8GgIIeArFAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhcHJvYy5nb29nbGVhcGlzLmNvbS9jbHVzdGVyL2hkZnMvc3RvcmFnZV9jYXBhY2l0eRI+CgZzdGF0dXMaNFRoZSBzdGF0dXMgb2YgSERGUyBjYXBhY2l0eSBzdWNoIGFzIHVzZWQsIHJlbWFpbmluZy4YASADKgRHaUJ5MjtJbmRpY2F0ZXMgY2FwYWNpdHkgb2YgSERGUyBzeXN0ZW0gcnVubmluZyBvbiBjbHVzdGVyIGluIEdCLjoNSERGUyBjYXBhY2l0eUI1ZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9oZGZzL3N0b3JhZ2VfY2FwYWNpdHlSCggDEgIIPBoCCHgKhgIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9oZGZzL3N0b3JhZ2VfdXRpbGl6YXRpb24YASADKgExMi5UaGUgcGVyY2VudGFnZSBvZiBIREZTIHN0b3JhZ2UgY3VycmVudGx5IHVzZWQuOhhIREZTIHN0b3JhZ2UgdXRpbGl6YXRpb25COGRhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvaGRmcy9zdG9yYWdlX3V0aWxpemF0aW9uUgoIAxICCDwaAgh4CpQDCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvaGRmcy91bmhlYWx0aHlfYmxvY2tzEn0KBnN0YXR1cxpzVGhlIHN0YXR1cyBvZiB1bmhlYWx0aHkgSERGUyBibG9jayBzdWNoIGFzIG1pc3NpbmcsIHVuZGVyX3JlcGxpY2F0aW9uLCBjb3JydXB0LCBwZW5kaW5nX2RlbGV0aW9uLCBtaXNzaW5nX3JlcGxfb25lLhgBIAIqATEyPEluZGljYXRlcyB0aGUgbnVtYmVyIG9mIHVuaGVhbHRoeSBibG9ja3MgaW5zaWRlIHRoZSBjbHVzdGVyLjofVW5oZWFsdGh5IEhERlMgYmxvY2tzIGJ5IHN0YXR1c0I1ZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9oZGZzL3VuaGVhbHRoeV9ibG9ja3NSCggDEgIIPBoCCHgK8QIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9qb2IvY29tcGxldGlvbl90aW1lEjwKCGpvYl90eXBlGjBUaGUgdHlwZSBvZiBqb2Igc3VjaCBhcyBIQURPT1BfSk9CIG9yIFNQQVJLX0pPQi4YAiAFKgFzMnFUaGUgdGltZSBqb2JzIHRvb2sgdG8gY29tcGxldGUgZnJvbSB0aGUgdGltZSB0aGUgdXNlciBzdWJtaXRzIGEgam9iIHRvIHRoZSB0aW1lIERhdGFwcm9jIHJlcG9ydHMgaXQgaXMgY29tcGxldGVkLjoMSm9iIGR1cmF0aW9uQjNkYXRhcHJvYy5nb29nbGVhcGlzLmNvbS9jbHVzdGVyL2pvYi9jb21wbGV0aW9uX3RpbWVSCggDEgIIPBoCCHgK3QIKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9qb2IvZHVyYXRpb24SPAoIam9iX3R5cGUaMFRoZSB0eXBlIG9mIGpvYiBzdWNoIGFzIEhBRE9PUF9KT0Igb3IgU1BBUktfSk9CLhI5CgVzdGF0ZRowVGhlIHN0YXRlIG9mIHRoZSBqb2Igc3VjaCBhcyBQRU5ESU5HIG9yIFJVTk5JTkcuGAIgBSoBczIqVGhlIHRpbWUgam9icyBoYXZlIHNwZW50IGluIGEgZ2l2ZW4gc3RhdGUuOhJKb2Igc3RhdGUgZHVyYXRpb25CLGRhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvam9iL2R1cmF0aW9uUgoIAxICCDwaAgh4CvECCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvam9iL2ZhaWxlZF9jb3VudBI7CgplcnJvcl90eXBlGi1UaGUgcnBjIGNvZGUgb2YgdGhlIGVycm9yIHN1Y2ggYXMgNDA0IG9yIDUwMy4SPAoIam9iX3R5cGUaMFRoZSB0eXBlIG9mIGpvYiBzdWNoIGFzIEhBRE9PUF9KT0Igb3IgU1BBUktfSk9CLhgCIAIqATEyO0luZGljYXRlcyB0aGUgbnVtYmVyIG9mIGpvYnMgdGhhdCBoYXZlIGZhaWxlZCBvbiBhIGNsdXN0ZXIuOgtGYWlsZWQgam9ic0IwZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9qb2IvZmFpbGVkX2NvdW50UgoIAxICCDwaAgh4CrcCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvam9iL3J1bm5pbmdfY291bnQSPAoIam9iX3R5cGUaMFRoZSB0eXBlIG9mIGpvYiBzdWNoIGFzIEhBRE9PUF9KT0Igb3IgU1BBUktfSk9CLhgBIAIqATEyO0luZGljYXRlcyB0aGUgbnVtYmVyIG9mIGpvYnMgdGhhdCBhcmUgcnVubmluZyBvbiBhIGNsdXN0ZXIuOgxSdW5uaW5nIGpvYnNCMWRhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvam9iL3J1bm5pbmdfY291bnRSCggDEgIIPBoCCHgKxQIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9qb2Ivc3VibWl0dGVkX2NvdW50EjwKCGpvYl90eXBlGjBUaGUgdHlwZSBvZiBqb2Igc3VjaCBhcyBIQURPT1BfSk9CIG9yIFNQQVJLX0pPQi4YAiACKgExMkNJbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBqb2JzIHRoYXQgaGF2ZSBiZWVuIHN1Ym1pdHRlZCB0byBhIGNsdXN0ZXIuOg5TdWJtaXR0ZWQgam9ic0IzZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9qb2Ivc3VibWl0dGVkX2NvdW50UgoIAxICCDwaAgh4CqQDCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvb3BlcmF0aW9uL2NvbXBsZXRpb25fdGltZRJRCg5vcGVyYXRpb25fdHlwZRo/VGhlIHR5cGUgb2Ygb3BlcmF0aW9uIHN1Y2ggYXMgQ1JFQVRFX0NMVVNURVIgb3IgREVMRVRFX0NMVVNURVIuGAIgBSoBczJ9VGhlIHRpbWUgb3BlcmF0aW9ucyB0b29rIHRvIGNvbXBsZXRlIGZyb20gdGhlIHRpbWUgdGhlIHVzZXIgc3VibWl0cyBhIG9wZXJhdGlvbiB0byB0aGUgdGltZSBEYXRhcHJvYyByZXBvcnRzIGl0IGlzIGNvbXBsZXRlZC46Ek9wZXJhdGlvbiBkdXJhdGlvbkI5ZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci9vcGVyYXRpb24vY29tcGxldGlvbl90aW1lUgoIAxICCDwaAgh4CpMDCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvb3BlcmF0aW9uL2R1cmF0aW9uEksKDm9wZXJhdGlvbl90eXBlGjlUaGUgc3RhdGUgb2YgdGhlIG9wZXJhdGlvbiBzdWNoIGFzIFBFTkRJTkcgb3IgQ1JFQVRFX1ZNUy4SSAoFc3RhdGUaP1RoZSB0eXBlIG9mIG9wZXJhdGlvbiBzdWNoIGFzIENSRUFURV9DTFVTVEVSIG9yIERFTEVURV9DTFVTVEVSLhgCIAUqAXMyMFRoZSB0aW1lIG9wZXJhdGlvbnMgaGF2ZSBzcGVudCBpbiBhIGdpdmVuIHN0YXRlLjoYT3BlcmF0aW9uIHN0YXRlIGR1cmF0aW9uQjJkYXRhcHJvYy5nb29nbGVhcGlzLmNvbS9jbHVzdGVyL29wZXJhdGlvbi9kdXJhdGlvblIKCAMSAgg8GgIIeAqeAwprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhcHJvYy5nb29nbGVhcGlzLmNvbS9jbHVzdGVyL29wZXJhdGlvbi9mYWlsZWRfY291bnQSOwoKZXJyb3JfdHlwZRotVGhlIHJwYyBjb2RlIG9mIHRoZSBlcnJvciBzdWNoIGFzIDQwNCBvciA1MDMuElEKDm9wZXJhdGlvbl90eXBlGj9UaGUgdHlwZSBvZiBvcGVyYXRpb24gc3VjaCBhcyBDUkVBVEVfQ0xVU1RFUiBvciBERUxFVEVfQ0xVU1RFUi4YAiACKgExMkFJbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBvcGVyYXRpb25zIHRoYXQgaGF2ZSBmYWlsZWQgb24gYSBjbHVzdGVyLjoRRmFpbGVkIG9wZXJhdGlvbnNCNmRhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvb3BlcmF0aW9uL2ZhaWxlZF9jb3VudFIKCAMSAgg8GgIIeArkAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhcHJvYy5nb29nbGVhcGlzLmNvbS9jbHVzdGVyL29wZXJhdGlvbi9ydW5uaW5nX2NvdW50ElEKDm9wZXJhdGlvbl90eXBlGj9UaGUgdHlwZSBvZiBvcGVyYXRpb24gc3VjaCBhcyBDUkVBVEVfQ0xVU1RFUiBvciBERUxFVEVfQ0xVU1RFUi4YASACKgExMkFJbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBvcGVyYXRpb25zIHRoYXQgYXJlIHJ1bm5pbmcgb24gYSBjbHVzdGVyLjoSUnVubmluZyBvcGVyYXRpb25zQjdkYXRhcHJvYy5nb29nbGVhcGlzLmNvbS9jbHVzdGVyL29wZXJhdGlvbi9ydW5uaW5nX2NvdW50UgoIAxICCDwaAgh4CvICCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvb3BlcmF0aW9uL3N1Ym1pdHRlZF9jb3VudBJRCg5vcGVyYXRpb25fdHlwZRo/VGhlIHR5cGUgb2Ygb3BlcmF0aW9uIHN1Y2ggYXMgQ1JFQVRFX0NMVVNURVIgb3IgREVMRVRFX0NMVVNURVIuGAIgAioBMTJJSW5kaWNhdGVzIHRoZSBudW1iZXIgb2Ygb3BlcmF0aW9ucyB0aGF0IGhhdmUgYmVlbiBzdWJtaXR0ZWQgdG8gYSBjbHVzdGVyLjoUU3VibWl0dGVkIG9wZXJhdGlvbnNCOWRhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIvb3BlcmF0aW9uL3N1Ym1pdHRlZF9jb3VudFIKCAMSAgg8GgIIeAqbAgp1cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhcHJvYy5nb29nbGVhcGlzLmNvbS9jbHVzdGVyL3lhcm4vYWxsb2NhdGVkX21lbW9yeV9wZXJjZW50YWdlGAEgAyoBMTIrVGhlIHBlcmNlbnRhZ2Ugb2YgWUFSTiBtZW1vcnkgaXMgYWxsb2NhdGVkLjogWUFSTiBhbGxvY2F0ZWQgbWVtb3J5IHBlcmNlbnRhZ2VCQGRhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIveWFybi9hbGxvY2F0ZWRfbWVtb3J5X3BlcmNlbnRhZ2VSCggDEgIIPBoCCHgKygIKXnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci95YXJuL2FwcHMSXQoGc3RhdHVzGlNUaGUgc3RhdHVzIG9mIFlBUk4gYXBwbGljYXRpb24gc3VjaCBhcyBydW5uaW5nLCBwZW5kaW5nLCBjb21wbGV0ZWQsIGZhaWxlZCwga2lsbGVkLhgBIAIqATEyMUluZGljYXRlcyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBZQVJOIGFwcGxpY2F0aW9ucy46GFlBUk4gYWN0aXZlIGFwcGxpY2F0aW9uc0IpZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci95YXJuL2FwcHNSCggDEgIIPBoCCHgKswIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci95YXJuL2NvbnRhaW5lcnMSTAoGc3RhdHVzGkJUaGUgc3RhdHVzIG9mIFlBUk4gY29udGFpbmVyIHN1Y2ggYXMgYWxsb2NhdGVkLCBwZW5kaW5nLCByZXNlcnZlZC4YASACKgExMihJbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBZQVJOIGNvbnRhaW5lcnMuOg9ZQVJOIGNvbnRhaW5lcnNCL2RhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIveWFybi9jb250YWluZXJzUgoIAxICCDwaAgh4CrUCCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIveWFybi9tZW1vcnlfc2l6ZRJLCgZzdGF0dXMaQVRoZSBzdGF0dXMgb2YgWUFSTiBtZW1vcnkgc3VjaCBhcyBhdmFpbGFibGUsIGFsbG9jYXRlZCwgcmVzZXJ2ZWQuGAEgAyoER2lCeTIlSW5kaWNhdGVzIHRoZSBZQVJOIG1lbW9yeSBzaXplIGluIEdCLjoQWUFSTiBtZW1vcnkgc2l6ZUIwZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci95YXJuL21lbW9yeV9zaXplUgoIAxICCDwaAgh4CukCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFwcm9jLmdvb2dsZWFwaXMuY29tL2NsdXN0ZXIveWFybi9ub2RlbWFuYWdlcnMSYwoGc3RhdHVzGllUaGUgc3RhdHVzIG9mIFlBUk4gTm9kZU1hbmFnZXIgc3VjaCBhcyBhY3RpdmUsIGxvc3QsIHVuaGVhbHRoeSwgcmVib290ZWQsIGRlY29tbWlzc2lvbmVkLhgBIAIqATEyQUluZGljYXRlcyB0aGUgbnVtYmVyIG9mIFlBUk4gTm9kZU1hbmFnZXJzIHJ1bm5pbmcgaW5zaWRlIGNsdXN0ZXIuOhFZQVJOIE5vZGVNYW5hZ2Vyc0IxZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci95YXJuL25vZGVtYW5hZ2Vyc1IKCAMSAgg8GgIIeAqvAgptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhcHJvYy5nb29nbGVhcGlzLmNvbS9jbHVzdGVyL3lhcm4vcGVuZGluZ19tZW1vcnlfc2l6ZRgBIAMqBEdpQnkyVFRoZSBjdXJyZW50IG1lbW9yeSByZXF1ZXN0LCBpbiBHQiwgdGhhdCBpcyBwZW5kaW5nIHRvIGJlIGZ1bGZpbGxlZCBieSB0aGUgc2NoZWR1bGVyLjoYWUFSTiBwZW5kaW5nIG1lbW9yeSBzaXplQjhkYXRhcHJvYy5nb29nbGVhcGlzLmNvbS9jbHVzdGVyL3lhcm4vcGVuZGluZ19tZW1vcnlfc2l6ZVIKCAMSAgg8GgIIeArRAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhcHJvYy5nb29nbGVhcGlzLmNvbS9jbHVzdGVyL3lhcm4vdmlydHVhbF9jb3JlcxJbCgZzdGF0dXMaUVRoZSBzdGF0dXMgb2YgWUFSTiB2aXJ0dWFsIGNvcmVzIHN1Y2ggYXMgcGVuZGluZywgYWxsb2NhdGVkLCBhdmFpbGFibGUsIHJlc2VydmVkLhgBIAIqATEyLkluZGljYXRlcyB0aGUgbnVtYmVyIG9mIHZpcnR1YWwgY29yZXMgaW4gWUFSTi46EllBUk4gdmlydHVhbCBjb3Jlc0IyZGF0YXByb2MuZ29vZ2xlYXBpcy5jb20vY2x1c3Rlci95YXJuL3ZpcnR1YWxfY29yZXNSCggDEgIIPBoCCHgKrwMKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZGF0YXN0b3JlLmdvb2dsZWFwaXMuY29tL2FwaS9yZXF1ZXN0X2NvdW50Ek4KCmFwaV9tZXRob2QaQFRoZSBBUEkgbWV0aG9kIGNhbGxlZCAoZm9yIGV4YW1wbGU6IEJlZ2luVHJhbnNhY3Rpb24gb3IgQ29tbWl0KS4SkgEKDXJlc3BvbnNlX2NvZGUagAFPcGVyYXRpb24gcmVzcG9uc2UgY29kZSBzdHJpbmcsIGRlcml2ZWQgYXMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBIVFRQIHN0YXR1cyBjb2RlIChlLmcuIHN1Y2Nlc3MsIG5vdF9mb3VuZCwgdW5hdmFpbGFibGUpLhgCIAIqATEyHUNvdW50IG9mIERhdGFzdG9yZSBBUEkgY2FsbHMuOghSZXF1ZXN0c0IqZGF0YXN0b3JlLmdvb2dsZWFwaXMuY29tL2FwaS9yZXF1ZXN0X2NvdW50UgsIBBICCDwaAwjwAQq+AgpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhc3RvcmUuZ29vZ2xlYXBpcy5jb20vZW50aXR5L3JlYWRfc2l6ZXMSSAoEdHlwZRpAVGhlIHR5cGUgb2YgZW50aXR5IHJlYWQgKGZvciBleGFtcGxlOiBLRVlTX09OTFkgb3IgRU5USVRZX1NDQU4pLhgCIAUqAkJ5MjhEaXN0cmlidXRpb24gb2Ygc2l6ZXMgb2YgcmVhZCBlbnRpdGllcywgZ3JvdXBlZCBieSB0eXBlLjoWU2l6ZXMgb2YgcmVhZCBlbnRpdGllc0IqZGF0YXN0b3JlLmdvb2dsZWFwaXMuY29tL2VudGl0eS9yZWFkX3NpemVzUgsIBBICCDwaAwjwAQq6AgpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9kYXRhc3RvcmUuZ29vZ2xlYXBpcy5jb20vZW50aXR5L3dyaXRlX3NpemVzEj4KAm9wGjhUaGUgb3BlcmF0aW9uIHR5cGUgKGZvciBleGFtcGxlOiBDUkVBVEUgb3IgREVMRVRFX05PT1ApLhgCIAUqAkJ5MjlEaXN0cmlidXRpb24gb2Ygc2l6ZXMgb2Ygd3JpdHRlbiBlbnRpdGllcywgZ3JvdXBlZCBieSBvcC46GVNpemVzIG9mIHdyaXR0ZW4gZW50aXRpZXNCK2RhdGFzdG9yZS5nb29nbGVhcGlzLmNvbS9lbnRpdHkvd3JpdGVfc2l6ZXNSCwgEEgIIPBoDCPABCtEBCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2RhdGFzdG9yZS5nb29nbGVhcGlzLmNvbS9pbmRleC93cml0ZV9jb3VudBgCIAIqATEyIENvdW50IG9mIERhdGFzdG9yZSBpbmRleCB3cml0ZXMuOgxJbmRleCB3cml0ZXNCKmRhdGFzdG9yZS5nb29nbGVhcGlzLmNvbS9pbmRleC93cml0ZV9jb3VudFILCAQSAgg8GgMI8AEKpQIKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZG5zLmdvb2dsZWFwaXMuY29tL3F1ZXJ5L3Jlc3BvbnNlX2NvdW50Ek8KDXJlc3BvbnNlX2NvZGUaPlRoZSBETlMgUkNPREUgb2YgdGhlIHJlc3BvbnNlLCBlLmcuIE5PRVJST1IsIE5YRE9NQUlOLCBGT1JNRVJSGAIgAioKe3JlcXVlc3RzfTIaUmF0ZSBvZiBhbGwgRE5TIHJlc3BvbnNlcy46E0ROUyByZXNwb25zZSBjb3VudHNCJ2Rucy5nb29nbGVhcGlzLmNvbS9xdWVyeS9yZXNwb25zZV9jb3VudFIKCAMSAgg8GgIIPAr0AQpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvZnJlZV9ieXRlcxIpCgpmaWxlX3NoYXJlGhtUaGUgbmFtZSBvZiB0aGUgRmlsZSBTaGFyZS4YASACKgJCeTIWVG90YWwgZnJlZSBkaXNrIGJ5dGVzLjoPRnJlZSBkaXNrIGJ5dGVzQilmaWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvZnJlZV9ieXRlc1ILCAMSAgg8GgMItAEKlgIKZnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlsZS5nb29nbGVhcGlzLmNvbS9uZnMvc2VydmVyL2ZyZWVfYnl0ZXNfcGVyY2VudBIpCgpmaWxlX3NoYXJlGhtUaGUgbmFtZSBvZiB0aGUgRmlsZSBTaGFyZS4YASADKgElMiFUb3RhbCBmcmVlIGRpc2sgYnl0ZXMgcGVyY2VudGFnZS46F0ZyZWUgZGlzayBieXRlcyBwZXJjZW50QjFmaWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvZnJlZV9ieXRlc19wZXJjZW50UgsIAxICCDwaAwi0AQrHAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvcHJvY2VkdXJlX2NhbGxfY291bnQSLQoEbmFtZRolVGhlIG5hbWUgb2YgdGhlIE5GUyBTZXJ2ZXIgcHJvY2VkdXJlLhIrCgd2ZXJzaW9uGiBUaGUgdmVyc2lvbiBvZiB0aGUgTkZTIHByb3RvY29sLhgCIAIqATEyIE5GUyBzZXJ2ZXIgcHJvY2VkdXJlIGNhbGwgY291bnQuOhRQcm9jZWR1cmUgY2FsbCBjb3VudEIzZmlsZS5nb29nbGVhcGlzLmNvbS9uZnMvc2VydmVyL3Byb2NlZHVyZV9jYWxsX2NvdW50UgsIAxICCDwaAwi0AQr6AQpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvcmVhZF9ieXRlc19jb3VudBIpCgpmaWxlX3NoYXJlGhtUaGUgbmFtZSBvZiB0aGUgRmlsZSBTaGFyZS4YAiACKgJCeTIVQnl0ZXMgcmVhZCBmcm9tIGRpc2suOgpCeXRlcyByZWFkQi9maWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvcmVhZF9ieXRlc19jb3VudFILCAMSAgg8GgMItAEKzAIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlsZS5nb29nbGVhcGlzLmNvbS9uZnMvc2VydmVyL3JlYWRfbWlsbGlzZWNvbmRzX2NvdW50EikKCmZpbGVfc2hhcmUaG1RoZSBuYW1lIG9mIHRoZSBGaWxlIFNoYXJlLhgCIAIqAm1zMjRDb3VudCBvZiBtaWxsaXNlY29uZHMgc3BlbnQgb24gZGlzayByZWFkIG9wZXJhdGlvbnMuOi9UaW1lIChpbiBtaWxsaXNlY29uZHMpIHNwZW50IG9uIHJlYWQgb3BlcmF0aW9uc0I2ZmlsZS5nb29nbGVhcGlzLmNvbS9uZnMvc2VydmVyL3JlYWRfbWlsbGlzZWNvbmRzX2NvdW50UgsIAxICCDwaAwi0AQqNAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvcmVhZF9vcHNfY291bnQSKQoKZmlsZV9zaGFyZRobVGhlIG5hbWUgb2YgdGhlIEZpbGUgU2hhcmUuGAIgAioBMTIeQ291bnQgb2YgZGlzayByZWFkIG9wZXJhdGlvbnMuOhlEaXNrIHJlYWQgb3BlcmF0aW9uIGNvdW50Qi1maWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvcmVhZF9vcHNfY291bnRSCwgDEgIIPBoDCLQBCvQBCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ZpbGUuZ29vZ2xlYXBpcy5jb20vbmZzL3NlcnZlci91c2VkX2J5dGVzEikKCmZpbGVfc2hhcmUaG1RoZSBuYW1lIG9mIHRoZSBGaWxlIFNoYXJlLhgBIAIqAkJ5MhZUb3RhbCB1c2VkIGRpc2sgYnl0ZXMuOg9Vc2VkIGRpc2sgYnl0ZXNCKWZpbGUuZ29vZ2xlYXBpcy5jb20vbmZzL3NlcnZlci91c2VkX2J5dGVzUgsIAxICCDwaAwi0AQqWAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvdXNlZF9ieXRlc19wZXJjZW50EikKCmZpbGVfc2hhcmUaG1RoZSBuYW1lIG9mIHRoZSBGaWxlIFNoYXJlLhgBIAMqASUyIVRvdGFsIHVzZWQgZGlzayBieXRlcyBwZXJjZW50YWdlLjoXVXNlZCBkaXNrIGJ5dGVzIHBlcmNlbnRCMWZpbGUuZ29vZ2xlYXBpcy5jb20vbmZzL3NlcnZlci91c2VkX2J5dGVzX3BlcmNlbnRSCwgDEgIIPBoDCLQBCoACCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ZpbGUuZ29vZ2xlYXBpcy5jb20vbmZzL3NlcnZlci93cml0ZV9ieXRlc19jb3VudBIpCgpmaWxlX3NoYXJlGhtUaGUgbmFtZSBvZiB0aGUgRmlsZSBTaGFyZS4YAiACKgJCeTIWQnl0ZXMgd3JpdHRlbiB0byBkaXNrLjoNQnl0ZXMgd3JpdHRlbkIwZmlsZS5nb29nbGVhcGlzLmNvbS9uZnMvc2VydmVyL3dyaXRlX2J5dGVzX2NvdW50UgsIAxICCDwaAwi0AQrQAgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvd3JpdGVfbWlsbGlzZWNvbmRzX2NvdW50EikKCmZpbGVfc2hhcmUaG1RoZSBuYW1lIG9mIHRoZSBGaWxlIFNoYXJlLhgCIAIqAm1zMjVDb3VudCBvZiBtaWxsaXNlY29uZHMgc3BlbnQgb24gZGlzayB3cml0ZSBvcGVyYXRpb25zLjowVGltZSAoaW4gbWlsbGlzZWNvbmRzKSBzcGVudCBvbiB3cml0ZSBvcGVyYXRpb25zQjdmaWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvd3JpdGVfbWlsbGlzZWNvbmRzX2NvdW50UgsIAxICCDwaAwi0AQqRAgpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvd3JpdGVfb3BzX2NvdW50EikKCmZpbGVfc2hhcmUaG1RoZSBuYW1lIG9mIHRoZSBGaWxlIFNoYXJlLhgCIAIqATEyH0NvdW50IG9mIGRpc2sgd3JpdGUgb3BlcmF0aW9ucy46GkRpc2sgd3JpdGUgb3BlcmF0aW9uIGNvdW50Qi5maWxlLmdvb2dsZWFwaXMuY29tL25mcy9zZXJ2ZXIvd3JpdGVfb3BzX2NvdW50UgsIAxICCDwaAwi0AQr6Agp0cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maXJlYmFzZWF1dGguZ29vZ2xlYXBpcy5jb20vcGhvbmVfYXV0aC9waG9uZV92ZXJpZmljYXRpb25fY291bnQSMQoJdGllcl9uYW1lGiRUaWVyIG5hbWUgZm9yIHZlcmlmaWVkIHBob25lIG51bWJlci4SNwoMY291bnRyeV9jb2RlGidDb3VudHJ5IGNvZGUgZm9yIHZlcmlmaWVkIHBob25lIG51bWJlci4YAiACKgExMiVEZXRhaWxlZCBjb3VudCBvZiBwaG9uZSB2ZXJpZmljYXRpb24uOhpQaG9uZSBWZXJpZmljYXRpb24gTWV0cmljc0I/ZmlyZWJhc2VhdXRoLmdvb2dsZWFwaXMuY29tL3Bob25lX2F1dGgvcGhvbmVfdmVyaWZpY2F0aW9uX2NvdW50UgsIBBICCDwaAwi0AQqoAgplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL2lvL2RhdGFiYXNlX2xvYWQSPQoEdHlwZRo1VGhlIHR5cGUgb2Ygb3BlcmF0aW9uIChmb3IgZXhhbXBsZTogbGlzdGVuIG9yIHVwZGF0ZSkYASADKgExMitGcmFjdGlvbiBvZiBkYXRhYmFzZSBsb2FkLCBncm91cGVkIGJ5IHR5cGUuOg1EYXRhYmFzZSBMb2FkQjBmaXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL2lvL2RhdGFiYXNlX2xvYWRSCwgEEgIIPBoDCIgOCuwBCm1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vaW8vcGVyc2lzdGVkX2J5dGVzX2NvdW50GAIgAioCQnkyH0J5dGVzIG9mIGRhdGEgcGVyc2lzdGVkIHRvIGRpc2s6C1NhdmVkIEJ5dGVzQjhmaXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL2lvL3BlcnNpc3RlZF9ieXRlc19jb3VudFILCAQSAgg8GgMIgA8K/wEKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlyZWJhc2VkYXRhYmFzZS5nb29nbGVhcGlzLmNvbS9pby9zZW50X3Jlc3BvbnNlc19jb3VudBgCIAIqATEyMk51bWJlciBvZiByZXNwb25zZXMgc2VudCBvciBicm9hZGNhc3RlZCB0byBjbGllbnRzOg5SZXNwb25zZXMgc2VudEI3ZmlyZWJhc2VkYXRhYmFzZS5nb29nbGVhcGlzLmNvbS9pby9zZW50X3Jlc3BvbnNlc19jb3VudFILCAQSAgg8GgMIgA8K0QEKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlyZWJhc2VkYXRhYmFzZS5nb29nbGVhcGlzLmNvbS9pby91dGlsaXphdGlvbhgBIAMqATEyFUZyYWN0aW9uIG9mIEkvTyB1c2VkLjoPSS9PIHV0aWxpemF0aW9uQi5maXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL2lvL3V0aWxpemF0aW9uUgsIBBICCDwaAwiIDgr1AQpvcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL25ldHdvcmsvYWN0aXZlX2Nvbm5lY3Rpb25zGAEgAioBMTIlVGhlIG51bWJlciBvZiBvdXRzdGFuZGluZyBjb25uZWN0aW9uczoLQ29ubmVjdGlvbnNCOmZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9hY3RpdmVfY29ubmVjdGlvbnNSCwgEEgIIPBoDCIgOCsoCCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9hcGlfaGl0c19jb3VudBJMCg5vcGVyYXRpb25fdHlwZRo6VGhlIG9wZXJhdGlvbiB0eXBlIChzdWNoIGFzIHJlYWx0aW1lX2xpc3RlbnMgb3IgcmVzdF9nZXQpLhgCIAIqATEyN1RoZSBudW1iZXIgb2YgaGl0cyBhZ2luc3QgeW91ciBkYXRhYmFzZSBncm91cGVkIGJ5IHR5cGU6CEFQSSBIaXRzQjZmaXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL25ldHdvcmsvYXBpX2hpdHNfY291bnRSCwgEEgIIPBoDCIAPCpMCCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9icm9hZGNhc3RfbG9hZBgBIAMqATEySFV0aWxpemF0aW9uIG9mIHRoZSB0aW1lIGl0IHRha2VzIHRvIHByZXAgYW5kIHNlbmQgYnJvYWRjYXN0cyB0byBjbGllbnRzLjoOQnJvYWRjYXN0IExvYWRCNmZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9icm9hZGNhc3RfbG9hZFILCAQSAgg8GgMIiA4KpgIKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlyZWJhc2VkYXRhYmFzZS5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2Rpc2FibGVkX2Zvcl9vdmVyYWdlcxgBIAEySUluZGljYXRlcyBpZiB0aGUgRmlyZWJhc2UgZGF0YWJhc2UgaGFzIGJlZW4gZGlzYWJsZWQgZm9yIG5ldHdvcmsgb3ZlcmFnZXM6FERpc2FibGVkIGZvciBuZXR3b3JrQj1maXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL25ldHdvcmsvZGlzYWJsZWRfZm9yX292ZXJhZ2VzUgwIBBIDCIQHGgMIiA4KvQIKcXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlyZWJhc2VkYXRhYmFzZS5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2h0dHBzX3JlcXVlc3RzX2NvdW50EjoKEnJldXNlZF9zc2xfc2Vzc2lvbhokSWYgdGhlIHNzbCBzZXNzaW9uIHdhcyByZXVzZWQgb3Igbm90GAIgAioBMTIhTnVtYmVyIG9mIEhUVFBTIHJlcXVlc3RzIHJlY2VpdmVkOhdIVFRQUyBSZXF1ZXN0cyBSZWNpZXZlZEI8ZmlyZWJhc2VkYXRhYmFzZS5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2h0dHBzX3JlcXVlc3RzX2NvdW50UgsIBBICCDwaAwiADwqHAgppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL25ldHdvcmsvbW9udGhseV9zZW50GAEgAioCQnkyOlRoZSB0b3RhbCBvdXRnb2luZyBieXRlcyBzZW50IGFnZ3JlZ2F0ZWQgYW5kIHJlc2V0IG1vbnRobHk6EkJ5dGVzIHNlbnQgbW9udGhseUI0ZmlyZWJhc2VkYXRhYmFzZS5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL21vbnRobHlfc2VudFIMCAQSAwiEBxoDCIgOCooCCm9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9tb250aGx5X3NlbnRfbGltaXQYASACKgJCeTIzVGhlIG1vbnRobHkgbmV0d29yayBsaW1pdCBmb3IgdGhlIEZpcmViYXNlIGRhdGFiYXNlOhBCeXRlcyBzZW50IGxpbWl0QjpmaXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL25ldHdvcmsvbW9udGhseV9zZW50X2xpbWl0UgwIBBIDCIQHGgMIiA4KqwIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlyZWJhc2VkYXRhYmFzZS5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3NlbnRfYnl0ZXNfY291bnQYAiACKgJCeTJXVGhlIG91dGdvaW5nIGJhbmR3aWR0aCB1c2VkIGJ5IHRoZSBkYXRhYmFzZSwgaW5jbHVkaW5nIGVuY3J5cHRpb24gYW5kIHByb3RvY29sIG92ZXJoZWFkOhJUb3RhbCBiaWxsZWQgYnl0ZXNCOGZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9zZW50X2J5dGVzX2NvdW50UgsIBBICCDwaAwiADwrEAgqCAXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlyZWJhc2VkYXRhYmFzZS5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3NlbnRfcGF5bG9hZF9hbmRfcHJvdG9jb2xfYnl0ZXNfY291bnQYAiACKgJCeTI4VGhlIG91dGdvaW5nIGJhbmR3aWR0aCB1c2FnZSB3aXRob3V0IGVuY3J5cHRpb24gb3ZlcmhlYWQ6H1BheWxvYWQgYW5kIFByb3RvY29sIEJ5dGVzIHNlbnRCTWZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9zZW50X3BheWxvYWRfYW5kX3Byb3RvY29sX2J5dGVzX2NvdW50UgsIBBICCDwaAwiADwqgAgp1cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL25ldHdvcmsvc2VudF9wYXlsb2FkX2J5dGVzX2NvdW50GAIgAioCQnkyPFRoZSBvdXRnb2luZyBiYW5kd2lkdGggdXNhZ2Ugd2l0aG91dCBlbmNyeXB0aW9uIG5vciBwcm90b2NvbDoSUGF5bG9hZCBCeXRlcyBTZW50QkBmaXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL25ldHdvcmsvc2VudF9wYXlsb2FkX2J5dGVzX2NvdW50UgsIBBICCDwaAwiADwqoAgpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL3N0b3JhZ2UvZGlzYWJsZWRfZm9yX292ZXJhZ2VzGAEgATJJSW5kaWNhdGVzIGlmIHRoZSBGaXJlYmFzZSBkYXRhYmFzZSBoYXMgYmVlbiBkaXNhYmxlZCBmb3Igc3RvcmFnZSBvdmVyYWdlczoURGlzYWJsZWQgZm9yIHN0b3JhZ2VCPWZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS9kaXNhYmxlZF9mb3Jfb3ZlcmFnZXNSDggEEgQIgKMFGgQIgKMFCuoBCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS9saW1pdBgBIAIqAkJ5MitUaGUgc3RvcmFnZSBsaW1pdCBmb3IgdGhlIEZpcmViYXNlIGRhdGFiYXNlOhJCeXRlcyBzdG9yZWQgbGltaXRCLWZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS9saW1pdFIMCAQSAwiEBxoDCIgOCvABCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ZpcmViYXNlZGF0YWJhc2UuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS90b3RhbF9ieXRlcxgBIAIqAkJ5MilUaGUgc2l6ZSBvZiB0aGUgRmlyZWJhc2UgZGF0YWJhc2Ugc3RvcmFnZToMQnl0ZXMgc3RvcmVkQjNmaXJlYmFzZWRhdGFiYXNlLmdvb2dsZWFwaXMuY29tL3N0b3JhZ2UvdG90YWxfYnl0ZXNSDggEEgQIgKMFGgQIgKMFCocCCmhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ZpcmViYXNlaG9zdGluZy5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL21vbnRobHlfc2VudBgBIAIqAkJ5MjtUaGUgdG90YWwgb3V0Z29pbmcgYnl0ZXMgc2VudCBhZ2dyZWdhdGVkIGFuZCByZXNldCBtb250aGx5LjoSQnl0ZXMgc2VudCBtb250aGx5QjNmaXJlYmFzZWhvc3RpbmcuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9tb250aGx5X3NlbnRSDQgEEgQIgOEBGgMI6CAKhQIKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlyZWJhc2Vob3N0aW5nLmdvb2dsZWFwaXMuY29tL25ldHdvcmsvbW9udGhseV9zZW50X2xpbWl0GAEgAioCQnkyL1RoZSBtb250aGx5IG5ldHdvcmsgbGltaXQgZm9yIEZpcmViYXNlIEhvc3RpbmcuOhBCeXRlcyBzZW50IGxpbWl0QjlmaXJlYmFzZWhvc3RpbmcuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9tb250aGx5X3NlbnRfbGltaXRSDQgEEgQIgOEBGgMI6CAK+wEKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlyZWJhc2Vob3N0aW5nLmdvb2dsZWFwaXMuY29tL25ldHdvcmsvc2VudF9ieXRlc19jb3VudBgDIAIqAkJ5MjFUaGUgb3V0Z29pbmcgYmFuZHdpZHRoIHVzYWdlIGZvciBGaXJlYmFzZSBIb3N0aW5nOgpCeXRlcyBzZW50QjdmaXJlYmFzZWhvc3RpbmcuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9zZW50X2J5dGVzX2NvdW50UgsIBBICCDwaAwjUdQriAQphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maXJlYmFzZWhvc3RpbmcuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS9saW1pdBgBIAIqAkJ5MidUaGUgc3RvcmFnZSBsaW1pdCBmb3IgRmlyZWJhc2UgSG9zdGluZy46EkJ5dGVzIHN0b3JlZCBsaW1pdEIsZmlyZWJhc2Vob3N0aW5nLmdvb2dsZWFwaXMuY29tL3N0b3JhZ2UvbGltaXRSCggEEgQIgOEBGgAK6gEKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlyZWJhc2Vob3N0aW5nLmdvb2dsZWFwaXMuY29tL3N0b3JhZ2UvdG90YWxfYnl0ZXMYASACKgJCeTIpVGhlIHNpemUgb2YgdGhlIEZpcmViYXNlIEhvc3Rpbmcgc3RvcmFnZS46DEJ5dGVzIHN0b3JlZEIyZmlyZWJhc2Vob3N0aW5nLmdvb2dsZWFwaXMuY29tL3N0b3JhZ2UvdG90YWxfYnl0ZXNSCggEEgQIgOEBGgAKqgIKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvZmlyZXN0b3JlLmdvb2dsZWFwaXMuY29tL2RvY3VtZW50L2RlbGV0ZV9jb3VudBIiCgZtb2R1bGUaGFRoZSBzZXJ2aWNlL21vZHVsZSBuYW1lLhIcCgd2ZXJzaW9uGhFUaGUgdmVyc2lvbiBuYW1lLhgCIAIqAkJ5MipUaGUgbnVtYmVyIG9mIHN1Y2Nlc3NmdWwgZG9jdW1lbnQgZGVsZXRlcy46EERvY3VtZW50IERlbGV0ZXNCLmZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbS9kb2N1bWVudC9kZWxldGVfY291bnRSCwgDEgIIPBoDCPABCvICCmFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbS9kb2N1bWVudC9yZWFkX2NvdW50EiIKBm1vZHVsZRoYVGhlIHNlcnZpY2UvbW9kdWxlIG5hbWUuEhwKB3ZlcnNpb24aEVRoZSB2ZXJzaW9uIG5hbWUuEjYKBHR5cGUaLlRoZSB0eXBlIG9mIHRoZSByZWFkIChlLmcuICdMT09LVVAnLCAnUVVFUlknKS4YAiACKgJCeTJAVGhlIG51bWJlciBvZiBzdWNjZXNzZnVsIGRvY3VtZW50IHJlYWRzIGZyb20gcXVlcmllcyBvciBsb29rdXBzLjoORG9jdW1lbnQgUmVhZHNCLGZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbS9kb2N1bWVudC9yZWFkX2NvdW50UgsIAxICCDwaAwjwAQrpAgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9maXJlc3RvcmUuZ29vZ2xlYXBpcy5jb20vZG9jdW1lbnQvd3JpdGVfY291bnQSIgoGbW9kdWxlGhhUaGUgc2VydmljZS9tb2R1bGUgbmFtZS4SHAoHdmVyc2lvbhoRVGhlIHZlcnNpb24gbmFtZS4SQQoCb3AaO1RoZSBvcGVyYXRpb24gbmFtZSBmb3IgdGhlIHdyaXRlIChlLmcuICdDUkVBVEUnLCAnVVBEQVRFJykuGAIgAioCQnkyKVRoZSBudW1iZXIgb2Ygc3VjY2Vzc2Z1bCBkb2N1bWVudCB3cml0ZXMuOg9Eb2N1bWVudCBXcml0ZXNCLWZpcmVzdG9yZS5nb29nbGVhcGlzLmNvbS9kb2N1bWVudC93cml0ZV9jb3VudFILCAMSAgg8GgMI8AEK9AEKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvaW50ZXJjb25uZWN0Lmdvb2dsZWFwaXMuY29tL25ldHdvcmsvYXR0YWNobWVudC9jYXBhY2l0eRgBIAIqBEJ5L3MyIk5ldHdvcmsgQ2FwYWNpdHkgb2YgdGhlIEF0dGFjaG1lbnQ6EE5ldHdvcmsgQ2FwYWNpdHlCN2ludGVyY29ubmVjdC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2F0dGFjaG1lbnQvY2FwYWNpdHlSCwgEEgIIPBoDCLQBCoYCCnhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ludGVyY29ubmVjdC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2F0dGFjaG1lbnQvcmVjZWl2ZWRfYnl0ZXNfY291bnQYAiACKgJCeTIhTnVtYmVyIG9mIGluYm91bmQgYnl0ZXMgcmVjZWl2ZWQuOg1JbmdyZXNzIEJ5dGVzQkNpbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9hdHRhY2htZW50L3JlY2VpdmVkX2J5dGVzX2NvdW50UgsIBBICCDwaAwi0AQqVAgp6cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9pbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9hdHRhY2htZW50L3JlY2VpdmVkX3BhY2tldHNfY291bnQYAiACKgl7cGFja2V0c30yI051bWJlciBvZiBpbmJvdW5kIHBhY2tldHMgcmVjZWl2ZWQuOg9JbmdyZXNzIFBhY2tldHNCRWludGVyY29ubmVjdC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2F0dGFjaG1lbnQvcmVjZWl2ZWRfcGFja2V0c19jb3VudFILCAQSAgg8GgMItAEK+gEKdHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvaW50ZXJjb25uZWN0Lmdvb2dsZWFwaXMuY29tL25ldHdvcmsvYXR0YWNobWVudC9zZW50X2J5dGVzX2NvdW50GAIgAioCQnkyHk51bWJlciBvZiBvdXRib3VuZCBieXRlcyBzZW50LjoMRWdyZXNzIEJ5dGVzQj9pbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9hdHRhY2htZW50L3NlbnRfYnl0ZXNfY291bnRSCwgEEgIIPBoDCLQBCokCCnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ludGVyY29ubmVjdC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2F0dGFjaG1lbnQvc2VudF9wYWNrZXRzX2NvdW50GAIgAioJe3BhY2tldHN9MiBOdW1iZXIgb2Ygb3V0Ym91bmQgcGFja2V0cyBzZW50LjoORWdyZXNzIFBhY2tldHNCQWludGVyY29ubmVjdC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2F0dGFjaG1lbnQvc2VudF9wYWNrZXRzX2NvdW50UgsIBBICCDwaAwi0AQr6AQpucHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9pbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9pbnRlcmNvbm5lY3QvY2FwYWNpdHkYASACKgRCeS9zMiRBY3RpdmUgY2FwYWNpdHkgb2YgdGhlIGludGVyY29ubmVjdC46EE5ldHdvcmsgQ2FwYWNpdHlCOWludGVyY29ubmVjdC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2ludGVyY29ubmVjdC9jYXBhY2l0eVILCAQSAgg8GgMItAEKrgIKe3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvaW50ZXJjb25uZWN0Lmdvb2dsZWFwaXMuY29tL25ldHdvcmsvaW50ZXJjb25uZWN0L2Ryb3BwZWRfcGFja2V0c19jb3VudBgCIAMqCXtwYWNrZXRzfTI6TnVtYmVyIG9mIG91dGJvdW5kIHBhY2tldHMgZHJvcHBlZCBkdWUgdG8gbGluayBjb25nZXN0aW9uLjoPRHJvcHBlZCBQYWNrZXRzQkZpbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9pbnRlcmNvbm5lY3QvZHJvcHBlZF9wYWNrZXRzX2NvdW50UgsIBBICCDwaAwi0AQrcAgp2cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9pbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9pbnRlcmNvbm5lY3QvbGluay9vcGVyYXRpb25hbBI6CgdsaW5rX2lkGi9JZGVudGlmaWVyIGZvciB0aGUgaW5kaXZpZHVhbCBwaHlzaWNhbCBjaXJjdWl0LhgBIAEyNldoZXRoZXIgdGhlIG9wZXJhdGlvbmFsIHN0YXR1cyBvZiB0aGUgY2lyY3VpdCBpcyAndXAnLjoaQ2lyY3VpdCBPcGVyYXRpb25hbCBTdGF0dXNCQWludGVyY29ubmVjdC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2ludGVyY29ubmVjdC9saW5rL29wZXJhdGlvbmFsUgsIBBICCDwaAwi0AQqUAwpzcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9pbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9pbnRlcmNvbm5lY3QvbGluay9yeF9wb3dlchI6CgdsaW5rX2lkGi9JZGVudGlmaWVyIGZvciB0aGUgaW5kaXZpZHVhbCBwaHlzaWNhbCBjaXJjdWl0LhJFCgtsYXNlcl9pbmRleBACGjRJbmRleCBvZiB0aGUgbGFzZXIgY2hhbm5lbCBvbiBhbiBpbmRpdmlkdWFsIGNpcmN1aXQuGAEgAyoFe2RCbX0yK0xpZ2h0IGxldmVsIHJlY2VpdmVkIG92ZXIgcGh5c2ljYWwgY2lyY3VpdC46FUNpcmN1aXQgUmVjZWl2ZSBQb3dlckI+aW50ZXJjb25uZWN0Lmdvb2dsZWFwaXMuY29tL25ldHdvcmsvaW50ZXJjb25uZWN0L2xpbmsvcnhfcG93ZXJSCwgEEgIIPBoDCLQBCpgDCnNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ludGVyY29ubmVjdC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2ludGVyY29ubmVjdC9saW5rL3R4X3Bvd2VyEjoKB2xpbmtfaWQaL0lkZW50aWZpZXIgZm9yIHRoZSBpbmRpdmlkdWFsIHBoeXNpY2FsIGNpcmN1aXQuEkUKC2xhc2VyX2luZGV4EAIaNEluZGV4IG9mIHRoZSBsYXNlciBjaGFubmVsIG9uIGFuIGluZGl2aWR1YWwgY2lyY3VpdC4YASADKgV7ZEJtfTIuTGlnaHQgbGV2ZWwgdHJhbnNtaXR0ZWQgb3ZlciBwaHlzaWNhbCBjaXJjdWl0LjoWQ2lyY3VpdCBUcmFuc21pdCBQb3dlckI+aW50ZXJjb25uZWN0Lmdvb2dsZWFwaXMuY29tL25ldHdvcmsvaW50ZXJjb25uZWN0L2xpbmsvdHhfcG93ZXJSCwgEEgIIPBoDCLQBCpMCCnFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2ludGVyY29ubmVjdC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2ludGVyY29ubmVjdC9vcGVyYXRpb25hbBgBIAEyO1doZXRoZXIgdGhlIG9wZXJhdGlvbmFsIHN0YXR1cyBvZiB0aGUgaW50ZXJjb25uZWN0IGlzICd1cCcuOhJPcGVyYXRpb25hbCBTdGF0dXNCPGludGVyY29ubmVjdC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2ludGVyY29ubmVjdC9vcGVyYXRpb25hbFILCAQSAgg8GgMItAEKpQIKenByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvaW50ZXJjb25uZWN0Lmdvb2dsZWFwaXMuY29tL25ldHdvcmsvaW50ZXJjb25uZWN0L3JlY2VpdmVfZXJyb3JzX2NvdW50GAIgAyoIe2Vycm9yc30yNU51bWJlciBvZiBlcnJvcnMgZW5jb3VudGVyZWQgd2hpbGUgcmVjZWl2aW5nIHBhY2tldHMuOg5JbmdyZXNzIEVycm9yc0JFaW50ZXJjb25uZWN0Lmdvb2dsZWFwaXMuY29tL25ldHdvcmsvaW50ZXJjb25uZWN0L3JlY2VpdmVfZXJyb3JzX2NvdW50UgsIBBICCDwaAwi0AQqKAgp6cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9pbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9pbnRlcmNvbm5lY3QvcmVjZWl2ZWRfYnl0ZXNfY291bnQYAiADKgJCeTIhTnVtYmVyIG9mIGluYm91bmQgYnl0ZXMgcmVjZWl2ZWQuOg1JbmdyZXNzIEJ5dGVzQkVpbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9pbnRlcmNvbm5lY3QvcmVjZWl2ZWRfYnl0ZXNfY291bnRSCwgEEgIIPBoDCLQBCroCCoQBcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9pbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9pbnRlcmNvbm5lY3QvcmVjZWl2ZWRfdW5pY2FzdF9wYWNrZXRzX2NvdW50GAIgAyoJe3BhY2tldHN9MitOdW1iZXIgb2YgaW5ib3VuZCB1bmljYXN0IHBhY2tldHMgcmVjZWl2ZWQuOhdJbmdyZXNzIFVuaWNhc3QgUGFja2V0c0JPaW50ZXJjb25uZWN0Lmdvb2dsZWFwaXMuY29tL25ldHdvcmsvaW50ZXJjb25uZWN0L3JlY2VpdmVkX3VuaWNhc3RfcGFja2V0c19jb3VudFILCAQSAgg8GgMItAEKnAIKd3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvaW50ZXJjb25uZWN0Lmdvb2dsZWFwaXMuY29tL25ldHdvcmsvaW50ZXJjb25uZWN0L3NlbmRfZXJyb3JzX2NvdW50GAIgAyoIe2Vycm9yc30yM051bWJlciBvZiBlcnJvcnMgZW5jb3VudGVyZWQgd2hpbGUgc2VuZGluZyBwYWNrZXRzLjoNRWdyZXNzIEVycm9yc0JCaW50ZXJjb25uZWN0Lmdvb2dsZWFwaXMuY29tL25ldHdvcmsvaW50ZXJjb25uZWN0L3NlbmRfZXJyb3JzX2NvdW50UgsIBBICCDwaAwi0AQr+AQp2cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9pbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9pbnRlcmNvbm5lY3Qvc2VudF9ieXRlc19jb3VudBgCIAMqAkJ5Mh5OdW1iZXIgb2Ygb3V0Ym91bmQgYnl0ZXMgc2VudC46DEVncmVzcyBCeXRlc0JBaW50ZXJjb25uZWN0Lmdvb2dsZWFwaXMuY29tL25ldHdvcmsvaW50ZXJjb25uZWN0L3NlbnRfYnl0ZXNfY291bnRSCwgEEgIIPBoDCLQBCq4CCoABcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9pbnRlcmNvbm5lY3QuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9pbnRlcmNvbm5lY3Qvc2VudF91bmljYXN0X3BhY2tldHNfY291bnQYAiADKgl7cGFja2V0c30yKE51bWJlciBvZiBvdXRib3VuZCB1bmljYXN0IHBhY2tldHMgc2VudC46FkVncmVzcyBVbmljYXN0IFBhY2tldHNCS2ludGVyY29ubmVjdC5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2ludGVyY29ubmVjdC9zZW50X3VuaWNhc3RfcGFja2V0c19jb3VudFILCAQSAgg8GgMItAEKswoKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvaXN0aW8uaW8vc2VydmljZS9jbGllbnQvcmVjZWl2ZWRfYnl0ZXNfY291bnQSUQoQcmVxdWVzdF9wcm90b2NvbBo9UHJvdG9jb2wgb2YgdGhlIHJlcXVlc3Qgb3IgY29ubmVjdGlvbiAoZS5nLiBIVFRQLCBnUlBDLCBUQ1ApLhKjAQodc2VydmljZV9hdXRoZW50aWNhdGlvbl9wb2xpY3kagQFEZXRlcm1pbmVzIGlmIElzdGlvIHdhcyB1c2VkIHRvIHNlY3VyZSBjb21tdW5pY2F0aW9ucyBiZXR3ZWVuIHNlcnZpY2VzIGFuZCBob3cuIEN1cnJlbnRseSBzdXBwb3J0ZWQgdmFsdWVzOiBgTk9ORWAsIGBNVVRVQUxfVExTYC4SQwoIbWVzaF91aWQaN1VuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbWVzaCB0aGF0IGlzIGJlaW5nIG1vbml0b3JlZC4SOAoYZGVzdGluYXRpb25fc2VydmljZV9uYW1lGhxOYW1lIG9mIGRlc3RpbmF0aW9uIHNlcnZpY2UuEkIKHWRlc3RpbmF0aW9uX3NlcnZpY2VfbmFtZXNwYWNlGiFOYW1lc3BhY2Ugb2YgZGVzdGluYXRpb24gc2VydmljZS4SNgoQZGVzdGluYXRpb25fcG9ydBACGiBQb3J0IG9mIHRoZSBkZXN0aW5hdGlvbiBzZXJ2aWNlLhI+ChBzb3VyY2VfcHJpbmNpcGFsGipQcmluY2lwYWwgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZS4SNAoUc291cmNlX3dvcmtsb2FkX25hbWUaHE5hbWUgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZC4SPgoZc291cmNlX3dvcmtsb2FkX25hbWVzcGFjZRohTmFtZXNwYWNlIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQuEkwKDHNvdXJjZV9vd25lcho8T3duZXIgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuEkgKFWRlc3RpbmF0aW9uX3ByaW5jaXBhbBovUHJpbmNpcGFsIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZS4SPgoZZGVzdGluYXRpb25fd29ya2xvYWRfbmFtZRohTmFtZSBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQuEkgKHmRlc3RpbmF0aW9uX3dvcmtsb2FkX25hbWVzcGFjZRomTmFtZXNwYWNlIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZC4SVgoRZGVzdGluYXRpb25fb3duZXIaQU93bmVyIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuGAMgAioCQnkyU0N1bXVsYXRpdmUgbnVtYmVyIG9mIGJ5dGVzIHJlY2VpdmVkIGJ5IHRoZSBzZXJ2aWNlIGFzIGEgY2xpZW50IHRocm91Z2ggY29ubmVjdGlvbnMuOhtDbGllbnQgUmVjZWl2ZWQgQnl0ZXMgQ291bnRCLGlzdGlvLmlvL3NlcnZpY2UvY2xpZW50L3JlY2VpdmVkX2J5dGVzX2NvdW50UgIIAwr5CwpacHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9pc3Rpby5pby9zZXJ2aWNlL2NsaWVudC9yZXF1ZXN0X2J5dGVzEmEKEXJlcXVlc3Rfb3BlcmF0aW9uGkxVbmlxdWUgc3RyaW5nIHVzZWQgdG8gaWRlbnRpZnkgdGhlIEFQSSBNZXRob2QgKGlmIGF2YWlsYWJsZSkgb3IgSFRUUCBNZXRob2QuEiIKC2FwaV92ZXJzaW9uGhNWZXJzaW9uIG9mIHRoZSBBUEkuElEKEHJlcXVlc3RfcHJvdG9jb2waPVByb3RvY29sIG9mIHRoZSByZXF1ZXN0IG9yIGNvbm5lY3Rpb24gKGUuZy4gSFRUUCwgZ1JQQywgVENQKS4SowEKHXNlcnZpY2VfYXV0aGVudGljYXRpb25fcG9saWN5GoEBRGV0ZXJtaW5lcyBpZiBJc3RpbyB3YXMgdXNlZCB0byBzZWN1cmUgY29tbXVuaWNhdGlvbnMgYmV0d2VlbiBzZXJ2aWNlcyBhbmQgaG93LiBDdXJyZW50bHkgc3VwcG9ydGVkIHZhbHVlczogYE5PTkVgLCBgTVVUVUFMX1RMU2AuEkMKCG1lc2hfdWlkGjdVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIG1lc2ggdGhhdCBpcyBiZWluZyBtb25pdG9yZWQuEjgKGGRlc3RpbmF0aW9uX3NlcnZpY2VfbmFtZRocTmFtZSBvZiBkZXN0aW5hdGlvbiBzZXJ2aWNlLhJCCh1kZXN0aW5hdGlvbl9zZXJ2aWNlX25hbWVzcGFjZRohTmFtZXNwYWNlIG9mIGRlc3RpbmF0aW9uIHNlcnZpY2UuEjYKEGRlc3RpbmF0aW9uX3BvcnQQAhogUG9ydCBvZiB0aGUgZGVzdGluYXRpb24gc2VydmljZS4SRgoNcmVzcG9uc2VfY29kZRACGjNSZXNwb25zZSBjb2RlIG9mIHRoZSByZXF1ZXN0IGFjY29yZGluZyB0byBwcm90b2NvbC4SHAoIYXBpX25hbWUaEE5hbWUgb2YgdGhlIEFQSS4SPgoQc291cmNlX3ByaW5jaXBhbBoqUHJpbmNpcGFsIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQgaW5zdGFuY2UuEjQKFHNvdXJjZV93b3JrbG9hZF9uYW1lGhxOYW1lIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQuEj4KGXNvdXJjZV93b3JrbG9hZF9uYW1lc3BhY2UaIU5hbWVzcGFjZSBvZiB0aGUgc291cmNlIHdvcmtsb2FkLhJMCgxzb3VyY2Vfb3duZXIaPE93bmVyIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQgaW5zdGFuY2UgKGUuZy4gazhzIERlcGxveW1lbnQpLhJIChVkZXN0aW5hdGlvbl9wcmluY2lwYWwaL1ByaW5jaXBhbCBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQgaW5zdGFuY2UuEj4KGWRlc3RpbmF0aW9uX3dvcmtsb2FkX25hbWUaIU5hbWUgb2YgdGhlIGRlc3RpbmF0aW9uIHdvcmtsb2FkLhJICh5kZXN0aW5hdGlvbl93b3JrbG9hZF9uYW1lc3BhY2UaJk5hbWVzcGFjZSBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQuElYKEWRlc3RpbmF0aW9uX293bmVyGkFPd25lciBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQgaW5zdGFuY2UgKGUuZy4gazhzIERlcGxveW1lbnQpLhgCIAUqAkJ5MkFEaXN0cmlidXRpb24gb2Ygb3V0Z29pbmcgcmVxdWVzdCBzaXplcyBmcm9tIHRoZSBzZXJ2aWNlIGluIGJ5dGVzLjoUQ2xpZW50IFJlcXVlc3QgQnl0ZXNCJWlzdGlvLmlvL3NlcnZpY2UvY2xpZW50L3JlcXVlc3RfYnl0ZXNSAggDCt4LClpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2lzdGlvLmlvL3NlcnZpY2UvY2xpZW50L3JlcXVlc3RfY291bnQSYQoRcmVxdWVzdF9vcGVyYXRpb24aTFVuaXF1ZSBzdHJpbmcgdXNlZCB0byBpZGVudGlmeSB0aGUgQVBJIE1ldGhvZCAoaWYgYXZhaWxhYmxlKSBvciBIVFRQIE1ldGhvZC4SIgoLYXBpX3ZlcnNpb24aE1ZlcnNpb24gb2YgdGhlIEFQSS4SUQoQcmVxdWVzdF9wcm90b2NvbBo9UHJvdG9jb2wgb2YgdGhlIHJlcXVlc3Qgb3IgY29ubmVjdGlvbiAoZS5nLiBIVFRQLCBnUlBDLCBUQ1ApLhKjAQodc2VydmljZV9hdXRoZW50aWNhdGlvbl9wb2xpY3kagQFEZXRlcm1pbmVzIGlmIElzdGlvIHdhcyB1c2VkIHRvIHNlY3VyZSBjb21tdW5pY2F0aW9ucyBiZXR3ZWVuIHNlcnZpY2VzIGFuZCBob3cuIEN1cnJlbnRseSBzdXBwb3J0ZWQgdmFsdWVzOiBgTk9ORWAsIGBNVVRVQUxfVExTYC4SQwoIbWVzaF91aWQaN1VuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbWVzaCB0aGF0IGlzIGJlaW5nIG1vbml0b3JlZC4SOAoYZGVzdGluYXRpb25fc2VydmljZV9uYW1lGhxOYW1lIG9mIGRlc3RpbmF0aW9uIHNlcnZpY2UuEkIKHWRlc3RpbmF0aW9uX3NlcnZpY2VfbmFtZXNwYWNlGiFOYW1lc3BhY2Ugb2YgZGVzdGluYXRpb24gc2VydmljZS4SNgoQZGVzdGluYXRpb25fcG9ydBACGiBQb3J0IG9mIHRoZSBkZXN0aW5hdGlvbiBzZXJ2aWNlLhJGCg1yZXNwb25zZV9jb2RlEAIaM1Jlc3BvbnNlIGNvZGUgb2YgdGhlIHJlcXVlc3QgYWNjb3JkaW5nIHRvIHByb3RvY29sLhIcCghhcGlfbmFtZRoQTmFtZSBvZiB0aGUgQVBJLhI+ChBzb3VyY2VfcHJpbmNpcGFsGipQcmluY2lwYWwgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZS4SNAoUc291cmNlX3dvcmtsb2FkX25hbWUaHE5hbWUgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZC4SPgoZc291cmNlX3dvcmtsb2FkX25hbWVzcGFjZRohTmFtZXNwYWNlIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQuEkwKDHNvdXJjZV9vd25lcho8T3duZXIgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuEkgKFWRlc3RpbmF0aW9uX3ByaW5jaXBhbBovUHJpbmNpcGFsIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZS4SPgoZZGVzdGluYXRpb25fd29ya2xvYWRfbmFtZRohTmFtZSBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQuEkgKHmRlc3RpbmF0aW9uX3dvcmtsb2FkX25hbWVzcGFjZRomTmFtZXNwYWNlIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZC4SVgoRZGVzdGluYXRpb25fb3duZXIaQU93bmVyIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuGAIgAioBMTInTnVtYmVyIG9mIHJlcXVlc3RzIHNlbnQgYnkgdGhlIHNlcnZpY2UuOhRDbGllbnQgUmVxdWVzdCBDb3VudEIlaXN0aW8uaW8vc2VydmljZS9jbGllbnQvcmVxdWVzdF9jb3VudFICCAMK+wsKW3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvaXN0aW8uaW8vc2VydmljZS9jbGllbnQvcmVzcG9uc2VfYnl0ZXMSYQoRcmVxdWVzdF9vcGVyYXRpb24aTFVuaXF1ZSBzdHJpbmcgdXNlZCB0byBpZGVudGlmeSB0aGUgQVBJIE1ldGhvZCAoaWYgYXZhaWxhYmxlKSBvciBIVFRQIE1ldGhvZC4SIgoLYXBpX3ZlcnNpb24aE1ZlcnNpb24gb2YgdGhlIEFQSS4SUQoQcmVxdWVzdF9wcm90b2NvbBo9UHJvdG9jb2wgb2YgdGhlIHJlcXVlc3Qgb3IgY29ubmVjdGlvbiAoZS5nLiBIVFRQLCBnUlBDLCBUQ1ApLhKjAQodc2VydmljZV9hdXRoZW50aWNhdGlvbl9wb2xpY3kagQFEZXRlcm1pbmVzIGlmIElzdGlvIHdhcyB1c2VkIHRvIHNlY3VyZSBjb21tdW5pY2F0aW9ucyBiZXR3ZWVuIHNlcnZpY2VzIGFuZCBob3cuIEN1cnJlbnRseSBzdXBwb3J0ZWQgdmFsdWVzOiBgTk9ORWAsIGBNVVRVQUxfVExTYC4SQwoIbWVzaF91aWQaN1VuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbWVzaCB0aGF0IGlzIGJlaW5nIG1vbml0b3JlZC4SOAoYZGVzdGluYXRpb25fc2VydmljZV9uYW1lGhxOYW1lIG9mIGRlc3RpbmF0aW9uIHNlcnZpY2UuEkIKHWRlc3RpbmF0aW9uX3NlcnZpY2VfbmFtZXNwYWNlGiFOYW1lc3BhY2Ugb2YgZGVzdGluYXRpb24gc2VydmljZS4SNgoQZGVzdGluYXRpb25fcG9ydBACGiBQb3J0IG9mIHRoZSBkZXN0aW5hdGlvbiBzZXJ2aWNlLhJGCg1yZXNwb25zZV9jb2RlEAIaM1Jlc3BvbnNlIGNvZGUgb2YgdGhlIHJlcXVlc3QgYWNjb3JkaW5nIHRvIHByb3RvY29sLhIcCghhcGlfbmFtZRoQTmFtZSBvZiB0aGUgQVBJLhI+ChBzb3VyY2VfcHJpbmNpcGFsGipQcmluY2lwYWwgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZS4SNAoUc291cmNlX3dvcmtsb2FkX25hbWUaHE5hbWUgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZC4SPgoZc291cmNlX3dvcmtsb2FkX25hbWVzcGFjZRohTmFtZXNwYWNlIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQuEkwKDHNvdXJjZV9vd25lcho8T3duZXIgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuEkgKFWRlc3RpbmF0aW9uX3ByaW5jaXBhbBovUHJpbmNpcGFsIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZS4SPgoZZGVzdGluYXRpb25fd29ya2xvYWRfbmFtZRohTmFtZSBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQuEkgKHmRlc3RpbmF0aW9uX3dvcmtsb2FkX25hbWVzcGFjZRomTmFtZXNwYWNlIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZC4SVgoRZGVzdGluYXRpb25fb3duZXIaQU93bmVyIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuGAIgBSoCQnkyQERpc3RyaWJ1dGlvbiBvZiByZXNwb25zZSBzaXplcyByZWNlaXZlZCBieSB0aGUgc2VydmljZSBpbiBieXRlcy46FUNsaWVudCBSZXNwb25zZSBCeXRlc0ImaXN0aW8uaW8vc2VydmljZS9jbGllbnQvcmVzcG9uc2VfYnl0ZXNSAggDCo8MCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2lzdGlvLmlvL3NlcnZpY2UvY2xpZW50L3JvdW5kdHJpcF9sYXRlbmNpZXMSYQoRcmVxdWVzdF9vcGVyYXRpb24aTFVuaXF1ZSBzdHJpbmcgdXNlZCB0byBpZGVudGlmeSB0aGUgQVBJIE1ldGhvZCAoaWYgYXZhaWxhYmxlKSBvciBIVFRQIE1ldGhvZC4SIgoLYXBpX3ZlcnNpb24aE1ZlcnNpb24gb2YgdGhlIEFQSS4SUQoQcmVxdWVzdF9wcm90b2NvbBo9UHJvdG9jb2wgb2YgdGhlIHJlcXVlc3Qgb3IgY29ubmVjdGlvbiAoZS5nLiBIVFRQLCBnUlBDLCBUQ1ApLhKjAQodc2VydmljZV9hdXRoZW50aWNhdGlvbl9wb2xpY3kagQFEZXRlcm1pbmVzIGlmIElzdGlvIHdhcyB1c2VkIHRvIHNlY3VyZSBjb21tdW5pY2F0aW9ucyBiZXR3ZWVuIHNlcnZpY2VzIGFuZCBob3cuIEN1cnJlbnRseSBzdXBwb3J0ZWQgdmFsdWVzOiBgTk9ORWAsIGBNVVRVQUxfVExTYC4SQwoIbWVzaF91aWQaN1VuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbWVzaCB0aGF0IGlzIGJlaW5nIG1vbml0b3JlZC4SOAoYZGVzdGluYXRpb25fc2VydmljZV9uYW1lGhxOYW1lIG9mIGRlc3RpbmF0aW9uIHNlcnZpY2UuEkIKHWRlc3RpbmF0aW9uX3NlcnZpY2VfbmFtZXNwYWNlGiFOYW1lc3BhY2Ugb2YgZGVzdGluYXRpb24gc2VydmljZS4SNgoQZGVzdGluYXRpb25fcG9ydBACGiBQb3J0IG9mIHRoZSBkZXN0aW5hdGlvbiBzZXJ2aWNlLhJGCg1yZXNwb25zZV9jb2RlEAIaM1Jlc3BvbnNlIGNvZGUgb2YgdGhlIHJlcXVlc3QgYWNjb3JkaW5nIHRvIHByb3RvY29sLhIcCghhcGlfbmFtZRoQTmFtZSBvZiB0aGUgQVBJLhI+ChBzb3VyY2VfcHJpbmNpcGFsGipQcmluY2lwYWwgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZS4SNAoUc291cmNlX3dvcmtsb2FkX25hbWUaHE5hbWUgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZC4SPgoZc291cmNlX3dvcmtsb2FkX25hbWVzcGFjZRohTmFtZXNwYWNlIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQuEkwKDHNvdXJjZV9vd25lcho8T3duZXIgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuEkgKFWRlc3RpbmF0aW9uX3ByaW5jaXBhbBovUHJpbmNpcGFsIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZS4SPgoZZGVzdGluYXRpb25fd29ya2xvYWRfbmFtZRohTmFtZSBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQuEkgKHmRlc3RpbmF0aW9uX3dvcmtsb2FkX25hbWVzcGFjZRomTmFtZXNwYWNlIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZC4SVgoRZGVzdGluYXRpb25fb3duZXIaQU93bmVyIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuGAIgBSoCbXMyRURpc3RyaWJ1dGlvbiBvZiBvdXRnb2luZyByZXF1ZXN0IHJvdW5kIHRyaXAgbGF0ZW5jeSBmcm9tIHRoZSBzZXJ2aWNlLjoaQ2xpZW50IFJvdW5kdHJpcCBMYXRlbmNpZXNCK2lzdGlvLmlvL3NlcnZpY2UvY2xpZW50L3JvdW5kdHJpcF9sYXRlbmNpZXNSAggDCqMKCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2lzdGlvLmlvL3NlcnZpY2UvY2xpZW50L3NlbnRfYnl0ZXNfY291bnQSUQoQcmVxdWVzdF9wcm90b2NvbBo9UHJvdG9jb2wgb2YgdGhlIHJlcXVlc3Qgb3IgY29ubmVjdGlvbiAoZS5nLiBIVFRQLCBnUlBDLCBUQ1ApLhKjAQodc2VydmljZV9hdXRoZW50aWNhdGlvbl9wb2xpY3kagQFEZXRlcm1pbmVzIGlmIElzdGlvIHdhcyB1c2VkIHRvIHNlY3VyZSBjb21tdW5pY2F0aW9ucyBiZXR3ZWVuIHNlcnZpY2VzIGFuZCBob3cuIEN1cnJlbnRseSBzdXBwb3J0ZWQgdmFsdWVzOiBgTk9ORWAsIGBNVVRVQUxfVExTYC4SQwoIbWVzaF91aWQaN1VuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbWVzaCB0aGF0IGlzIGJlaW5nIG1vbml0b3JlZC4SOAoYZGVzdGluYXRpb25fc2VydmljZV9uYW1lGhxOYW1lIG9mIGRlc3RpbmF0aW9uIHNlcnZpY2UuEkIKHWRlc3RpbmF0aW9uX3NlcnZpY2VfbmFtZXNwYWNlGiFOYW1lc3BhY2Ugb2YgZGVzdGluYXRpb24gc2VydmljZS4SNgoQZGVzdGluYXRpb25fcG9ydBACGiBQb3J0IG9mIHRoZSBkZXN0aW5hdGlvbiBzZXJ2aWNlLhI+ChBzb3VyY2VfcHJpbmNpcGFsGipQcmluY2lwYWwgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZS4SNAoUc291cmNlX3dvcmtsb2FkX25hbWUaHE5hbWUgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZC4SPgoZc291cmNlX3dvcmtsb2FkX25hbWVzcGFjZRohTmFtZXNwYWNlIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQuEkwKDHNvdXJjZV9vd25lcho8T3duZXIgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuEkgKFWRlc3RpbmF0aW9uX3ByaW5jaXBhbBovUHJpbmNpcGFsIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZS4SPgoZZGVzdGluYXRpb25fd29ya2xvYWRfbmFtZRohTmFtZSBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQuEkgKHmRlc3RpbmF0aW9uX3dvcmtsb2FkX25hbWVzcGFjZRomTmFtZXNwYWNlIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZC4SVgoRZGVzdGluYXRpb25fb3duZXIaQU93bmVyIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuGAMgAioCQnkyT0N1bXVsYXRpdmUgbnVtYmVyIG9mIGJ5dGVzIHNlbnQgYnkgdGhlIHNlcnZpY2UgYXMgYSBjbGllbnQgdGhyb3VnaCBjb25uZWN0aW9ucy46F0NsaWVudCBTZW50IEJ5dGVzIENvdW50Qihpc3Rpby5pby9zZXJ2aWNlL2NsaWVudC9zZW50X2J5dGVzX2NvdW50UgIIAwqzCgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9pc3Rpby5pby9zZXJ2aWNlL3NlcnZlci9yZWNlaXZlZF9ieXRlc19jb3VudBJRChByZXF1ZXN0X3Byb3RvY29sGj1Qcm90b2NvbCBvZiB0aGUgcmVxdWVzdCBvciBjb25uZWN0aW9uIChlLmcuIEhUVFAsIGdSUEMsIFRDUCkuEqMBCh1zZXJ2aWNlX2F1dGhlbnRpY2F0aW9uX3BvbGljeRqBAURldGVybWluZXMgaWYgSXN0aW8gd2FzIHVzZWQgdG8gc2VjdXJlIGNvbW11bmljYXRpb25zIGJldHdlZW4gc2VydmljZXMgYW5kIGhvdy4gQ3VycmVudGx5IHN1cHBvcnRlZCB2YWx1ZXM6IGBOT05FYCwgYE1VVFVBTF9UTFNgLhJDCghtZXNoX3VpZBo3VW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBtZXNoIHRoYXQgaXMgYmVpbmcgbW9uaXRvcmVkLhI4ChhkZXN0aW5hdGlvbl9zZXJ2aWNlX25hbWUaHE5hbWUgb2YgZGVzdGluYXRpb24gc2VydmljZS4SQgodZGVzdGluYXRpb25fc2VydmljZV9uYW1lc3BhY2UaIU5hbWVzcGFjZSBvZiBkZXN0aW5hdGlvbiBzZXJ2aWNlLhI2ChBkZXN0aW5hdGlvbl9wb3J0EAIaIFBvcnQgb2YgdGhlIGRlc3RpbmF0aW9uIHNlcnZpY2UuEj4KEHNvdXJjZV9wcmluY2lwYWwaKlByaW5jaXBhbCBvZiB0aGUgc291cmNlIHdvcmtsb2FkIGluc3RhbmNlLhI0ChRzb3VyY2Vfd29ya2xvYWRfbmFtZRocTmFtZSBvZiB0aGUgc291cmNlIHdvcmtsb2FkLhI+Chlzb3VyY2Vfd29ya2xvYWRfbmFtZXNwYWNlGiFOYW1lc3BhY2Ugb2YgdGhlIHNvdXJjZSB3b3JrbG9hZC4STAoMc291cmNlX293bmVyGjxPd25lciBvZiB0aGUgc291cmNlIHdvcmtsb2FkIGluc3RhbmNlIChlLmcuIGs4cyBEZXBsb3ltZW50KS4SSAoVZGVzdGluYXRpb25fcHJpbmNpcGFsGi9QcmluY2lwYWwgb2YgdGhlIGRlc3RpbmF0aW9uIHdvcmtsb2FkIGluc3RhbmNlLhI+ChlkZXN0aW5hdGlvbl93b3JrbG9hZF9uYW1lGiFOYW1lIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZC4SSAoeZGVzdGluYXRpb25fd29ya2xvYWRfbmFtZXNwYWNlGiZOYW1lc3BhY2Ugb2YgdGhlIGRlc3RpbmF0aW9uIHdvcmtsb2FkLhJWChFkZXN0aW5hdGlvbl9vd25lchpBT3duZXIgb2YgdGhlIGRlc3RpbmF0aW9uIHdvcmtsb2FkIGluc3RhbmNlIChlLmcuIGs4cyBEZXBsb3ltZW50KS4YAyACKgJCeTJTQ3VtdWxhdGl2ZSBudW1iZXIgb2YgYnl0ZXMgcmVjZWl2ZWQgYnkgdGhlIHNlcnZpY2UgYXMgYSBzZXJ2ZXIgdGhyb3VnaCBjb25uZWN0aW9ucy46G1NlcnZlciBSZWNlaXZlZCBCeXRlcyBDb3VudEIsaXN0aW8uaW8vc2VydmljZS9zZXJ2ZXIvcmVjZWl2ZWRfYnl0ZXNfY291bnRSAggDCoAMClpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2lzdGlvLmlvL3NlcnZpY2Uvc2VydmVyL3JlcXVlc3RfYnl0ZXMSYQoRcmVxdWVzdF9vcGVyYXRpb24aTFVuaXF1ZSBzdHJpbmcgdXNlZCB0byBpZGVudGlmeSB0aGUgQVBJIG1ldGhvZCAoaWYgYXZhaWxhYmxlKSBvciBIVFRQIE1ldGhvZC4SIgoLYXBpX3ZlcnNpb24aE1ZlcnNpb24gb2YgdGhlIEFQSS4SUQoQcmVxdWVzdF9wcm90b2NvbBo9UHJvdG9jb2wgb2YgdGhlIHJlcXVlc3Qgb3IgY29ubmVjdGlvbiAoZS5nLiBIVFRQLCBnUlBDLCBUQ1ApLhKjAQodc2VydmljZV9hdXRoZW50aWNhdGlvbl9wb2xpY3kagQFEZXRlcm1pbmVzIGlmIElzdGlvIHdhcyB1c2VkIHRvIHNlY3VyZSBjb21tdW5pY2F0aW9ucyBiZXR3ZWVuIHNlcnZpY2VzIGFuZCBob3cuIEN1cnJlbnRseSBzdXBwb3J0ZWQgdmFsdWVzOiBgTk9ORWAsIGBNVVRVQUxfVExTYC4SQwoIbWVzaF91aWQaN1VuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbWVzaCB0aGF0IGlzIGJlaW5nIG1vbml0b3JlZC4SOAoYZGVzdGluYXRpb25fc2VydmljZV9uYW1lGhxOYW1lIG9mIGRlc3RpbmF0aW9uIHNlcnZpY2UuEkIKHWRlc3RpbmF0aW9uX3NlcnZpY2VfbmFtZXNwYWNlGiFOYW1lc3BhY2Ugb2YgZGVzdGluYXRpb24gc2VydmljZS4SNgoQZGVzdGluYXRpb25fcG9ydBACGiBQb3J0IG9mIHRoZSBkZXN0aW5hdGlvbiBzZXJ2aWNlLhJGCg1yZXNwb25zZV9jb2RlEAIaM1Jlc3BvbnNlIGNvZGUgb2YgdGhlIHJlcXVlc3QgYWNjb3JkaW5nIHRvIHByb3RvY29sLhIcCghhcGlfbmFtZRoQTmFtZSBvZiB0aGUgQVBJLhI+ChBzb3VyY2VfcHJpbmNpcGFsGipQcmluY2lwYWwgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZS4SNAoUc291cmNlX3dvcmtsb2FkX25hbWUaHE5hbWUgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZC4SPgoZc291cmNlX3dvcmtsb2FkX25hbWVzcGFjZRohTmFtZXNwYWNlIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQuEkwKDHNvdXJjZV9vd25lcho8T3duZXIgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuEkgKFWRlc3RpbmF0aW9uX3ByaW5jaXBhbBovUHJpbmNpcGFsIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZS4SPgoZZGVzdGluYXRpb25fd29ya2xvYWRfbmFtZRohTmFtZSBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQuEkgKHmRlc3RpbmF0aW9uX3dvcmtsb2FkX25hbWVzcGFjZRomTmFtZXNwYWNlIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZC4SVgoRZGVzdGluYXRpb25fb3duZXIaQU93bmVyIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuGAIgBSoCQnkySERpc3RyaWJ1dGlvbiBvZiBpbmNvbWluZyByZXF1ZXN0IHNpemVzIHJlY2VpdmVkIGJ5IHRoZSBzZXJ2aWNlIGluIGJ5dGVzLjoUU2VydmVyIFJlcXVlc3QgQnl0ZXNCJWlzdGlvLmlvL3NlcnZpY2Uvc2VydmVyL3JlcXVlc3RfYnl0ZXNSAggDCuILClpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2lzdGlvLmlvL3NlcnZpY2Uvc2VydmVyL3JlcXVlc3RfY291bnQSYQoRcmVxdWVzdF9vcGVyYXRpb24aTFVuaXF1ZSBzdHJpbmcgdXNlZCB0byBpZGVudGlmeSB0aGUgQVBJIG1ldGhvZCAoaWYgYXZhaWxhYmxlKSBvciBIVFRQIE1ldGhvZC4SIgoLYXBpX3ZlcnNpb24aE1ZlcnNpb24gb2YgdGhlIEFQSS4SUQoQcmVxdWVzdF9wcm90b2NvbBo9UHJvdG9jb2wgb2YgdGhlIHJlcXVlc3Qgb3IgY29ubmVjdGlvbiAoZS5nLiBIVFRQLCBnUlBDLCBUQ1ApLhKjAQodc2VydmljZV9hdXRoZW50aWNhdGlvbl9wb2xpY3kagQFEZXRlcm1pbmVzIGlmIElzdGlvIHdhcyB1c2VkIHRvIHNlY3VyZSBjb21tdW5pY2F0aW9ucyBiZXR3ZWVuIHNlcnZpY2VzIGFuZCBob3cuIEN1cnJlbnRseSBzdXBwb3J0ZWQgdmFsdWVzOiBgTk9ORWAsIGBNVVRVQUxfVExTYC4SQwoIbWVzaF91aWQaN1VuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbWVzaCB0aGF0IGlzIGJlaW5nIG1vbml0b3JlZC4SOAoYZGVzdGluYXRpb25fc2VydmljZV9uYW1lGhxOYW1lIG9mIGRlc3RpbmF0aW9uIHNlcnZpY2UuEkIKHWRlc3RpbmF0aW9uX3NlcnZpY2VfbmFtZXNwYWNlGiFOYW1lc3BhY2Ugb2YgZGVzdGluYXRpb24gc2VydmljZS4SNgoQZGVzdGluYXRpb25fcG9ydBACGiBQb3J0IG9mIHRoZSBkZXN0aW5hdGlvbiBzZXJ2aWNlLhJGCg1yZXNwb25zZV9jb2RlEAIaM1Jlc3BvbnNlIGNvZGUgb2YgdGhlIHJlcXVlc3QgYWNjb3JkaW5nIHRvIHByb3RvY29sLhIcCghhcGlfbmFtZRoQTmFtZSBvZiB0aGUgQVBJLhI+ChBzb3VyY2VfcHJpbmNpcGFsGipQcmluY2lwYWwgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZS4SNAoUc291cmNlX3dvcmtsb2FkX25hbWUaHE5hbWUgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZC4SPgoZc291cmNlX3dvcmtsb2FkX25hbWVzcGFjZRohTmFtZXNwYWNlIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQuEkwKDHNvdXJjZV9vd25lcho8T3duZXIgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuEkgKFWRlc3RpbmF0aW9uX3ByaW5jaXBhbBovUHJpbmNpcGFsIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZS4SPgoZZGVzdGluYXRpb25fd29ya2xvYWRfbmFtZRohTmFtZSBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQuEkgKHmRlc3RpbmF0aW9uX3dvcmtsb2FkX25hbWVzcGFjZRomTmFtZXNwYWNlIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZC4SVgoRZGVzdGluYXRpb25fb3duZXIaQU93bmVyIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuGAIgAioBMTIrTnVtYmVyIG9mIHJlcXVlc3RzIHJlY2VpdmVkIGJ5IHRoZSBzZXJ2aWNlLjoUU2VydmVyIFJlcXVlc3QgQ291bnRCJWlzdGlvLmlvL3NlcnZpY2Uvc2VydmVyL3JlcXVlc3RfY291bnRSAggDCvcLCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2lzdGlvLmlvL3NlcnZpY2Uvc2VydmVyL3Jlc3BvbnNlX2J5dGVzEmEKEXJlcXVlc3Rfb3BlcmF0aW9uGkxVbmlxdWUgc3RyaW5nIHVzZWQgdG8gaWRlbnRpZnkgdGhlIEFQSSBtZXRob2QgKGlmIGF2YWlsYWJsZSkgb3IgSFRUUCBNZXRob2QuEiIKC2FwaV92ZXJzaW9uGhNWZXJzaW9uIG9mIHRoZSBBUEkuElEKEHJlcXVlc3RfcHJvdG9jb2waPVByb3RvY29sIG9mIHRoZSByZXF1ZXN0IG9yIGNvbm5lY3Rpb24gKGUuZy4gSFRUUCwgZ1JQQywgVENQKS4SowEKHXNlcnZpY2VfYXV0aGVudGljYXRpb25fcG9saWN5GoEBRGV0ZXJtaW5lcyBpZiBJc3RpbyB3YXMgdXNlZCB0byBzZWN1cmUgY29tbXVuaWNhdGlvbnMgYmV0d2VlbiBzZXJ2aWNlcyBhbmQgaG93LiBDdXJyZW50bHkgc3VwcG9ydGVkIHZhbHVlczogYE5PTkVgLCBgTVVUVUFMX1RMU2AuEkMKCG1lc2hfdWlkGjdVbmlxdWUgaWRlbnRpZmllciBmb3IgdGhlIG1lc2ggdGhhdCBpcyBiZWluZyBtb25pdG9yZWQuEjgKGGRlc3RpbmF0aW9uX3NlcnZpY2VfbmFtZRocTmFtZSBvZiBkZXN0aW5hdGlvbiBzZXJ2aWNlLhJCCh1kZXN0aW5hdGlvbl9zZXJ2aWNlX25hbWVzcGFjZRohTmFtZXNwYWNlIG9mIGRlc3RpbmF0aW9uIHNlcnZpY2UuEjYKEGRlc3RpbmF0aW9uX3BvcnQQAhogUG9ydCBvZiB0aGUgZGVzdGluYXRpb24gc2VydmljZS4SRgoNcmVzcG9uc2VfY29kZRACGjNSZXNwb25zZSBjb2RlIG9mIHRoZSByZXF1ZXN0IGFjY29yZGluZyB0byBwcm90b2NvbC4SHAoIYXBpX25hbWUaEE5hbWUgb2YgdGhlIEFQSS4SPgoQc291cmNlX3ByaW5jaXBhbBoqUHJpbmNpcGFsIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQgaW5zdGFuY2UuEjQKFHNvdXJjZV93b3JrbG9hZF9uYW1lGhxOYW1lIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQuEj4KGXNvdXJjZV93b3JrbG9hZF9uYW1lc3BhY2UaIU5hbWVzcGFjZSBvZiB0aGUgc291cmNlIHdvcmtsb2FkLhJMCgxzb3VyY2Vfb3duZXIaPE93bmVyIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQgaW5zdGFuY2UgKGUuZy4gazhzIERlcGxveW1lbnQpLhJIChVkZXN0aW5hdGlvbl9wcmluY2lwYWwaL1ByaW5jaXBhbCBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQgaW5zdGFuY2UuEj4KGWRlc3RpbmF0aW9uX3dvcmtsb2FkX25hbWUaIU5hbWUgb2YgdGhlIGRlc3RpbmF0aW9uIHdvcmtsb2FkLhJICh5kZXN0aW5hdGlvbl93b3JrbG9hZF9uYW1lc3BhY2UaJk5hbWVzcGFjZSBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQuElYKEWRlc3RpbmF0aW9uX293bmVyGkFPd25lciBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQgaW5zdGFuY2UgKGUuZy4gazhzIERlcGxveW1lbnQpLhgCIAUqAkJ5MjxEaXN0cmlidXRpb24gb2YgcmVzcG9uc2Ugc2l6ZXMgc2VudCBieSB0aGUgc2VydmljZSBpbiBieXRlcy46FVNlcnZlciBSZXNwb25zZSBCeXRlc0ImaXN0aW8uaW8vc2VydmljZS9zZXJ2ZXIvcmVzcG9uc2VfYnl0ZXNSAggDCoYMCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2lzdGlvLmlvL3NlcnZpY2Uvc2VydmVyL3Jlc3BvbnNlX2xhdGVuY2llcxJhChFyZXF1ZXN0X29wZXJhdGlvbhpMVW5pcXVlIHN0cmluZyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBBUEkgbWV0aG9kIChpZiBhdmFpbGFibGUpIG9yIEhUVFAgTWV0aG9kLhIiCgthcGlfdmVyc2lvbhoTVmVyc2lvbiBvZiB0aGUgQVBJLhJRChByZXF1ZXN0X3Byb3RvY29sGj1Qcm90b2NvbCBvZiB0aGUgcmVxdWVzdCBvciBjb25uZWN0aW9uIChlLmcuIEhUVFAsIGdSUEMsIFRDUCkuEqMBCh1zZXJ2aWNlX2F1dGhlbnRpY2F0aW9uX3BvbGljeRqBAURldGVybWluZXMgaWYgSXN0aW8gd2FzIHVzZWQgdG8gc2VjdXJlIGNvbW11bmljYXRpb25zIGJldHdlZW4gc2VydmljZXMgYW5kIGhvdy4gQ3VycmVudGx5IHN1cHBvcnRlZCB2YWx1ZXM6IGBOT05FYCwgYE1VVFVBTF9UTFNgLhJDCghtZXNoX3VpZBo3VW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBtZXNoIHRoYXQgaXMgYmVpbmcgbW9uaXRvcmVkLhI4ChhkZXN0aW5hdGlvbl9zZXJ2aWNlX25hbWUaHE5hbWUgb2YgZGVzdGluYXRpb24gc2VydmljZS4SQgodZGVzdGluYXRpb25fc2VydmljZV9uYW1lc3BhY2UaIU5hbWVzcGFjZSBvZiBkZXN0aW5hdGlvbiBzZXJ2aWNlLhI2ChBkZXN0aW5hdGlvbl9wb3J0EAIaIFBvcnQgb2YgdGhlIGRlc3RpbmF0aW9uIHNlcnZpY2UuEkYKDXJlc3BvbnNlX2NvZGUQAhozUmVzcG9uc2UgY29kZSBvZiB0aGUgcmVxdWVzdCBhY2NvcmRpbmcgdG8gcHJvdG9jb2wuEhwKCGFwaV9uYW1lGhBOYW1lIG9mIHRoZSBBUEkuEj4KEHNvdXJjZV9wcmluY2lwYWwaKlByaW5jaXBhbCBvZiB0aGUgc291cmNlIHdvcmtsb2FkIGluc3RhbmNlLhI0ChRzb3VyY2Vfd29ya2xvYWRfbmFtZRocTmFtZSBvZiB0aGUgc291cmNlIHdvcmtsb2FkLhI+Chlzb3VyY2Vfd29ya2xvYWRfbmFtZXNwYWNlGiFOYW1lc3BhY2Ugb2YgdGhlIHNvdXJjZSB3b3JrbG9hZC4STAoMc291cmNlX293bmVyGjxPd25lciBvZiB0aGUgc291cmNlIHdvcmtsb2FkIGluc3RhbmNlIChlLmcuIGs4cyBEZXBsb3ltZW50KS4SSAoVZGVzdGluYXRpb25fcHJpbmNpcGFsGi9QcmluY2lwYWwgb2YgdGhlIGRlc3RpbmF0aW9uIHdvcmtsb2FkIGluc3RhbmNlLhI+ChlkZXN0aW5hdGlvbl93b3JrbG9hZF9uYW1lGiFOYW1lIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZC4SSAoeZGVzdGluYXRpb25fd29ya2xvYWRfbmFtZXNwYWNlGiZOYW1lc3BhY2Ugb2YgdGhlIGRlc3RpbmF0aW9uIHdvcmtsb2FkLhJWChFkZXN0aW5hdGlvbl9vd25lchpBT3duZXIgb2YgdGhlIGRlc3RpbmF0aW9uIHdvcmtsb2FkIGluc3RhbmNlIChlLmcuIGs4cyBEZXBsb3ltZW50KS4YAiAFKgJtczI/RGlzdHJpYnV0aW9uIG9mIHNlcnZpY2UgcmVzcG9uc2UgbGF0ZW5jeSBmb3IgaW5jb21pbmcgcmVxdWVzdHMuOhlTZXJ2ZXIgUmVzcG9uc2UgTGF0ZW5jaWVzQippc3Rpby5pby9zZXJ2aWNlL3NlcnZlci9yZXNwb25zZV9sYXRlbmNpZXNSAggDCqMKCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2lzdGlvLmlvL3NlcnZpY2Uvc2VydmVyL3NlbnRfYnl0ZXNfY291bnQSUQoQcmVxdWVzdF9wcm90b2NvbBo9UHJvdG9jb2wgb2YgdGhlIHJlcXVlc3Qgb3IgY29ubmVjdGlvbiAoZS5nLiBIVFRQLCBnUlBDLCBUQ1ApLhKjAQodc2VydmljZV9hdXRoZW50aWNhdGlvbl9wb2xpY3kagQFEZXRlcm1pbmVzIGlmIElzdGlvIHdhcyB1c2VkIHRvIHNlY3VyZSBjb21tdW5pY2F0aW9ucyBiZXR3ZWVuIHNlcnZpY2VzIGFuZCBob3cuIEN1cnJlbnRseSBzdXBwb3J0ZWQgdmFsdWVzOiBgTk9ORWAsIGBNVVRVQUxfVExTYC4SQwoIbWVzaF91aWQaN1VuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgbWVzaCB0aGF0IGlzIGJlaW5nIG1vbml0b3JlZC4SOAoYZGVzdGluYXRpb25fc2VydmljZV9uYW1lGhxOYW1lIG9mIGRlc3RpbmF0aW9uIHNlcnZpY2UuEkIKHWRlc3RpbmF0aW9uX3NlcnZpY2VfbmFtZXNwYWNlGiFOYW1lc3BhY2Ugb2YgZGVzdGluYXRpb24gc2VydmljZS4SNgoQZGVzdGluYXRpb25fcG9ydBACGiBQb3J0IG9mIHRoZSBkZXN0aW5hdGlvbiBzZXJ2aWNlLhI+ChBzb3VyY2VfcHJpbmNpcGFsGipQcmluY2lwYWwgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZS4SNAoUc291cmNlX3dvcmtsb2FkX25hbWUaHE5hbWUgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZC4SPgoZc291cmNlX3dvcmtsb2FkX25hbWVzcGFjZRohTmFtZXNwYWNlIG9mIHRoZSBzb3VyY2Ugd29ya2xvYWQuEkwKDHNvdXJjZV9vd25lcho8T3duZXIgb2YgdGhlIHNvdXJjZSB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuEkgKFWRlc3RpbmF0aW9uX3ByaW5jaXBhbBovUHJpbmNpcGFsIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZS4SPgoZZGVzdGluYXRpb25fd29ya2xvYWRfbmFtZRohTmFtZSBvZiB0aGUgZGVzdGluYXRpb24gd29ya2xvYWQuEkgKHmRlc3RpbmF0aW9uX3dvcmtsb2FkX25hbWVzcGFjZRomTmFtZXNwYWNlIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZC4SVgoRZGVzdGluYXRpb25fb3duZXIaQU93bmVyIG9mIHRoZSBkZXN0aW5hdGlvbiB3b3JrbG9hZCBpbnN0YW5jZSAoZS5nLiBrOHMgRGVwbG95bWVudCkuGAMgAioCQnkyT0N1bXVsYXRpdmUgbnVtYmVyIG9mIGJ5dGVzIHNlbnQgYnkgdGhlIHNlcnZpY2UgYXMgYSBzZXJ2ZXIgdGhyb3VnaCBjb25uZWN0aW9ucy46F1NlcnZlciBTZW50IEJ5dGVzIENvdW50Qihpc3Rpby5pby9zZXJ2aWNlL3NlcnZlci9zZW50X2J5dGVzX2NvdW50UgIIAwq2AwpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9hY2NlbGVyYXRvci9kdXR5X2N5Y2xlEi0KBG1ha2UaJU1ha2Ugb2YgdGhlIGFjY2VsZXJhdG9yIChlLmcuIG52aWRpYSkSJwoOYWNjZWxlcmF0b3JfaWQaFUlEIG9mIHRoZSBhY2NlbGVyYXRvchI1CgVtb2RlbBosTW9kZWwgb2YgdGhlIGFjY2VsZXJhdG9yIChlLmcuICdUZXNsYSBQMTAwJykYASACKgElMmdQZXJjZW50IG9mIHRpbWUgb3ZlciB0aGUgcGFzdCBzYW1wbGUgcGVyaW9kICgxMHMpIGR1cmluZyB3aGljaCB0aGUgYWNjZWxlcmF0b3Igd2FzIGFjdGl2ZWx5IHByb2Nlc3NpbmcuOhZBY2NlbGVyYXRvciBkdXR5IGN5Y2xlQi5rdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9hY2NlbGVyYXRvci9kdXR5X2N5Y2xlUggIAxICCDwaAAr4AgplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9hY2NlbGVyYXRvci9tZW1vcnlfdG90YWwSLQoEbWFrZRolTWFrZSBvZiB0aGUgYWNjZWxlcmF0b3IgKGUuZy4gbnZpZGlhKRInCg5hY2NlbGVyYXRvcl9pZBoVSUQgb2YgdGhlIGFjY2VsZXJhdG9yEjUKBW1vZGVsGixNb2RlbCBvZiB0aGUgYWNjZWxlcmF0b3IgKGUuZy4gJ1Rlc2xhIFAxMDAnKRgBIAIqAkJ5MiJUb3RhbCBhY2NlbGVyYXRvciBtZW1vcnkgaW4gYnl0ZXMuOhhBY2NlbGVyYXRvciBtZW1vcnkgdG90YWxCMGt1YmVybmV0ZXMuaW8vY29udGFpbmVyL2FjY2VsZXJhdG9yL21lbW9yeV90b3RhbFIICAMSAgg8GgAK/wIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9jb250YWluZXIvYWNjZWxlcmF0b3IvbWVtb3J5X3VzZWQSLQoEbWFrZRolTWFrZSBvZiB0aGUgYWNjZWxlcmF0b3IgKGUuZy4gbnZpZGlhKRInCg5hY2NlbGVyYXRvcl9pZBoVSUQgb2YgdGhlIGFjY2VsZXJhdG9yEjUKBW1vZGVsGixNb2RlbCBvZiB0aGUgYWNjZWxlcmF0b3IgKGUuZy4gJ1Rlc2xhIFAxMDAnKRgBIAIqAkJ5MixUb3RhbCBhY2NlbGVyYXRvciBtZW1vcnkgYWxsb2NhdGVkIGluIGJ5dGVzLjoXQWNjZWxlcmF0b3IgbWVtb3J5IHVzZWRCL2t1YmVybmV0ZXMuaW8vY29udGFpbmVyL2FjY2VsZXJhdG9yL21lbW9yeV91c2VkUggIAxICCDwaAAq3AgpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9hY2NlbGVyYXRvci9yZXF1ZXN0EjwKDXJlc291cmNlX25hbWUaK05hbWUgb2YgdGhlIHJlcXVlc3RlZCBhY2NlbGVyYXRvciByZXNvdXJjZS4YASACKgl7ZGV2aWNlc30yOU51bWJlciBvZiBhY2NlbGVyYXRvciBkZXZpY2VzIHJlcXVlc3RlZCBieSB0aGUgY29udGFpbmVyLjoUUmVxdWVzdCBhY2NlbGVyYXRvcnNCK2t1YmVybmV0ZXMuaW8vY29udGFpbmVyL2FjY2VsZXJhdG9yL3JlcXVlc3RSCAgDEgIIPBoACvUBCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2t1YmVybmV0ZXMuaW8vY29udGFpbmVyL2NwdS9jb3JlX3VzYWdlX3RpbWUYAyADKgFzMkNDdW11bGF0aXZlIENQVSB1c2FnZSBvbiBhbGwgY29yZXMgdXNlZCBieSB0aGUgY29udGFpbmVyIGluIHNlY29uZHMuOg5DUFUgdXNhZ2UgdGltZUIra3ViZXJuZXRlcy5pby9jb250YWluZXIvY3B1L2NvcmVfdXNhZ2VfdGltZVIICAMSAgg8GgAKzAEKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9jb250YWluZXIvY3B1L2xpbWl0X2NvcmVzGAEgAyoFe2NwdX0yIUNQVSBjb3JlcyBsaW1pdCBvZiB0aGUgY29udGFpbmVyLjoLTGltaXQgY29yZXNCJ2t1YmVybmV0ZXMuaW8vY29udGFpbmVyL2NwdS9saW1pdF9jb3Jlc1IICAMSAgg8GgAKxQIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9jb250YWluZXIvY3B1L2xpbWl0X3V0aWxpemF0aW9uGAEgAyoBMTKEAVRoZSBmcmFjdGlvbiBvZiB0aGUgQ1BVIGxpbWl0IHRoYXQgaXMgY3VycmVudGx5IGluIHVzZSBvbiB0aGUgaW5zdGFuY2UuIFRoaXMgdmFsdWUgY2Fubm90IGV4Y2VlZCAxIGFzIHVzYWdlIGNhbm5vdCBleGNlZWQgdGhlIGxpbWl0LjoVQ1BVIGxpbWl0IHV0aWxpemF0aW9uQi1rdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9jcHUvbGltaXRfdXRpbGl6YXRpb25SCwgDEgIIPBoDCPABCuABCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2t1YmVybmV0ZXMuaW8vY29udGFpbmVyL2NwdS9yZXF1ZXN0X2NvcmVzGAEgAyoFe2NwdX0yL051bWJlciBvZiBDUFUgY29yZXMgcmVxdWVzdGVkIGJ5IHRoZSBjb250YWluZXIuOg1SZXF1ZXN0IGNvcmVzQilrdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9jcHUvcmVxdWVzdF9jb3Jlc1IICAMSAgg8GgAK1AIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9jb250YWluZXIvY3B1L3JlcXVlc3RfdXRpbGl6YXRpb24YASADKgExMo0BVGhlIGZyYWN0aW9uIG9mIHRoZSByZXF1ZXN0ZWQgQ1BVIHRoYXQgaXMgY3VycmVudGx5IGluIHVzZSBvbiB0aGUgaW5zdGFuY2UuIFRoaXMgdmFsdWUgY2FuIGJlIGdyZWF0ZXIgdGhhbiAxIGFzIHVzYWdlIGNhbiBleGNlZWQgdGhlIHJlcXVlc3QuOhdDUFUgcmVxdWVzdCB1dGlsaXphdGlvbkIva3ViZXJuZXRlcy5pby9jb250YWluZXIvY3B1L3JlcXVlc3RfdXRpbGl6YXRpb25SCwgDEgIIPBoDCPABCvcBCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2t1YmVybmV0ZXMuaW8vY29udGFpbmVyL2VwaGVtZXJhbF9zdG9yYWdlL2xpbWl0X2J5dGVzGAEgAioCQnkyJ0xvY2FsIGVwaGVtZXJhbCBzdG9yYWdlIGxpbWl0IGluIGJ5dGVzLjoXRXBoZW1lcmFsIHN0b3JhZ2UgbGltaXRCNWt1YmVybmV0ZXMuaW8vY29udGFpbmVyL2VwaGVtZXJhbF9zdG9yYWdlL2xpbWl0X2J5dGVzUggIAxICCDwaAAr/AQpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9lcGhlbWVyYWxfc3RvcmFnZS9yZXF1ZXN0X2J5dGVzGAEgAioCQnkyKUxvY2FsIGVwaGVtZXJhbCBzdG9yYWdlIHJlcXVlc3QgaW4gYnl0ZXMuOhlFcGhlbWVyYWwgc3RvcmFnZSByZXF1ZXN0QjdrdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9lcGhlbWVyYWxfc3RvcmFnZS9yZXF1ZXN0X2J5dGVzUggIAxICCDwaAAr1AQppcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9lcGhlbWVyYWxfc3RvcmFnZS91c2VkX2J5dGVzGAEgAioCQnkyJ0xvY2FsIGVwaGVtZXJhbCBzdG9yYWdlIHVzYWdlIGluIGJ5dGVzLjoXRXBoZW1lcmFsIHN0b3JhZ2UgdXNhZ2VCNGt1YmVybmV0ZXMuaW8vY29udGFpbmVyL2VwaGVtZXJhbF9zdG9yYWdlL3VzZWRfYnl0ZXNSCAgDEgIIPBoACtYBCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2t1YmVybmV0ZXMuaW8vY29udGFpbmVyL21lbW9yeS9saW1pdF9ieXRlcxgBIAIqAkJ5MidNZW1vcnkgbGltaXQgb2YgdGhlIGNvbnRhaW5lciBpbiBieXRlcy46DE1lbW9yeSBsaW1pdEIqa3ViZXJuZXRlcy5pby9jb250YWluZXIvbWVtb3J5L2xpbWl0X2J5dGVzUggIAxICCDwaAArzAwplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9tZW1vcnkvbGltaXRfdXRpbGl6YXRpb24SoAEKC21lbW9yeV90eXBlGpABRWl0aGVyIGBldmljdGFibGVgIG9yIGBub24tZXZpY3RhYmxlYC4gRXZpY3RhYmxlIG1lbW9yeSBpcyBtZW1vcnkgdGhhdCBjYW4gYmUgZWFzaWx5IHJlY2xhaW1lZCBieSB0aGUga2VybmVsLCB3aGlsZSBub24tZXZpY3RhYmxlIG1lbW9yeSBjYW5ub3QuGAEgAyoBMTKHAVRoZSBmcmFjdGlvbiBvZiB0aGUgbWVtb3J5IGxpbWl0IHRoYXQgaXMgY3VycmVudGx5IGluIHVzZSBvbiB0aGUgaW5zdGFuY2UuIFRoaXMgdmFsdWUgY2Fubm90IGV4Y2VlZCAxIGFzIHVzYWdlIGNhbm5vdCBleGNlZWQgdGhlIGxpbWl0LjoYTWVtb3J5IGxpbWl0IHV0aWxpemF0aW9uQjBrdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9tZW1vcnkvbGltaXRfdXRpbGl6YXRpb25SCggDEgIIPBoCCHgK3gEKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9jb250YWluZXIvbWVtb3J5L3JlcXVlc3RfYnl0ZXMYASACKgJCeTIpTWVtb3J5IHJlcXVlc3Qgb2YgdGhlIGNvbnRhaW5lciBpbiBieXRlcy46Dk1lbW9yeSByZXF1ZXN0QixrdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9tZW1vcnkvcmVxdWVzdF9ieXRlc1IICAMSAgg8GgAKggQKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9jb250YWluZXIvbWVtb3J5L3JlcXVlc3RfdXRpbGl6YXRpb24SoAEKC21lbW9yeV90eXBlGpABRWl0aGVyIGBldmljdGFibGVgIG9yIGBub24tZXZpY3RhYmxlYC4gRXZpY3RhYmxlIG1lbW9yeSBpcyBtZW1vcnkgdGhhdCBjYW4gYmUgZWFzaWx5IHJlY2xhaW1lZCBieSB0aGUga2VybmVsLCB3aGlsZSBub24tZXZpY3RhYmxlIG1lbW9yeSBjYW5ub3QuGAEgAyoBMTKQAVRoZSBmcmFjdGlvbiBvZiB0aGUgcmVxdWVzdGVkIG1lbW9yeSB0aGF0IGlzIGN1cnJlbnRseSBpbiB1c2Ugb24gdGhlIGluc3RhbmNlLiBUaGlzIHZhbHVlIGNhbiBiZSBncmVhdGVyIHRoYW4gMSBhcyB1c2FnZSBjYW4gZXhjZWVkIHRoZSByZXF1ZXN0LjoaTWVtb3J5IHJlcXVlc3QgdXRpbGl6YXRpb25CMmt1YmVybmV0ZXMuaW8vY29udGFpbmVyL21lbW9yeS9yZXF1ZXN0X3V0aWxpemF0aW9uUgoIAxICCDwaAgh4CuYCCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2t1YmVybmV0ZXMuaW8vY29udGFpbmVyL21lbW9yeS91c2VkX2J5dGVzEqABCgttZW1vcnlfdHlwZRqQAUVpdGhlciBgZXZpY3RhYmxlYCBvciBgbm9uLWV2aWN0YWJsZWAuIEV2aWN0YWJsZSBtZW1vcnkgaXMgbWVtb3J5IHRoYXQgY2FuIGJlIGVhc2lseSByZWNsYWltZWQgYnkgdGhlIGtlcm5lbCwgd2hpbGUgbm9uLWV2aWN0YWJsZSBtZW1vcnkgY2Fubm90LhgBIAIqAkJ5MhZNZW1vcnkgdXNhZ2UgaW4gYnl0ZXMuOgxNZW1vcnkgdXNhZ2VCKWt1YmVybmV0ZXMuaW8vY29udGFpbmVyL21lbW9yeS91c2VkX2J5dGVzUggIAxICCDwaAArRAQpacHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL2NvbnRhaW5lci9yZXN0YXJ0X2NvdW50GAMgAioBMTIsTnVtYmVyIG9mIHRpbWVzIHRoZSBjb250YWluZXIgaGFzIHJlc3RhcnRlZC46DVJlc3RhcnQgY291bnRCJWt1YmVybmV0ZXMuaW8vY29udGFpbmVyL3Jlc3RhcnRfY291bnRSCAgDEgIIPBoACsQBClNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2t1YmVybmV0ZXMuaW8vY29udGFpbmVyL3VwdGltZRgBIAMqAXMyNFRpbWUgaW4gc2Vjb25kcyB0aGF0IHRoZSBjb250YWluZXIgaGFzIGJlZW4gcnVubmluZy46BlVwdGltZUIea3ViZXJuZXRlcy5pby9jb250YWluZXIvdXB0aW1lUggIAxICCDwaAArfAQpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL25vZGUvY3B1L2FsbG9jYXRhYmxlX2NvcmVzGAEgAyoFe2NwdX0yLE51bWJlciBvZiBhbGxvY2F0YWJsZSBDUFUgY29yZXMgb24gdGhlIG5vZGUuOhFBbGxvY2F0YWJsZSBjb3Jlc0Ioa3ViZXJuZXRlcy5pby9ub2RlL2NwdS9hbGxvY2F0YWJsZV9jb3Jlc1IICAMSAgg8GgAK3wIKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9ub2RlL2NwdS9hbGxvY2F0YWJsZV91dGlsaXphdGlvbhgBIAMqATEylgFUaGUgZnJhY3Rpb24gb2YgdGhlIGFsbG9jYXRhYmxlIENQVSB0aGF0IGlzIGN1cnJlbnRseSBpbiB1c2Ugb24gdGhlIGluc3RhbmNlLiBUaGlzIHZhbHVlIGNhbm5vdCBleGNlZWQgMSBhcyB1c2FnZSBjYW5ub3QgZXhjZWVkIGFsbG9jYXRhYmxlIENQVSBjb3Jlcy46G0NQVSBhbGxvY2F0YWJsZSB1dGlsaXphdGlvbkIua3ViZXJuZXRlcy5pby9ub2RlL2NwdS9hbGxvY2F0YWJsZV91dGlsaXphdGlvblILCAMSAgg8GgMI8AEK5gEKW3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9ub2RlL2NwdS9jb3JlX3VzYWdlX3RpbWUYAyADKgFzMj5DdW11bGF0aXZlIENQVSB1c2FnZSBvbiBhbGwgY29yZXMgdXNlZCBvbiB0aGUgbm9kZSBpbiBzZWNvbmRzLjoOQ1BVIHVzYWdlIHRpbWVCJmt1YmVybmV0ZXMuaW8vbm9kZS9jcHUvY29yZV91c2FnZV90aW1lUggIAxICCDwaAArHAQpXcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL25vZGUvY3B1L3RvdGFsX2NvcmVzGAEgAyoFe2NwdX0yJlRvdGFsIG51bWJlciBvZiBDUFUgY29yZXMgb24gdGhlIG5vZGUuOgtUb3RhbCBjb3Jlc0Iia3ViZXJuZXRlcy5pby9ub2RlL2NwdS90b3RhbF9jb3Jlc1IICAMSAgg8GgAKjgIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9ub2RlL2VwaGVtZXJhbF9zdG9yYWdlL2FsbG9jYXRhYmxlX2J5dGVzGAEgAioCQnkyNkxvY2FsIGVwaGVtZXJhbCBzdG9yYWdlIGJ5dGVzIGFsbG9jYXRhYmxlIG9uIHRoZSBub2RlLjodQWxsb2NhdGFibGUgZXBoZW1lcmFsIHN0b3JhZ2VCNmt1YmVybmV0ZXMuaW8vbm9kZS9lcGhlbWVyYWxfc3RvcmFnZS9hbGxvY2F0YWJsZV9ieXRlc1IICAMSAgg8GgAK8AEKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9ub2RlL2VwaGVtZXJhbF9zdG9yYWdlL3RvdGFsX2J5dGVzGAEgAioCQnkyKlRvdGFsIGVwaGVtZXJhbCBzdG9yYWdlIGJ5dGVzIG9uIHRoZSBub2RlLjoXVG90YWwgZXBoZW1lcmFsIHN0b3JhZ2VCMGt1YmVybmV0ZXMuaW8vbm9kZS9lcGhlbWVyYWxfc3RvcmFnZS90b3RhbF9ieXRlc1IICAMSAgg8GgAK8wEKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9ub2RlL2VwaGVtZXJhbF9zdG9yYWdlL3VzZWRfYnl0ZXMYASACKgJCeTIvTG9jYWwgZXBoZW1lcmFsIHN0b3JhZ2UgYnl0ZXMgdXNlZCBieSB0aGUgbm9kZS46F0VwaGVtZXJhbCBzdG9yYWdlIHVzYWdlQi9rdWJlcm5ldGVzLmlvL25vZGUvZXBoZW1lcmFsX3N0b3JhZ2UvdXNlZF9ieXRlc1IICAMSAgg8GgAK4AEKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9ub2RlL21lbW9yeS9hbGxvY2F0YWJsZV9ieXRlcxgBIAIqAkJ5MilDdW11bGF0aXZlIG1lbW9yeSBieXRlcyB1c2VkIGJ5IHRoZSBub2RlLjoSQWxsb2NhdGFibGUgbWVtb3J5QitrdWJlcm5ldGVzLmlvL25vZGUvbWVtb3J5L2FsbG9jYXRhYmxlX2J5dGVzUggIAxICCDwaAAqQBApmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL25vZGUvbWVtb3J5L2FsbG9jYXRhYmxlX3V0aWxpemF0aW9uEqABCgttZW1vcnlfdHlwZRqQAUVpdGhlciBgZXZpY3RhYmxlYCBvciBgbm9uLWV2aWN0YWJsZWAuIEV2aWN0YWJsZSBtZW1vcnkgaXMgbWVtb3J5IHRoYXQgY2FuIGJlIGVhc2lseSByZWNsYWltZWQgYnkgdGhlIGtlcm5lbCwgd2hpbGUgbm9uLWV2aWN0YWJsZSBtZW1vcnkgY2Fubm90LhgBIAMqATEynAFUaGUgZnJhY3Rpb24gb2YgdGhlIGFsbG9jYXRhYmxlIG1lbW9yeSB0aGF0IGlzIGN1cnJlbnRseSBpbiB1c2Ugb24gdGhlIGluc3RhbmNlLiBUaGlzIHZhbHVlIGNhbm5vdCBleGNlZWQgMSBhcyB1c2FnZSBjYW5ub3QgZXhjZWVkIGFsbG9jYXRhYmxlIG1lbW9yeSBieXRlcy46Hk1lbW9yeSBhbGxvY2F0YWJsZSB1dGlsaXphdGlvbkIxa3ViZXJuZXRlcy5pby9ub2RlL21lbW9yeS9hbGxvY2F0YWJsZV91dGlsaXphdGlvblIKCAMSAgg8GgIIeArXAQpacHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL25vZGUvbWVtb3J5L3RvdGFsX2J5dGVzGAEgAioCQnkyMk51bWJlciBvZiBieXRlcyBvZiBtZW1vcnkgYWxsb2NhdGFibGUgb24gdGhlIG5vZGUuOgxUb3RhbCBtZW1vcnlCJWt1YmVybmV0ZXMuaW8vbm9kZS9tZW1vcnkvdG90YWxfYnl0ZXNSCAgDEgIIPBoACu8CCllwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2t1YmVybmV0ZXMuaW8vbm9kZS9tZW1vcnkvdXNlZF9ieXRlcxKgAQoLbWVtb3J5X3R5cGUakAFFaXRoZXIgYGV2aWN0YWJsZWAgb3IgYG5vbi1ldmljdGFibGVgLiBFdmljdGFibGUgbWVtb3J5IGlzIG1lbW9yeSB0aGF0IGNhbiBiZSBlYXNpbHkgcmVjbGFpbWVkIGJ5IHRoZSBrZXJuZWwsIHdoaWxlIG5vbi1ldmljdGFibGUgbWVtb3J5IGNhbm5vdC4YASACKgJCeTIpQ3VtdWxhdGl2ZSBtZW1vcnkgYnl0ZXMgdXNlZCBieSB0aGUgbm9kZS46DE1lbW9yeSB1c2FnZUIka3ViZXJuZXRlcy5pby9ub2RlL21lbW9yeS91c2VkX2J5dGVzUggIAxICCDwaAAr8AQpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL25vZGUvbmV0d29yay9yZWNlaXZlZF9ieXRlc19jb3VudBgDIAIqAkJ5MkFDdW11bGF0aXZlIG51bWJlciBvZiBieXRlcyByZWNlaXZlZCBieSB0aGUgbm9kZSBvdmVyIHRoZSBuZXR3b3JrLjoOQnl0ZXMgcmVjZWl2ZWRCL2t1YmVybmV0ZXMuaW8vbm9kZS9uZXR3b3JrL3JlY2VpdmVkX2J5dGVzX2NvdW50UggIAxICCDwaAAr6AQpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL25vZGUvbmV0d29yay9zZW50X2J5dGVzX2NvdW50GAMgAioCQnkyREN1bXVsYXRpdmUgbnVtYmVyIG9mIGJ5dGVzIHRyYW5zbWl0dGVkIGJ5IHRoZSBub2RlIG92ZXIgdGhlIG5ldHdvcmsuOhFCeXRlcyB0cmFuc21pdHRlZEIra3ViZXJuZXRlcy5pby9ub2RlL25ldHdvcmsvc2VudF9ieXRlc19jb3VudFIICAMSAgg8GgAKvAIKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMva3ViZXJuZXRlcy5pby9ub2RlX2RhZW1vbi9jcHUvY29yZV91c2FnZV90aW1lEjIKCWNvbXBvbmVudBolTmFtZSBvZiB0aGUgcmVzcGVjdGl2ZSBzeXN0ZW0gZGFlbW9uLhgDIAMqAXMyUkN1bXVsYXRpdmUgQ1BVIHVzYWdlIG9uIGFsbCBjb3JlcyB1c2VkIGJ5IHRoZSBub2RlIGxldmVsIHN5c3RlbSBkYWVtb24gaW4gc2Vjb25kcy46DkNQVSB1c2FnZSB0aW1lQi1rdWJlcm5ldGVzLmlvL25vZGVfZGFlbW9uL2NwdS9jb3JlX3VzYWdlX3RpbWVSCAgDEgIIPBoACrMDCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2t1YmVybmV0ZXMuaW8vbm9kZV9kYWVtb24vbWVtb3J5L3VzZWRfYnl0ZXMSMgoJY29tcG9uZW50GiVOYW1lIG9mIHRoZSByZXNwZWN0aXZlIHN5c3RlbSBkYWVtb24uEqABCgttZW1vcnlfdHlwZRqQAUVpdGhlciBgZXZpY3RhYmxlYCBvciBgbm9uLWV2aWN0YWJsZWAuIEV2aWN0YWJsZSBtZW1vcnkgaXMgbWVtb3J5IHRoYXQgY2FuIGJlIGVhc2lseSByZWNsYWltZWQgYnkgdGhlIGtlcm5lbCwgd2hpbGUgbm9uLWV2aWN0YWJsZSBtZW1vcnkgY2Fubm90LhgBIAIqAkJ5MitNZW1vcnkgdXNhZ2UgYnkgdGhlIHN5c3RlbSBkYWVtb24gaW4gYnl0ZXMuOgxNZW1vcnkgdXNhZ2VCK2t1YmVybmV0ZXMuaW8vbm9kZV9kYWVtb24vbWVtb3J5L3VzZWRfYnl0ZXNSCAgDEgIIPBoACvkBCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2t1YmVybmV0ZXMuaW8vcG9kL25ldHdvcmsvcmVjZWl2ZWRfYnl0ZXNfY291bnQYAyACKgJCeTJAQ3VtdWxhdGl2ZSBudW1iZXIgb2YgYnl0ZXMgcmVjZWl2ZWQgYnkgdGhlIHBvZCBvdmVyIHRoZSBuZXR3b3JrLjoOQnl0ZXMgcmVjZWl2ZWRCLmt1YmVybmV0ZXMuaW8vcG9kL25ldHdvcmsvcmVjZWl2ZWRfYnl0ZXNfY291bnRSCAgDEgIIPBoACvcBCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2t1YmVybmV0ZXMuaW8vcG9kL25ldHdvcmsvc2VudF9ieXRlc19jb3VudBgDIAIqAkJ5MkNDdW11bGF0aXZlIG51bWJlciBvZiBieXRlcyB0cmFuc21pdHRlZCBieSB0aGUgcG9kIG92ZXIgdGhlIG5ldHdvcmsuOhFCeXRlcyB0cmFuc21pdHRlZEIqa3ViZXJuZXRlcy5pby9wb2QvbmV0d29yay9zZW50X2J5dGVzX2NvdW50UggIAxICCDwaAAqRAgpZcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL3BvZC92b2x1bWUvdG90YWxfYnl0ZXMSOQoLdm9sdW1lX25hbWUaKlRoZSBuYW1lIG9mIHRoZSB2b2x1bWUgKGUuZy4gYC9kZXYvc2RhMWApLhgBIAIqAkJ5MjBUb3RhbCBudW1iZXIgb2YgZGlzayBieXRlcyBhdmFpbGFibGUgdG8gdGhlIHBvZC46D1ZvbHVtZSBjYXBhY2l0eUIka3ViZXJuZXRlcy5pby9wb2Qvdm9sdW1lL3RvdGFsX2J5dGVzUggIAxICCDwaAAqBAgpYcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9rdWJlcm5ldGVzLmlvL3BvZC92b2x1bWUvdXNlZF9ieXRlcxI5Cgt2b2x1bWVfbmFtZRoqVGhlIG5hbWUgb2YgdGhlIHZvbHVtZSAoZS5nLiBgL2Rldi9zZGExYCkuGAEgAioCQnkyJU51bWJlciBvZiBkaXNrIGJ5dGVzIHVzZWQgYnkgdGhlIHBvZC46DFZvbHVtZSB1c2FnZUIja3ViZXJuZXRlcy5pby9wb2Qvdm9sdW1lL3VzZWRfYnl0ZXNSCAgDEgIIPBoACosDCllwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2t1YmVybmV0ZXMuaW8vcG9kL3ZvbHVtZS91dGlsaXphdGlvbhI5Cgt2b2x1bWVfbmFtZRoqVGhlIG5hbWUgb2YgdGhlIHZvbHVtZSAoZS5nLiBgL2Rldi9zZGExYCkuGAEgAyoBMTKlAVRoZSBmcmFjdGlvbiBvZiB0aGUgdm9sdW1lIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHVzZWQgYnkgdGhlIGluc3RhbmNlLiBUaGlzIHZhbHVlIGNhbm5vdCBiZSBncmVhdGVyIHRoYW4gMSBhcyB1c2FnZSBjYW5ub3QgZXhjZWVkIHRoZSB0b3RhbCBhdmFpbGFibGUgdm9sdW1lIHNwYWNlLjoSVm9sdW1lIHV0aWxpemF0aW9uQiRrdWJlcm5ldGVzLmlvL3BvZC92b2x1bWUvdXRpbGl6YXRpb25SCggDEgIIPBoCCHgKiwcKaXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS9odHRwcy9iYWNrZW5kX2xhdGVuY2llcxJhCghwcm90b2NvbBpVUHJvdG9jb2wgdXNlZCBieSB0aGUgY2xpZW50OiAnSFRUUC8xLjAnLCAnSFRUUC8xLjEnLCAnSFRUUC8yLjAnLCAnU1BEWScgb3IgJ1VOS05PV04nLhImCg1yZXNwb25zZV9jb2RlEAIaE0hUVFAgcmVzcG9uc2UgY29kZS4SVAoTcmVzcG9uc2VfY29kZV9jbGFzcxACGjtIVFRQIHJlc3BvbnNlIGNvZGUgY2xhc3M6IDIwMCwgMzAwLCA0MDAsIDUwMCBvciAwIGZvciBub25lLhJkCg9wcm94eV9jb250aW5lbnQaUUNvbnRpbmVudCBvZiB0aGUgSFRUUCBwcm94eSB3aGljaCBoYW5kbGVkIHRoZSBoaXQ6ICdBbWVyaWNhJywgJ0V1cm9wZScgb3IgJ0FzaWEnLhJnCgxjYWNoZV9yZXN1bHQaV0NhY2hlIHJlc3VsdCBmb3Igc2VydmluZyBIVFRQIHJlcXVlc3QgYnkgcHJveHk6ICdISVQnLCAnTUlTUycsICdESVNBQkxFRCcgb3IgJ1VOS05PV04nLhJnCg5jbGllbnRfY291bnRyeRpVQ291bnRyeSBvZiB0aGUgY2xpZW50IHRoYXQgaXNzdWVkIHRoZSBIVFRQIHJlcXVlc3QgKGUuZy4gJ1VuaXRlZCBTdGF0ZXMnLCAnR2VybWFueScpLhgCIAUqAm1zMqgBQSBkaXN0cmlidXRpb24gb2YgdGhlIGxhdGVuY3kgY2FsY3VsYXRlZCBmcm9tIHdoZW4gdGhlIHJlcXVlc3Qgd2FzIHNlbnQgYnkgdGhlIHByb3h5IHRvIHRoZSBiYWNrZW5kIHVudGlsIHRoZSBwcm94eSByZWNlaXZlZCBmcm9tIHRoZSBiYWNrZW5kIHRoZSBsYXN0IGJ5dGUgb2YgcmVzcG9uc2UuOg9CYWNrZW5kIGxhdGVuY3lCNGxvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vaHR0cHMvYmFja2VuZF9sYXRlbmNpZXNSCwgEEgIIPBoDCNIBCsgFCnNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vaHR0cHMvYmFja2VuZF9yZXF1ZXN0X2J5dGVzX2NvdW50Ei4KDXJlc3BvbnNlX2NvZGUQAhobSFRUUCBiYWNrZW5kIHJlc3BvbnNlIGNvZGUuElwKE3Jlc3BvbnNlX2NvZGVfY2xhc3MQAhpDSFRUUCBiYWNrZW5kIHJlc3BvbnNlIGNvZGUgY2xhc3M6IDIwMCwgMzAwLCA0MDAsIDUwMCBvciAwIGZvciBub25lLhJoCg9wcm94eV9jb250aW5lbnQaVUNvbnRpbmVudCBvZiB0aGUgSFRUUCBwcm94eSB3aGljaCBoYW5kbGVkIHRoZSByZXF1ZXN0OiAnQW1lcmljYScsICdFdXJvcGUnIG9yICdBc2lhJy4SnwEKDGNhY2hlX3Jlc3VsdBqOAUNhY2hlIHJlc3VsdCBmb3Igc2VydmluZyB0aGUgSFRUUCByZXF1ZXN0IGJ5IGJhY2tlbmRzIChjYWNoZSBoaXRzIGFyZSBhYnN0cmFjdGVkIGFzIGJhY2tlbmQgcmVxdWVzdHMpOiAnSElUJywgJ01JU1MnLCAnRElTQUJMRUQnIG9yICdVTktOT1dOJy4YAiACKgJCeTJLVGhlIG51bWJlciBvZiBieXRlcyBzZW50IGFzIHJlcXVlc3RzIGZyb20gSFRUUC9TIGxvYWQgYmFsYW5jZXIgdG8gYmFja2VuZHMuOhVCYWNrZW5kIFJlcXVlc3QgQnl0ZXNCPmxvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vaHR0cHMvYmFja2VuZF9yZXF1ZXN0X2J5dGVzX2NvdW50UgsIBBICCDwaAwjSAQqyBQptcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9sb2FkYmFsYW5jaW5nLmdvb2dsZWFwaXMuY29tL2h0dHBzL2JhY2tlbmRfcmVxdWVzdF9jb3VudBIuCg1yZXNwb25zZV9jb2RlEAIaG0hUVFAgYmFja2VuZCByZXNwb25zZSBjb2RlLhJcChNyZXNwb25zZV9jb2RlX2NsYXNzEAIaQ0hUVFAgYmFja2VuZCByZXNwb25zZSBjb2RlIGNsYXNzOiAyMDAsIDMwMCwgNDAwLCA1MDAgb3IgMCBmb3Igbm9uZS4SaAoPcHJveHlfY29udGluZW50GlVDb250aW5lbnQgb2YgdGhlIEhUVFAgcHJveHkgd2hpY2ggaGFuZGxlZCB0aGUgcmVxdWVzdDogJ0FtZXJpY2EnLCAnRXVyb3BlJyBvciAnQXNpYScuEp8BCgxjYWNoZV9yZXN1bHQajgFDYWNoZSByZXN1bHQgZm9yIHNlcnZpbmcgdGhlIEhUVFAgcmVxdWVzdCBieSBiYWNrZW5kcyAoY2FjaGUgaGl0cyBhcmUgYWJzdHJhY3RlZCBhcyBiYWNrZW5kIHJlcXVlc3RzKTogJ0hJVCcsICdNSVNTJywgJ0RJU0FCTEVEJyBvciAnVU5LTk9XTicuGAIgAioBMTJCVGhlIG51bWJlciBvZiByZXF1ZXN0cyBzZXJ2ZWQgYnkgYmFja2VuZHMgb2YgSFRUUC9TIGxvYWQgYmFsYW5jZXIuOhVCYWNrZW5kIFJlcXVlc3QgQ291bnRCOGxvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vaHR0cHMvYmFja2VuZF9yZXF1ZXN0X2NvdW50UgsIBBICCDwaAwjSAQrXBQp0cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9sb2FkYmFsYW5jaW5nLmdvb2dsZWFwaXMuY29tL2h0dHBzL2JhY2tlbmRfcmVzcG9uc2VfYnl0ZXNfY291bnQSLgoNcmVzcG9uc2VfY29kZRACGhtIVFRQIGJhY2tlbmQgcmVzcG9uc2UgY29kZS4SXAoTcmVzcG9uc2VfY29kZV9jbGFzcxACGkNIVFRQIGJhY2tlbmQgcmVzcG9uc2UgY29kZSBjbGFzczogMjAwLCAzMDAsIDQwMCwgNTAwIG9yIDAgZm9yIG5vbmUuEmgKD3Byb3h5X2NvbnRpbmVudBpVQ29udGluZW50IG9mIHRoZSBIVFRQIHByb3h5IHdoaWNoIGhhbmRsZWQgdGhlIHJlcXVlc3Q6ICdBbWVyaWNhJywgJ0V1cm9wZScgb3IgJ0FzaWEnLhKfAQoMY2FjaGVfcmVzdWx0Go4BQ2FjaGUgcmVzdWx0IGZvciBzZXJ2aW5nIHRoZSBIVFRQIHJlcXVlc3QgYnkgYmFja2VuZHMgKGNhY2hlIGhpdHMgYXJlIGFic3RyYWN0ZWQgYXMgYmFja2VuZCByZXF1ZXN0cyk6ICdISVQnLCAnTUlTUycsICdESVNBQkxFRCcgb3IgJ1VOS05PV04nLhgCIAIqAkJ5MldUaGUgbnVtYmVyIG9mIGJ5dGVzIHNlbnQgYXMgcmVzcG9uc2VzIGZyb20gYmFja2VuZHMgKG9yIGNhY2hlKSB0byBIVFRQL1MgbG9hZCBiYWxhbmNlci46FkJhY2tlbmQgUmVzcG9uc2UgQnl0ZXNCP2xvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vaHR0cHMvYmFja2VuZF9yZXNwb25zZV9ieXRlc19jb3VudFILCAQSAgg8GgMI0gEK4wMKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS9odHRwcy9mcm9udGVuZF90Y3BfcnR0EmQKD3Byb3h5X2NvbnRpbmVudBpRQ29udGluZW50IG9mIHRoZSBIVFRQIHByb3h5IHdoaWNoIGhhbmRsZWQgdGhlIGhpdDogJ0FtZXJpY2EnLCAnRXVyb3BlJyBvciAnQXNpYScuEmcKDmNsaWVudF9jb3VudHJ5GlVDb3VudHJ5IG9mIHRoZSBjbGllbnQgdGhhdCBpc3N1ZWQgdGhlIEhUVFAgcmVxdWVzdCAoZS5nLiAnVW5pdGVkIFN0YXRlcycsICdHZXJtYW55JykuGAIgBSoCbXMyUEEgZGlzdHJpYnV0aW9uIG9mIHRoZSBSVFQgbWVhc3VyZWQgZm9yIGVhY2ggY29ubmVjdGlvbiBiZXR3ZWVuIGNsaWVudCBhbmQgcHJveHkuOgxGcm9udGVuZCBSVFRCM2xvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vaHR0cHMvZnJvbnRlbmRfdGNwX3J0dFILCAQSAgg8GgMI0gEK+QYKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS9odHRwcy9yZXF1ZXN0X2J5dGVzX2NvdW50EmEKCHByb3RvY29sGlVQcm90b2NvbCB1c2VkIGJ5IHRoZSBjbGllbnQ6ICdIVFRQLzEuMCcsICdIVFRQLzEuMScsICdIVFRQLzIuMCcsICdTUERZJyBvciAnVU5LTk9XTicuEiYKDXJlc3BvbnNlX2NvZGUQAhoTSFRUUCByZXNwb25zZSBjb2RlLhJUChNyZXNwb25zZV9jb2RlX2NsYXNzEAIaO0hUVFAgcmVzcG9uc2UgY29kZSBjbGFzczogMjAwLCAzMDAsIDQwMCwgNTAwIG9yIDAgZm9yIG5vbmUuEmQKD3Byb3h5X2NvbnRpbmVudBpRQ29udGluZW50IG9mIHRoZSBIVFRQIHByb3h5IHdoaWNoIGhhbmRsZWQgdGhlIGhpdDogJ0FtZXJpY2EnLCAnRXVyb3BlJyBvciAnQXNpYScuErEBCgxjYWNoZV9yZXN1bHQaoAFDYWNoZSByZXN1bHQgZm9yIHNlcnZpbmcgSFRUUCByZXF1ZXN0IGJ5IHByb3h5OiAnSElUJywgJ01JU1MnLCAnRElTQUJMRUQnLCAnUEFSVElBTF9ISVQnIChmb3IgYW55IHJlcXVlc3Qgc2VydmVkIGJ5IENETiB1c2luZyBieXRlIHJhbmdlIHJlcXVlc3RzKSBvciAnVU5LTk9XTicuEmcKDmNsaWVudF9jb3VudHJ5GlVDb3VudHJ5IG9mIHRoZSBjbGllbnQgdGhhdCBpc3N1ZWQgdGhlIEhUVFAgcmVxdWVzdCAoZS5nLiAnVW5pdGVkIFN0YXRlcycsICdHZXJtYW55JykuGAIgAioCQnkySlRoZSBudW1iZXIgb2YgYnl0ZXMgc2VudCBhcyByZXF1ZXN0cyBmcm9tIGNsaWVudHMgdG8gSFRUUC9TIGxvYWQgYmFsYW5jZXIuOg1SZXF1ZXN0IGJ5dGVzQjZsb2FkYmFsYW5jaW5nLmdvb2dsZWFwaXMuY29tL2h0dHBzL3JlcXVlc3RfYnl0ZXNfY291bnRSCwgEEgIIPBoDCNIBCuEGCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vaHR0cHMvcmVxdWVzdF9jb3VudBJqCghwcm90b2NvbBpeUHJvdG9jb2wgdXNlZCBieSB0aGUgY2xpZW50OiAnSFRUUC8xLjAnLCAnSFRUUC8xLjEnLCAnSFRUUC8yLjAnLCAnUVVJQy9IVFRQLzIuMCcgb3IgJ1VOS05PV04nLhImCg1yZXNwb25zZV9jb2RlEAIaE0hUVFAgcmVzcG9uc2UgY29kZS4SVAoTcmVzcG9uc2VfY29kZV9jbGFzcxACGjtIVFRQIHJlc3BvbnNlIGNvZGUgY2xhc3M6IDIwMCwgMzAwLCA0MDAsIDUwMCBvciAwIGZvciBub25lLhJkCg9wcm94eV9jb250aW5lbnQaUUNvbnRpbmVudCBvZiB0aGUgSFRUUCBwcm94eSB3aGljaCBoYW5kbGVkIHRoZSBoaXQ6ICdBbWVyaWNhJywgJ0V1cm9wZScgb3IgJ0FzaWEnLhKxAQoMY2FjaGVfcmVzdWx0GqABQ2FjaGUgcmVzdWx0IGZvciBzZXJ2aW5nIEhUVFAgcmVxdWVzdCBieSBwcm94eTogJ0hJVCcsICdNSVNTJywgJ0RJU0FCTEVEJywgJ1BBUlRJQUxfSElUJyAoZm9yIGFueSByZXF1ZXN0IHNlcnZlZCBieSBDRE4gdXNpbmcgYnl0ZSByYW5nZSByZXF1ZXN0cykgb3IgJ1VOS05PV04nLhJnCg5jbGllbnRfY291bnRyeRpVQ291bnRyeSBvZiB0aGUgY2xpZW50IHRoYXQgaXNzdWVkIHRoZSBIVFRQIHJlcXVlc3QgKGUuZy4gJ1VuaXRlZCBTdGF0ZXMnLCAnR2VybWFueScpLhgCIAIqATEyNlRoZSBudW1iZXIgb2YgcmVxdWVzdHMgc2VydmVkIGJ5IEhUVFAvUyBsb2FkIGJhbGFuY2VyLjoNUmVxdWVzdCBjb3VudEIwbG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS9odHRwcy9yZXF1ZXN0X2NvdW50UgsIBBICCDwaAwjSAQr9BgpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9sb2FkYmFsYW5jaW5nLmdvb2dsZWFwaXMuY29tL2h0dHBzL3Jlc3BvbnNlX2J5dGVzX2NvdW50EmEKCHByb3RvY29sGlVQcm90b2NvbCB1c2VkIGJ5IHRoZSBjbGllbnQ6ICdIVFRQLzEuMCcsICdIVFRQLzEuMScsICdIVFRQLzIuMCcsICdTUERZJyBvciAnVU5LTk9XTicuEiYKDXJlc3BvbnNlX2NvZGUQAhoTSFRUUCByZXNwb25zZSBjb2RlLhJUChNyZXNwb25zZV9jb2RlX2NsYXNzEAIaO0hUVFAgcmVzcG9uc2UgY29kZSBjbGFzczogMjAwLCAzMDAsIDQwMCwgNTAwIG9yIDAgZm9yIG5vbmUuEmQKD3Byb3h5X2NvbnRpbmVudBpRQ29udGluZW50IG9mIHRoZSBIVFRQIHByb3h5IHdoaWNoIGhhbmRsZWQgdGhlIGhpdDogJ0FtZXJpY2EnLCAnRXVyb3BlJyBvciAnQXNpYScuErEBCgxjYWNoZV9yZXN1bHQaoAFDYWNoZSByZXN1bHQgZm9yIHNlcnZpbmcgSFRUUCByZXF1ZXN0IGJ5IHByb3h5OiAnSElUJywgJ01JU1MnLCAnRElTQUJMRUQnLCAnUEFSVElBTF9ISVQnIChmb3IgYW55IHJlcXVlc3Qgc2VydmVkIGJ5IENETiB1c2luZyBieXRlIHJhbmdlIHJlcXVlc3RzKSBvciAnVU5LTk9XTicuEmcKDmNsaWVudF9jb3VudHJ5GlVDb3VudHJ5IG9mIHRoZSBjbGllbnQgdGhhdCBpc3N1ZWQgdGhlIEhUVFAgcmVxdWVzdCAoZS5nLiAnVW5pdGVkIFN0YXRlcycsICdHZXJtYW55JykuGAIgAioCQnkyS1RoZSBudW1iZXIgb2YgYnl0ZXMgc2VudCBhcyByZXNwb25zZXMgZnJvbSBIVFRQL1MgbG9hZCBiYWxhbmNlciB0byBjbGllbnRzLjoOUmVzcG9uc2UgYnl0ZXNCN2xvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vaHR0cHMvcmVzcG9uc2VfYnl0ZXNfY291bnRSCwgEEgIIPBoDCNIBCrsHCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vaHR0cHMvdG90YWxfbGF0ZW5jaWVzEmEKCHByb3RvY29sGlVQcm90b2NvbCB1c2VkIGJ5IHRoZSBjbGllbnQ6ICdIVFRQLzEuMCcsICdIVFRQLzEuMScsICdIVFRQLzIuMCcsICdTUERZJyBvciAnVU5LTk9XTicuEiYKDXJlc3BvbnNlX2NvZGUQAhoTSFRUUCByZXNwb25zZSBjb2RlLhJUChNyZXNwb25zZV9jb2RlX2NsYXNzEAIaO0hUVFAgcmVzcG9uc2UgY29kZSBjbGFzczogMjAwLCAzMDAsIDQwMCwgNTAwIG9yIDAgZm9yIG5vbmUuEmQKD3Byb3h5X2NvbnRpbmVudBpRQ29udGluZW50IG9mIHRoZSBIVFRQIHByb3h5IHdoaWNoIGhhbmRsZWQgdGhlIGhpdDogJ0FtZXJpY2EnLCAnRXVyb3BlJyBvciAnQXNpYScuErEBCgxjYWNoZV9yZXN1bHQaoAFDYWNoZSByZXN1bHQgZm9yIHNlcnZpbmcgSFRUUCByZXF1ZXN0IGJ5IHByb3h5OiAnSElUJywgJ01JU1MnLCAnRElTQUJMRUQnLCAnUEFSVElBTF9ISVQnIChmb3IgYW55IHJlcXVlc3Qgc2VydmVkIGJ5IENETiB1c2luZyBieXRlIHJhbmdlIHJlcXVlc3RzKSBvciAnVU5LTk9XTicuEmcKDmNsaWVudF9jb3VudHJ5GlVDb3VudHJ5IG9mIHRoZSBjbGllbnQgdGhhdCBpc3N1ZWQgdGhlIEhUVFAgcmVxdWVzdCAoZS5nLiAnVW5pdGVkIFN0YXRlcycsICdHZXJtYW55JykuGAIgBSoCbXMykwFBIGRpc3RyaWJ1dGlvbiBvZiB0aGUgbGF0ZW5jeSBjYWxjdWxhdGVkIGZyb20gd2hlbiB0aGUgcmVxdWVzdCB3YXMgcmVjZWl2ZWQgYnkgdGhlIHByb3h5IHVudGlsIHRoZSBwcm94eSBnb3QgQUNLIGZyb20gY2xpZW50IG9uIGxhc3QgcmVzcG9uc2UgYnl0ZS46DVRvdGFsIGxhdGVuY3lCMmxvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vaHR0cHMvdG90YWxfbGF0ZW5jaWVzUgsIBBICCDwaAwjSAQqEBApwcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9sb2FkYmFsYW5jaW5nLmdvb2dsZWFwaXMuY29tL2wzL2ludGVybmFsL2VncmVzc19ieXRlc19jb3VudBI9Cg5jbGllbnRfbmV0d29yaxorTmV0d29yayBvZiB0aGUgY2xpZW50IGluc3RhbmNlIGluIElMQiBmbG93LhJDChFjbGllbnRfc3VibmV0d29yaxouU3VibmV0d29yayBvZiB0aGUgY2xpZW50IGluc3RhbmNlIGluIElMQiBmbG93LhI3CgtjbGllbnRfem9uZRooWm9uZSBvZiB0aGUgY2xpZW50IGluc3RhbmNlIGluIElMQiBmbG93LhgCIAIqAkJ5MnNUaGUgbnVtYmVyIG9mIGJ5dGVzIHNlbnQgZnJvbSBJTEIgYmFja2VuZCB0byBjbGllbnQgKGZvciBUQ1AgZmxvd3MgaXQncyBjb3VudGluZyBieXRlcyBvbiBhcHBsaWNhdGlvbiBzdHJlYW0gb25seSkuOgxFZ3Jlc3MgYnl0ZXNCO2xvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vbDMvaW50ZXJuYWwvZWdyZXNzX2J5dGVzX2NvdW50UgsIBBICCDwaAwiWAQrYAwpycHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9sb2FkYmFsYW5jaW5nLmdvb2dsZWFwaXMuY29tL2wzL2ludGVybmFsL2VncmVzc19wYWNrZXRzX2NvdW50Ej0KDmNsaWVudF9uZXR3b3JrGitOZXR3b3JrIG9mIHRoZSBjbGllbnQgaW5zdGFuY2UgaW4gSUxCIGZsb3cuEkMKEWNsaWVudF9zdWJuZXR3b3JrGi5TdWJuZXR3b3JrIG9mIHRoZSBjbGllbnQgaW5zdGFuY2UgaW4gSUxCIGZsb3cuEjcKC2NsaWVudF96b25lGihab25lIG9mIHRoZSBjbGllbnQgaW5zdGFuY2UgaW4gSUxCIGZsb3cuGAIgAioBMTJCVGhlIG51bWJlciBvZiBwYWNrZXRzIHNlbnQgZnJvbSBJTEIgYmFja2VuZCB0byBjbGllbnQgb2YgdGhlIGZsb3cuOg5FZ3Jlc3MgcGFja2V0c0I9bG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS9sMy9pbnRlcm5hbC9lZ3Jlc3NfcGFja2V0c19jb3VudFILCAQSAgg8GgMIlgEKhwQKcXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS9sMy9pbnRlcm5hbC9pbmdyZXNzX2J5dGVzX2NvdW50Ej0KDmNsaWVudF9uZXR3b3JrGitOZXR3b3JrIG9mIHRoZSBjbGllbnQgaW5zdGFuY2UgaW4gSUxCIGZsb3cuEkMKEWNsaWVudF9zdWJuZXR3b3JrGi5TdWJuZXR3b3JrIG9mIHRoZSBjbGllbnQgaW5zdGFuY2UgaW4gSUxCIGZsb3cuEjcKC2NsaWVudF96b25lGihab25lIG9mIHRoZSBjbGllbnQgaW5zdGFuY2UgaW4gSUxCIGZsb3cuGAIgAioCQnkyc1RoZSBudW1iZXIgb2YgYnl0ZXMgc2VudCBmcm9tIGNsaWVudCB0byBJTEIgYmFja2VuZCAoZm9yIFRDUCBmbG93cyBpdCdzIGNvdW50aW5nIGJ5dGVzIG9uIGFwcGxpY2F0aW9uIHN0cmVhbSBvbmx5KS46DUluZ3Jlc3MgYnl0ZXNCPGxvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vbDMvaW50ZXJuYWwvaW5ncmVzc19ieXRlc19jb3VudFILCAQSAgg8GgMIlgEKzwMKc3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS9sMy9pbnRlcm5hbC9pbmdyZXNzX3BhY2tldHNfY291bnQSPQoOY2xpZW50X25ldHdvcmsaK05ldHdvcmsgb2YgdGhlIGNsaWVudCBpbnN0YW5jZSBpbiBJTEIgZmxvdy4SQwoRY2xpZW50X3N1Ym5ldHdvcmsaLlN1Ym5ldHdvcmsgb2YgdGhlIGNsaWVudCBpbnN0YW5jZSBpbiBJTEIgZmxvdy4SNwoLY2xpZW50X3pvbmUaKFpvbmUgb2YgdGhlIGNsaWVudCBpbnN0YW5jZSBpbiBJTEIgZmxvdy4YAiACKgExMjZUaGUgbnVtYmVyIG9mIHBhY2tldHMgc2VudCBmcm9tIGNsaWVudCB0byBJTEIgYmFja2VuZC46D0luZ3Jlc3MgcGFja2V0c0I+bG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS9sMy9pbnRlcm5hbC9pbmdyZXNzX3BhY2tldHNfY291bnRSCwgEEgIIPBoDCJYBCsoDCmtwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vbDMvaW50ZXJuYWwvcnR0X2xhdGVuY2llcxI9Cg5jbGllbnRfbmV0d29yaxorTmV0d29yayBvZiB0aGUgY2xpZW50IGluc3RhbmNlIGluIElMQiBmbG93LhJDChFjbGllbnRfc3VibmV0d29yaxouU3VibmV0d29yayBvZiB0aGUgY2xpZW50IGluc3RhbmNlIGluIElMQiBmbG93LhI3CgtjbGllbnRfem9uZRooWm9uZSBvZiB0aGUgY2xpZW50IGluc3RhbmNlIGluIElMQiBmbG93LhgCIAUqAm1zMkJBIGRpc3RyaWJ1dGlvbiBvZiBSVFQgbWVhc3VyZWQgb3ZlciBUQ1AgY29ubmVjdGlvbnMgZm9yIElMQiBmbG93cy46DVJUVCBsYXRlbmNpZXNCNmxvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vbDMvaW50ZXJuYWwvcnR0X2xhdGVuY2llc1ILCAQSAgg8GgMIlgEK9gMKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS90Y3Bfc3NsX3Byb3h5L2Nsb3NlZF9jb25uZWN0aW9ucxJqCg9wcm94eV9jb250aW5lbnQaV0NvbnRpbmVudCBvZiB0aGUgU1NMIHByb3h5IHdoaWNoIGhhbmRsZXMgdGhlIGNvbm5lY3Rpb246ICdBbWVyaWNhJywgJ0V1cm9wZScgb3IgJ0FzaWEnLhJtCg5jbGllbnRfY291bnRyeRpbQ291bnRyeSBvZiB0aGUgY2xpZW50IHRoYXQgb3BlbmVkIHRoZSBUQ1AvU1NMIGNvbm5lY3Rpb24gKGUuZy4gJ1VuaXRlZCBTdGF0ZXMnLCAnR2VybWFueScpLhgCIAIqATEyPk51bWJlciBvZiBjb25uZWN0aW9ucyB0aGF0IHdlcmUgdGVybWluYXRlZCBvdmVyIFRDUC9TU0wgcHJveHkuOhJDbG9zZWQgY29ubmVjdGlvbnNCPWxvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vdGNwX3NzbF9wcm94eS9jbG9zZWRfY29ubmVjdGlvbnNSCwgEEgIIPBoDCNIBCuIDCnJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vdGNwX3NzbF9wcm94eS9lZ3Jlc3NfYnl0ZXNfY291bnQSZgoPcHJveHlfY29udGluZW50GlNDb250aW5lbnQgb2YgdGhlIHByb3h5IHdoaWNoIGhhbmRsZXMgdGhlIGNvbm5lY3Rpb246ICdBbWVyaWNhJywgJ0V1cm9wZScgb3IgJ0FzaWEnLhJtCg5jbGllbnRfY291bnRyeRpbQ291bnRyeSBvZiB0aGUgY2xpZW50IHRoYXQgb3BlbmVkIHRoZSBUQ1AvU1NMIGNvbm5lY3Rpb24gKGUuZy4gJ1VuaXRlZCBTdGF0ZXMnLCAnR2VybWFueScpLhgCIAIqAkJ5MjNOdW1iZXIgb2YgYnl0ZXMgc2VudCBmcm9tIFZNIHRvIGNsaWVudCB1c2luZyBwcm94eS46DEVncmVzcyBieXRlc0I9bG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS90Y3Bfc3NsX3Byb3h5L2VncmVzc19ieXRlc19jb3VudFILCAQSAgg8GgMI0gEKvAQKcHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS90Y3Bfc3NsX3Byb3h5L2Zyb250ZW5kX3RjcF9ydHQSagoPcHJveHlfY29udGluZW50GldDb250aW5lbnQgb2YgdGhlIFNTTCBwcm94eSB3aGljaCBoYW5kbGVzIHRoZSBjb25uZWN0aW9uOiAnQW1lcmljYScsICdFdXJvcGUnIG9yICdBc2lhJy4SbQoOY2xpZW50X2NvdW50cnkaW0NvdW50cnkgb2YgdGhlIGNsaWVudCB0aGF0IG9wZW5lZCB0aGUgVENQL1NTTCBjb25uZWN0aW9uIChlLmcuICdVbml0ZWQgU3RhdGVzJywgJ0dlcm1hbnknKS4YAiAFKgJtczKMAUEgZGlzdHJpYnV0aW9uIG9mIHRoZSBzbW9vdGhlZCBSVFQgKGluIG1zKSBtZWFzdXJlZCBieSB0aGUgcHJveHkncyBUQ1Agc3RhY2ssIGVhY2ggbWludXRlIGFwcGxpY2F0aW9uIGxheWVyIGJ5dGVzIHBhc3MgZnJvbSBwcm94eSB0byBjbGllbnQuOgxGcm9udGVuZCBSVFRCO2xvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vdGNwX3NzbF9wcm94eS9mcm9udGVuZF90Y3BfcnR0UgsIBBICCDwaAwjSAQrlAwpzcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9sb2FkYmFsYW5jaW5nLmdvb2dsZWFwaXMuY29tL3RjcF9zc2xfcHJveHkvaW5ncmVzc19ieXRlc19jb3VudBJmCg9wcm94eV9jb250aW5lbnQaU0NvbnRpbmVudCBvZiB0aGUgcHJveHkgd2hpY2ggaGFuZGxlcyB0aGUgY29ubmVjdGlvbjogJ0FtZXJpY2EnLCAnRXVyb3BlJyBvciAnQXNpYScuEm0KDmNsaWVudF9jb3VudHJ5GltDb3VudHJ5IG9mIHRoZSBjbGllbnQgdGhhdCBvcGVuZWQgdGhlIFRDUC9TU0wgY29ubmVjdGlvbiAoZS5nLiAnVW5pdGVkIFN0YXRlcycsICdHZXJtYW55JykuGAIgAioCQnkyM051bWJlciBvZiBieXRlcyBzZW50IGZyb20gY2xpZW50IHRvIFZNIHVzaW5nIHByb3h5LjoNSW5ncmVzcyBieXRlc0I+bG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS90Y3Bfc3NsX3Byb3h5L2luZ3Jlc3NfYnl0ZXNfY291bnRSCwgEEgIIPBoDCNIBCvEDCm9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvYWRiYWxhbmNpbmcuZ29vZ2xlYXBpcy5jb20vdGNwX3NzbF9wcm94eS9uZXdfY29ubmVjdGlvbnMSagoPcHJveHlfY29udGluZW50GldDb250aW5lbnQgb2YgdGhlIFNTTCBwcm94eSB3aGljaCBoYW5kbGVzIHRoZSBjb25uZWN0aW9uOiAnQW1lcmljYScsICdFdXJvcGUnIG9yICdBc2lhJy4SbQoOY2xpZW50X2NvdW50cnkaW0NvdW50cnkgb2YgdGhlIGNsaWVudCB0aGF0IG9wZW5lZCB0aGUgVENQL1NTTCBjb25uZWN0aW9uIChlLmcuICdVbml0ZWQgU3RhdGVzJywgJ0dlcm1hbnknKS4YAiACKgExMjtOdW1iZXIgb2YgY29ubmVjdGlvbnMgdGhhdCB3ZXJlIGNyZWF0ZWQgb3ZlciBUQ1AvU1NMIHByb3h5LjoWTmV3IGNvbm5lY3Rpb25zIG9wZW5lZEI6bG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS90Y3Bfc3NsX3Byb3h5L25ld19jb25uZWN0aW9uc1ILCAQSAgg8GgMI0gEK9gMKcHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS90Y3Bfc3NsX3Byb3h5L29wZW5fY29ubmVjdGlvbnMSagoPcHJveHlfY29udGluZW50GldDb250aW5lbnQgb2YgdGhlIFNTTCBwcm94eSB3aGljaCBoYW5kbGVzIHRoZSBjb25uZWN0aW9uOiAnQW1lcmljYScsICdFdXJvcGUnIG9yICdBc2lhJy4SbQoOY2xpZW50X2NvdW50cnkaW0NvdW50cnkgb2YgdGhlIGNsaWVudCB0aGF0IG9wZW5lZCB0aGUgVENQL1NTTCBjb25uZWN0aW9uIChlLmcuICdVbml0ZWQgU3RhdGVzJywgJ0dlcm1hbnknKS4YASACKgExMkRDdXJyZW50IG51bWJlciBvZiBvdXRzdGFuZGluZyBjb25uZWN0aW9ucyB0aHJvdWdoIHRoZSBUQ1AvU1NMIHByb3h5LjoQT3BlbiBDb25uZWN0aW9uc0I7bG9hZGJhbGFuY2luZy5nb29nbGVhcGlzLmNvbS90Y3Bfc3NsX3Byb3h5L29wZW5fY29ubmVjdGlvbnNSCwgEEgIIPBoDCNIBCpECCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvZ2dpbmcuZ29vZ2xlYXBpcy5jb20vYmlsbGluZy9ieXRlc19pbmdlc3RlZBI+Cg1yZXNvdXJjZV90eXBlGi1Nb25pdG9yZWQgcmVzb3VyY2UgdHlwZSBmb3IgdGhlIGluZ2VzdGVkIGxvZy4YAiACKgJCeTITTG9nIGJ5dGVzIGluZ2VzdGVkLjoSTG9nIGJ5dGVzIGluZ2VzdGVkQi1sb2dnaW5nLmdvb2dsZWFwaXMuY29tL2JpbGxpbmcvYnl0ZXNfaW5nZXN0ZWRSCwgEEgIIPBoDCKwCCrgCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvZ2dpbmcuZ29vZ2xlYXBpcy5jb20vYmlsbGluZy9tb250aGx5X2J5dGVzX2luZ2VzdGVkEj4KDXJlc291cmNlX3R5cGUaLU1vbml0b3JlZCByZXNvdXJjZSB0eXBlIGZvciB0aGUgaW5nZXN0ZWQgbG9nLhgBIAIqAkJ5MiFNb250aC10by1kYXRlIGxvZyBieXRlcyBpbmdlc3RlZC46Gk1vbnRobHkgbG9nIGJ5dGVzIGluZ2VzdGVkQjVsb2dnaW5nLmdvb2dsZWFwaXMuY29tL2JpbGxpbmcvbW9udGhseV9ieXRlc19pbmdlc3RlZFIMCAQSAwiIDhoDCPAuCoUCClZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvZ2dpbmcuZ29vZ2xlYXBpcy5jb20vYnl0ZV9jb3VudBIXCgNsb2caEE5hbWUgb2YgdGhlIGxvZy4SJgoIc2V2ZXJpdHkaGlNldmVyaXR5IG9mIHRoZSBsb2cgZW50cnkuGAIgAioCQnkyLE51bWJlciBvZiBieXRlcyBpbiBhbGwgbG9nIGVudHJpZXMgaW5nZXN0ZWQuOglMb2cgYnl0ZXNCIWxvZ2dpbmcuZ29vZ2xlYXBpcy5jb20vYnl0ZV9jb3VudFIGCAQSAgg8CosDCmNwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvZ2dpbmcuZ29vZ2xlYXBpcy5jb20vZHJvcHBlZF9sb2dfZW50cnlfY291bnQSFwoDbG9nGhBOYW1lIG9mIHRoZSBsb2cuGAIgAioBMTKkAU51bWJlciBvZiBsb2cgZW50cmllcyB0aGF0IGRpZCBub3QgY29udHJpYnV0ZSB0byB1c2VyIGRlZmluZWQgbWV0cmljcy4gVGhpcyBtZXRyaWMgaXMgZGVwcmVjYXRlZC4gVXNlIGxvZ2dpbmcuZ29vZ2xlYXBpcy5jb20vbG9nc19iYXNlZF9tZXRyaWNzX2Vycm9yX2NvdW50IGluc3RlYWQuOiVMb2dzLWJhc2VkIG1ldHJpYyBlcnJvcnMgKERlcHJlY2F0ZWQpQi5sb2dnaW5nLmdvb2dsZWFwaXMuY29tL2Ryb3BwZWRfbG9nX2VudHJ5X2NvdW50UgYIBRICCDwK5QEKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbG9nZ2luZy5nb29nbGVhcGlzLmNvbS9leGNsdWRlZF9ieXRlX2NvdW50GAIgAioCQnkyMk51bWJlciBvZiBieXRlcyBpbiBsb2cgZW50cmllcyB0aGF0IHdlcmUgZXhjbHVkZWQuOhJFeGNsdWRlZCBsb2cgYnl0ZXNCKmxvZ2dpbmcuZ29vZ2xlYXBpcy5jb20vZXhjbHVkZWRfYnl0ZV9jb3VudFIGCAQSAgg8CucBCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvZ2dpbmcuZ29vZ2xlYXBpcy5jb20vZXhjbHVkZWRfbG9nX2VudHJ5X2NvdW50GAIgAioBMTIpTnVtYmVyIG9mIGxvZyBlbnRyaWVzIHRoYXQgd2VyZSBleGNsdWRlZC46FEV4Y2x1ZGVkIGxvZyBlbnRyaWVzQi9sb2dnaW5nLmdvb2dsZWFwaXMuY29tL2V4Y2x1ZGVkX2xvZ19lbnRyeV9jb3VudFIGCAQSAgg8CugBCl5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL2xvZ2dpbmcuZ29vZ2xlYXBpcy5jb20vZXhwb3J0cy9ieXRlX2NvdW50GAIgAioCQnkyMk51bWJlciBvZiBieXRlcyBpbiBsb2cgZW50cmllcyB0aGF0IHdlcmUgZXhwb3J0ZWQuOhJFeHBvcnRlZCBsb2cgYnl0ZXNCKWxvZ2dpbmcuZ29vZ2xlYXBpcy5jb20vZXhwb3J0cy9ieXRlX2NvdW50UgsIBBICCDwaAwjoAgrzAQpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9sb2dnaW5nLmdvb2dsZWFwaXMuY29tL2V4cG9ydHMvZXJyb3JfY291bnQYAiACKgExMjFOdW1iZXIgb2YgbG9nIGVudHJpZXMgdGhhdCBmYWlsZWQgdG8gYmUgZXhwb3J0ZWQuOh1FeHBvcnRlZCBsb2cgZW50cmllcyBmYWlsdXJlc0IqbG9nZ2luZy5nb29nbGVhcGlzLmNvbS9leHBvcnRzL2Vycm9yX2NvdW50UgsIBBICCDwaAwjoAgrqAQpjcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9sb2dnaW5nLmdvb2dsZWFwaXMuY29tL2V4cG9ydHMvbG9nX2VudHJ5X2NvdW50GAIgAioBMTIpTnVtYmVyIG9mIGxvZyBlbnRyaWVzIHRoYXQgd2VyZSBleHBvcnRlZC46FEV4cG9ydGVkIGxvZyBlbnRyaWVzQi5sb2dnaW5nLmdvb2dsZWFwaXMuY29tL2V4cG9ydHMvbG9nX2VudHJ5X2NvdW50UgsIBBICCDwaAwjoAgqjAgpbcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9sb2dnaW5nLmdvb2dsZWFwaXMuY29tL2xvZ19lbnRyeV9jb3VudBIXCgNsb2caEE5hbWUgb2YgdGhlIGxvZy4SJgoIc2V2ZXJpdHkaGlNldmVyaXR5IG9mIHRoZSBsb2cgZW50cnkuGAIgAioBMTI/TnVtYmVyIG9mIGxvZyBlbnRyaWVzIHRoYXQgY29udHJpYnV0ZWQgdG8gdXNlci1kZWZpbmVkIG1ldHJpY3MuOgtMb2cgZW50cmllc0ImbG9nZ2luZy5nb29nbGVhcGlzLmNvbS9sb2dfZW50cnlfY291bnRSBggEEgIIPAqtAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9sb2dnaW5nLmdvb2dsZWFwaXMuY29tL2xvZ3NfYmFzZWRfbWV0cmljc19lcnJvcl9jb3VudBIXCgNsb2caEE5hbWUgb2YgdGhlIGxvZy4YAiACKgExMkZOdW1iZXIgb2YgbG9nIGVudHJpZXMgdGhhdCBkaWQgbm90IGNvbnRyaWJ1dGUgdG8gdXNlciBkZWZpbmVkIG1ldHJpY3MuOhhMb2dzLWJhc2VkIG1ldHJpYyBlcnJvcnNCNWxvZ2dpbmcuZ29vZ2xlYXBpcy5jb20vbG9nc19iYXNlZF9tZXRyaWNzX2Vycm9yX2NvdW50UgYIBBICCDwKnwIKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbG9nZ2luZy5nb29nbGVhcGlzLmNvbS9tZXRyaWNfdGhyb3R0bGVkGAEgATJhSW5kaWNhdGVzIGlmIHBvaW50cyBhcmUgYmVpbmcgZHJvcHBlZCBmb3IgbG9ncy1iYXNlZCBtZXRyaWNzIGR1ZSB0byBleGNlZWRpbmcgdGltZSBzZXJpZXMgbGltaXRzLjoiTG9ncy1iYXNlZCBtZXRyaWMgdGhyb3R0bGVkIHN0YXR1c0InbG9nZ2luZy5nb29nbGVhcGlzLmNvbS9tZXRyaWNfdGhyb3R0bGVkUgsIBBICCDwaAwjSAQqLAgpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9sb2dnaW5nLmdvb2dsZWFwaXMuY29tL3RpbWVfc2VyaWVzX2NvdW50GAEgAioBMTJARXN0aW1hdGUgb2YgdGhlIGFjdGl2ZSB0aW1lIHNlcmllcyBjb3VudCBmb3IgbG9ncy1iYXNlZCBtZXRyaWNzLjoqTG9ncy1iYXNlZCBtZXRyaWMgYWN0aXZlIHRpbWUgc2VyaWVzIGNvdW50Qihsb2dnaW5nLmdvb2dsZWFwaXMuY29tL3RpbWVfc2VyaWVzX2NvdW50UgsIAxICCDwaAwjSAQqwAgpdcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9tbC5nb29nbGVhcGlzLmNvbS9wcmVkaWN0aW9uL2Vycm9yX2NvdW50ElwKD3ByZWRpY3Rpb25fdHlwZRpJT25lIG9mIHRoZSBDbG91ZE1MIHByZWRpY3Rpb24gdHlwZXM6IG9ubGluZV9wcmVkaWN0aW9uLCBiYXRjaF9wcmVkaWN0aW9uLhgCIAIqATEyJkN1bXVsYXRpdmUgY291bnQgb2YgcHJlZGljdGlvbiBlcnJvcnMuOgtFcnJvciBjb3VudEIobWwuZ29vZ2xlYXBpcy5jb20vcHJlZGljdGlvbi9lcnJvcl9jb3VudFILCAQSAgg8GgMItAEKtAIKW3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbWwuZ29vZ2xlYXBpcy5jb20vcHJlZGljdGlvbi9sYXRlbmNpZXMScwoMbGF0ZW5jeV90eXBlGmNPbmUgb2YgdGhlIGZvbGxvd2luZzogb3ZlcmhlYWQsIG1vZGVsLCBvciB1c2VyLiBBZ2dyZWdhdGluZyB0aGVzZSB0aHJlZSBnaXZlcyB1cyB0aGUgdG90YWwgbGF0ZW5jeS4YAiAFKgJ1czIaTGF0ZW5jeSBvZiBhIGNlcnRhaW4gdHlwZS46B0xhdGVuY3lCJm1sLmdvb2dsZWFwaXMuY29tL3ByZWRpY3Rpb24vbGF0ZW5jaWVzUgsIBBICCDwaAwi0AQq5AgpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9tbC5nb29nbGVhcGlzLmNvbS9wcmVkaWN0aW9uL3ByZWRpY3Rpb25fY291bnQSXAoPcHJlZGljdGlvbl90eXBlGklPbmUgb2YgdGhlIENsb3VkTUwgcHJlZGljdGlvbiB0eXBlczogb25saW5lX3ByZWRpY3Rpb24sIGJhdGNoX3ByZWRpY3Rpb24uGAIgAioBMTIgQ3VtdWxhdGl2ZSBjb3VudCBvZiBwcmVkaWN0aW9ucy46EFByZWRpY3Rpb24gY291bnRCLW1sLmdvb2dsZWFwaXMuY29tL3ByZWRpY3Rpb24vcHJlZGljdGlvbl9jb3VudFILCAQSAgg8GgMItAEK7AIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbWwuZ29vZ2xlYXBpcy5jb20vcHJlZGljdGlvbi9yZXNwb25zZV9jb3VudBJcCg9wcmVkaWN0aW9uX3R5cGUaSU9uZSBvZiB0aGUgQ2xvdWRNTCBwcmVkaWN0aW9uIHR5cGVzOiBvbmxpbmVfcHJlZGljdGlvbiwgYmF0Y2hfcHJlZGljdGlvbi4SKgoNcmVzcG9uc2VfY29kZRACGhdUaGUgaHR0cCByZXNwb25zZSBjb2RlLhgCIAIqATEyLUN1bXVsYXRpdmUgY291bnQgb2YgZGlmZmVyZW50IHJlc3BvbnNlIGNvZGVzLjoOUmVzcG9uc2UgY291bnRCK21sLmdvb2dsZWFwaXMuY29tL3ByZWRpY3Rpb24vcmVzcG9uc2VfY291bnRSCwgEEgIIPBoDCLQBCuQDCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL21sLmdvb2dsZWFwaXMuY29tL3RyYWluaW5nL2FjY2VsZXJhdG9yL21lbW9yeS91dGlsaXphdGlvbhJlCgl0YXNrX3R5cGUaWE9uZSBvZiB0aGUgQ2xvdWRNTCB0cmFpbmluZyBqb2IgdGFzayB0eXBlczogbWFzdGVyLCB3b3JrZXIgb3IgcHMgKGZvciBQYXJhbWV0ZXIgU2VydmVyKS4SJgoKdGFza19pbmRleBACGhZaZXJvIGJhc2VkIHRhc2sgaW5kZXguEicKCHRyaWFsX2lkGhtJRCBvZiBoeXBlcnBhcmFtZXRlciB0cmlhbC4YASADKgYxMF4yLiUyRkZyYWN0aW9uIG9mIHRoZSBhbGxvY2F0ZWQgYWNjZWxlcmF0b3IgbWVtb3J5IHRoYXQgaXMgY3VycmVudGx5IGluIHVzZS46HkFjY2VsZXJhdG9yIG1lbW9yeSB1dGlsaXphdGlvbkI5bWwuZ29vZ2xlYXBpcy5jb20vdHJhaW5pbmcvYWNjZWxlcmF0b3IvbWVtb3J5L3V0aWxpemF0aW9uUgsIAxICCDwaAwjoAgrIAwpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9tbC5nb29nbGVhcGlzLmNvbS90cmFpbmluZy9hY2NlbGVyYXRvci91dGlsaXphdGlvbhJlCgl0YXNrX3R5cGUaWE9uZSBvZiB0aGUgQ2xvdWRNTCB0cmFpbmluZyBqb2IgdGFzayB0eXBlczogbWFzdGVyLCB3b3JrZXIgb3IgcHMgKGZvciBQYXJhbWV0ZXIgU2VydmVyKS4SJgoKdGFza19pbmRleBACGhZaZXJvIGJhc2VkIHRhc2sgaW5kZXguEicKCHRyaWFsX2lkGhtJRCBvZiBoeXBlcnBhcmFtZXRlciB0cmlhbC4YASADKgYxMF4yLiUyP0ZyYWN0aW9uIG9mIHRoZSBhbGxvY2F0ZWQgYWNjZWxlcmF0b3IgdGhhdCBpcyBjdXJyZW50bHkgaW4gdXNlLjoXQWNjZWxlcmF0b3IgdXRpbGl6YXRpb25CMm1sLmdvb2dsZWFwaXMuY29tL3RyYWluaW5nL2FjY2VsZXJhdG9yL3V0aWxpemF0aW9uUgsIAxICCDwaAwjoAgqoAwpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9tbC5nb29nbGVhcGlzLmNvbS90cmFpbmluZy9jcHUvdXRpbGl6YXRpb24SZQoJdGFza190eXBlGlhPbmUgb2YgdGhlIENsb3VkTUwgdHJhaW5pbmcgam9iIHRhc2sgdHlwZXM6IG1hc3Rlciwgd29ya2VyIG9yIHBzIChmb3IgUGFyYW1ldGVyIFNlcnZlcikuEiYKCnRhc2tfaW5kZXgQAhoWWmVybyBiYXNlZCB0YXNrIGluZGV4LhInCgh0cmlhbF9pZBobSUQgb2YgaHlwZXJwYXJhbWV0ZXIgdHJpYWwuGAEgAyoGMTBeMi4lMjdGcmFjdGlvbiBvZiB0aGUgYWxsb2NhdGVkIENQVSB0aGF0IGlzIGN1cnJlbnRseSBpbiB1c2UuOg9DUFUgdXRpbGl6YXRpb25CKm1sLmdvb2dsZWFwaXMuY29tL3RyYWluaW5nL2NwdS91dGlsaXphdGlvblILCAQSAgg8GgMI6AIKtAMKYnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbWwuZ29vZ2xlYXBpcy5jb20vdHJhaW5pbmcvbWVtb3J5L3V0aWxpemF0aW9uEmUKCXRhc2tfdHlwZRpYT25lIG9mIHRoZSBDbG91ZE1MIHRyYWluaW5nIGpvYiB0YXNrIHR5cGVzOiBtYXN0ZXIsIHdvcmtlciBvciBwcyAoZm9yIFBhcmFtZXRlciBTZXJ2ZXIpLhImCgp0YXNrX2luZGV4EAIaFlplcm8gYmFzZWQgdGFzayBpbmRleC4SJwoIdHJpYWxfaWQaG0lEIG9mIGh5cGVycGFyYW1ldGVyIHRyaWFsLhgBIAMqBjEwXjIuJTI6RnJhY3Rpb24gb2YgdGhlIGFsbG9jYXRlZCBtZW1vcnkgdGhhdCBpcyBjdXJyZW50bHkgaW4gdXNlLjoSTWVtb3J5IHV0aWxpemF0aW9uQi1tbC5nb29nbGVhcGlzLmNvbS90cmFpbmluZy9tZW1vcnkvdXRpbGl6YXRpb25SCwgEEgIIPBoDCOgCCswDCmxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL21sLmdvb2dsZWFwaXMuY29tL3RyYWluaW5nL25ldHdvcmsvcmVjZWl2ZWRfYnl0ZXNfY291bnQSZQoJdGFza190eXBlGlhPbmUgb2YgdGhlIENsb3VkTUwgdHJhaW5pbmcgam9iIHRhc2sgdHlwZXM6IG1hc3Rlciwgd29ya2VyIG9yIHBzIChmb3IgUGFyYW1ldGVyIFNlcnZlcikuEiYKCnRhc2tfaW5kZXgQAhoWWmVybyBiYXNlZCB0YXNrIGluZGV4LhInCgh0cmlhbF9pZBobSUQgb2YgaHlwZXJwYXJhbWV0ZXIgdHJpYWwuGAIgAioCQnkyPk51bWJlciBvZiBieXRlcyByZWNlaXZlZCBieSB0aGUgdHJhaW5pbmcgam9iIG92ZXIgdGhlIG5ldHdvcmsuOhZOZXR3b3JrIGJ5dGVzIHJlY2VpdmVkQjdtbC5nb29nbGVhcGlzLmNvbS90cmFpbmluZy9uZXR3b3JrL3JlY2VpdmVkX2J5dGVzX2NvdW50UgsIBBICCDwaAwjoAgq8AwpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9tbC5nb29nbGVhcGlzLmNvbS90cmFpbmluZy9uZXR3b3JrL3NlbnRfYnl0ZXNfY291bnQSZQoJdGFza190eXBlGlhPbmUgb2YgdGhlIENsb3VkTUwgdHJhaW5pbmcgam9iIHRhc2sgdHlwZXM6IG1hc3Rlciwgd29ya2VyIG9yIHBzIChmb3IgUGFyYW1ldGVyIFNlcnZlcikuEiYKCnRhc2tfaW5kZXgQAhoWWmVybyBiYXNlZCB0YXNrIGluZGV4LhInCgh0cmlhbF9pZBobSUQgb2YgaHlwZXJwYXJhbWV0ZXIgdHJpYWwuGAIgAioCQnkyOk51bWJlciBvZiBieXRlcyBzZW50IGJ5IHRoZSB0cmFpbmluZyBqb2Igb3ZlciB0aGUgbmV0d29yay46Ek5ldHdvcmsgYnl0ZXMgc2VudEIzbWwuZ29vZ2xlYXBpcy5jb20vdHJhaW5pbmcvbmV0d29yay9zZW50X2J5dGVzX2NvdW50UgsIBBICCDwaAwjoAgqnAwplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9tb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL2JpbGxpbmcvYnl0ZXNfaW5nZXN0ZWQSOQoNbWV0cmljX2RvbWFpbhooRG9tYWluIG5hbWUgcHJlZml4IGZyb20gdGhlIG1ldHJpYyB0eXBlLhIxCgttZXRyaWNfdHlwZRoiTWV0cmljIHR5cGUgZm9yIHRoZSBpbmdlc3RlZCBkYXRhLhI/Cg1yZXNvdXJjZV90eXBlGi5Nb25pdG9yZWQgcmVzb3VyY2UgdHlwZSBmb3IgdGhlIGluZ2VzdGVkIGRhdGEuGAIgAioCQnkyM0NoYXJnZWFibGUgbnVtYmVyIG9mIGJ5dGVzIG9mIG1ldHJpYyBkYXRhIGluZ2VzdGVkLjoVTWV0cmljIGJ5dGVzIGluZ2VzdGVkQjBtb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL2JpbGxpbmcvYnl0ZXNfaW5nZXN0ZWRSCRICCDwaAwj8BwqwAgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9tb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL3N0YXRzL251bV90aW1lX3NlcmllcxI7CgZwcmVmaXgaMU1ldHJpYyB0eXBlIG5hbWUgcHJlZml4IGZvciB0aGUgZW5jb21wYXNzZWQgZGF0YS4YASACKgExMjZOdW1iZXIgb2YgYWN0aXZlIHRpbWUgc2VyaWVzIGZvciB1c2VyLWRlZmluZWQgbWV0cmljcy46EVRpbWUgc2VyaWVzIGNvdW50Qi9tb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL3N0YXRzL251bV90aW1lX3Nlcmllc1IIEgIIPBoCCDwKjgUKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS91cHRpbWVfY2hlY2svY2hlY2tfcGFzc2VkEjwKCGNoZWNrX2lkGjBUaGUgVXB0aW1lIGNoZWNrIGZvciB3aGljaCB0aGUgcmVxdWVzdCB3YXMgbWFkZS4SWwoQY2hlY2tlcl9sb2NhdGlvbhpHRm9yIGV4dGVybmFsIGNoZWNrcywgdGhlIFVwdGltZSBNb25pdG9yaW5nIGxvY2F0aW9uIG1ha2luZyB0aGUgcmVxdWVzdC4SPwoSY2hlY2tlcl9wcm9qZWN0X2lkGilGb3IgaW50ZXJuYWwgY2hlY2tzLCB0aGUgY2hlY2tlciBwcm9qZWN0LhI8Cg9jaGVja2VyX25ldHdvcmsaKUZvciBpbnRlcm5hbCBjaGVja3MsIHRoZSBjaGVja2VyIG5ldHdvcmsuEjYKDGNoZWNrZXJfem9uZRomRm9yIGludGVybmFsIGNoZWNrcywgdGhlIGNoZWNrZXIgem9uZS4SWQoTY2hlY2tlZF9yZXNvdXJjZV9pZBpCSUQgb2YgdGhlIHJlc291cmNlIGJlaW5nIGNoZWNrZWQuIEZvcm1hdCBkZXBlbmRzIG9uIHJlc291cmNlIHR5cGUuGAEgATImVHJ1ZSBpZiB0aGUgcmVzb3VyY2UgcGFzc2VkIHRoZSBjaGVjay46DENoZWNrIHBhc3NlZEIzbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS91cHRpbWVfY2hlY2svY2hlY2tfcGFzc2VkUgYIBBoCCCMKsQUKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS91cHRpbWVfY2hlY2svY29udGVudF9taXNtYXRjaBI8CghjaGVja19pZBowVGhlIFVwdGltZSBjaGVjayBmb3Igd2hpY2ggdGhlIHJlcXVlc3Qgd2FzIG1hZGUuElsKEGNoZWNrZXJfbG9jYXRpb24aR0ZvciBleHRlcm5hbCBjaGVja3MsIHRoZSBVcHRpbWUgTW9uaXRvcmluZyBsb2NhdGlvbiBtYWtpbmcgdGhlIHJlcXVlc3QuEj8KEmNoZWNrZXJfcHJvamVjdF9pZBopRm9yIGludGVybmFsIGNoZWNrcywgdGhlIGNoZWNrZXIgcHJvamVjdC4SPAoPY2hlY2tlcl9uZXR3b3JrGilGb3IgaW50ZXJuYWwgY2hlY2tzLCB0aGUgY2hlY2tlciBuZXR3b3JrLhI2CgxjaGVja2VyX3pvbmUaJkZvciBpbnRlcm5hbCBjaGVja3MsIHRoZSBjaGVja2VyIHpvbmUuElkKE2NoZWNrZWRfcmVzb3VyY2VfaWQaQklEIG9mIHRoZSByZXNvdXJjZSBiZWluZyBjaGVja2VkLiBGb3JtYXQgZGVwZW5kcyBvbiByZXNvdXJjZSB0eXBlLhgBIAEyPVRydWUgaWYgdGhlIHJlc3BvbnNlIGhhZCBjb250ZW50IHRoYXQgZGlkIG5vdCBtYXRjaCB0aGUgY2hlY2s6EENvbnRlbnQgbWlzbWF0Y2hCN21vbml0b3JpbmcuZ29vZ2xlYXBpcy5jb20vdXB0aW1lX2NoZWNrL2NvbnRlbnRfbWlzbWF0Y2hSBggEGgIIIwqaBQpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9tb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL3VwdGltZV9jaGVjay9lcnJvcl9jb2RlEjwKCGNoZWNrX2lkGjBUaGUgVXB0aW1lIGNoZWNrIGZvciB3aGljaCB0aGUgcmVxdWVzdCB3YXMgbWFkZS4SWwoQY2hlY2tlcl9sb2NhdGlvbhpHRm9yIGV4dGVybmFsIGNoZWNrcywgdGhlIFVwdGltZSBNb25pdG9yaW5nIGxvY2F0aW9uIG1ha2luZyB0aGUgcmVxdWVzdC4SPwoSY2hlY2tlcl9wcm9qZWN0X2lkGilGb3IgaW50ZXJuYWwgY2hlY2tzLCB0aGUgY2hlY2tlciBwcm9qZWN0LhI8Cg9jaGVja2VyX25ldHdvcmsaKUZvciBpbnRlcm5hbCBjaGVja3MsIHRoZSBjaGVja2VyIG5ldHdvcmsuEjYKDGNoZWNrZXJfem9uZRomRm9yIGludGVybmFsIGNoZWNrcywgdGhlIGNoZWNrZXIgem9uZS4SWQoTY2hlY2tlZF9yZXNvdXJjZV9pZBpCSUQgb2YgdGhlIHJlc291cmNlIGJlaW5nIGNoZWNrZWQuIEZvcm1hdCBkZXBlbmRzIG9uIHJlc291cmNlIHR5cGUuGAEgBDI4RXJyb3IsIGlmIGFueSwgdGhhdCBwcmV2ZW50ZWQgY29udGFjdCB3aXRoIHRoZSByZXNvdXJjZS46CkVycm9yIGNvZGVCMW1vbml0b3JpbmcuZ29vZ2xlYXBpcy5jb20vdXB0aW1lX2NoZWNrL2Vycm9yX2NvZGVSBggEGgIIIwqRBQpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9tb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL3VwdGltZV9jaGVjay9odHRwX3N0YXR1cxI8CghjaGVja19pZBowVGhlIFVwdGltZSBjaGVjayBmb3Igd2hpY2ggdGhlIHJlcXVlc3Qgd2FzIG1hZGUuElsKEGNoZWNrZXJfbG9jYXRpb24aR0ZvciBleHRlcm5hbCBjaGVja3MsIHRoZSBVcHRpbWUgTW9uaXRvcmluZyBsb2NhdGlvbiBtYWtpbmcgdGhlIHJlcXVlc3QuEj8KEmNoZWNrZXJfcHJvamVjdF9pZBopRm9yIGludGVybmFsIGNoZWNrcywgdGhlIGNoZWNrZXIgcHJvamVjdC4SPAoPY2hlY2tlcl9uZXR3b3JrGilGb3IgaW50ZXJuYWwgY2hlY2tzLCB0aGUgY2hlY2tlciBuZXR3b3JrLhI2CgxjaGVja2VyX3pvbmUaJkZvciBpbnRlcm5hbCBjaGVja3MsIHRoZSBjaGVja2VyIHpvbmUuElkKE2NoZWNrZWRfcmVzb3VyY2VfaWQaQklEIG9mIHRoZSByZXNvdXJjZSBiZWluZyBjaGVja2VkLiBGb3JtYXQgZGVwZW5kcyBvbiByZXNvdXJjZSB0eXBlLhgBIAQyLEhUVFAgcmVzcG9uc2UgY29kZSByZXR1cm5lZCBieSB0aGUgcmVzb3VyY2UuOgtIVFRQIHN0YXR1c0IybW9uaXRvcmluZy5nb29nbGVhcGlzLmNvbS91cHRpbWVfY2hlY2svaHR0cF9zdGF0dXNSBggEGgIIIwrSBQprcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9tb25pdG9yaW5nLmdvb2dsZWFwaXMuY29tL3VwdGltZV9jaGVjay9yZXF1ZXN0X2xhdGVuY3kSPAoIY2hlY2tfaWQaMFRoZSBVcHRpbWUgY2hlY2sgZm9yIHdoaWNoIHRoZSByZXF1ZXN0IHdhcyBtYWRlLhJbChBjaGVja2VyX2xvY2F0aW9uGkdGb3IgZXh0ZXJuYWwgY2hlY2tzLCB0aGUgVXB0aW1lIE1vbml0b3JpbmcgbG9jYXRpb24gbWFraW5nIHRoZSByZXF1ZXN0LhI/ChJjaGVja2VyX3Byb2plY3RfaWQaKUZvciBpbnRlcm5hbCBjaGVja3MsIHRoZSBjaGVja2VyIHByb2plY3QuEjwKD2NoZWNrZXJfbmV0d29yaxopRm9yIGludGVybmFsIGNoZWNrcywgdGhlIGNoZWNrZXIgbmV0d29yay4SNgoMY2hlY2tlcl96b25lGiZGb3IgaW50ZXJuYWwgY2hlY2tzLCB0aGUgY2hlY2tlciB6b25lLhJZChNjaGVja2VkX3Jlc291cmNlX2lkGkJJRCBvZiB0aGUgcmVzb3VyY2UgYmVpbmcgY2hlY2tlZC4gRm9ybWF0IGRlcGVuZHMgb24gcmVzb3VyY2UgdHlwZS4YASADKgJtczJdVGhlIHJlcXVlc3QgbGF0ZW5jeSBpbiBtaWxsaXNlY29uZHMgbWVhc3VyZWQgYnkgVXB0aW1lIE1vbml0b3Jpbmcgd2hlbiBleGVjdXRpbmcgdGhlIHJlcXVlc3QuOg9SZXF1ZXN0IGxhdGVuY3lCNm1vbml0b3JpbmcuZ29vZ2xlYXBpcy5jb20vdXB0aW1lX2NoZWNrL3JlcXVlc3RfbGF0ZW5jeVIGCAQaAggjCrECCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL25ldGFwcC5jb20vY2xvdWR2b2x1bWUvb3BlcmF0aW9uX2NvdW50EjgKBHR5cGUaMFR5cGUgb2YgdXRpbGl6YXRpb24sIGVpdGhlciBsb2dpY2FsIG9yIHNuYXBzaG90LhgCIAIqBWNvdW50MklOdW1iZXIgb2Ygb3BlcmF0aW9ucyBiZWluZyBwZXJmb3JtZWQgb24gdGhlIGNsb3VkIHZvbHVtZSBieSB0aGUgZW5kIHVzZXJzOhBPcGVyYXRpb25zIGNvdW50QiZuZXRhcHAuY29tL2Nsb3Vkdm9sdW1lL29wZXJhdGlvbl9jb3VudFIICAISAgg8GgAK1gEKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvbmV0YXBwLmNvbS9jbG91ZHZvbHVtZS9yZWFkX2J5dGVzX2NvdW50GAIgAioCQnkyL0kvTyBieXRlcyBmcm9tIHJlYWQgb3BlcmF0aW9ucyBieSB0aGUgZW5kIHVzZXIuOgpCeXRlcyByZWFkQiduZXRhcHAuY29tL2Nsb3Vkdm9sdW1lL3JlYWRfYnl0ZXNfY291bnRSCAgCEgIIPBoACokCCldwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL25ldGFwcC5jb20vY2xvdWR2b2x1bWUvdm9sdW1lX3NpemUYASACKgJCeTJfU3BhY2UgYWxsb2NhdGVkIHRvIHRoZSB2b2x1bWUsIGluIGJ5dGVzLiBBIG1lYXN1cmUgb2YgdGhlIGFjdHVhbCBwcm92aXNpb25lZCBzaXplIG9mIHRoZSB2b2x1bWU6F1ZvbHVtZSBzcGFjZSBhbGxvY2F0aW9uQiJuZXRhcHAuY29tL2Nsb3Vkdm9sdW1lL3ZvbHVtZV9zaXplUggIAhICCDwaAAquAgpYcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9uZXRhcHAuY29tL2Nsb3Vkdm9sdW1lL3ZvbHVtZV91c2FnZRIyCgR0eXBlGipUeXBlIG9mIHVzYWdlLCBlaXRoZXIgbG9naWNhbCBvciBzbmFwc2hvdC4YASACKgJCeTJTU3BhY2UgdXRpbGl6ZWQgYnkgdGhlIHZvbHVtZSwgaW4gYnl0ZXMuIEEgbWVhc3VyZSBvZiB0aGUgYWN0dWFsIHNpemUgb2YgdGhlIHZvbHVtZS46ElZvbHVtZSBzcGFjZSB1c2FnZUIjbmV0YXBwLmNvbS9jbG91ZHZvbHVtZS92b2x1bWVfdXNhZ2VSCAgCEgIIPBoACtwBCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL25ldGFwcC5jb20vY2xvdWR2b2x1bWUvd3JpdGVfYnl0ZXNfY291bnQYAiACKgJCeTIwSS9PIGJ5dGVzIGZyb20gd3JpdGUgb3BlcmF0aW9ucyBieSB0aGUgZW5kIHVzZXIuOg1CeXRlcyB3cml0dGVuQihuZXRhcHAuY29tL2Nsb3Vkdm9sdW1lL3dyaXRlX2J5dGVzX2NvdW50UggIAhICCDwaAAqyAwpxcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9uZXR3b3Jrc2VjdXJpdHkuZ29vZ2xlYXBpcy5jb20vaHR0cHMvcHJldmlld2VkX3JlcXVlc3RfY291bnQSJwoHYmxvY2tlZBABGhpQb2xpY3kgYXBwbGljYXRpb24gcmVzdWx0LhI0ChNiYWNrZW5kX3RhcmdldF9uYW1lGh1IVFRQKFMpIEJhY2tlbmQgU2VydmljZSBOYW1lLhgCIAIqATEydFF1ZXJpZXMgdGhhdCB3b3VsZCBiZSBhZmZlY3RlZCBieSBydWxlcyBjdXJyZW50bHkgaW4gdGhlICdwcmV2aWV3JyBtb2RlLCBpZiB0aG9zZSBydWxlcyB3ZXJlIHRvIGJlIG1hZGUgbm9uLXByZXZpZXcuOhdQcmV2aWV3ZWQgcmVxdWVzdCBjb3VudEI8bmV0d29ya3NlY3VyaXR5Lmdvb2dsZWFwaXMuY29tL2h0dHBzL3ByZXZpZXdlZF9yZXF1ZXN0X2NvdW50UgoIAxICCDwaAgh4Cs8CCmdwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL25ldHdvcmtzZWN1cml0eS5nb29nbGVhcGlzLmNvbS9odHRwcy9yZXF1ZXN0X2NvdW50EicKB2Jsb2NrZWQQARoaUG9saWN5IGFwcGxpY2F0aW9uIHJlc3VsdC4SNAoTYmFja2VuZF90YXJnZXRfbmFtZRodSFRUUChTKSBCYWNrZW5kIFNlcnZpY2UgTmFtZS4YAiACKgExMi9BY3R1YWwgcmVzdWx0IG9mIHBvbGljeSBlbmZvcmNlbWVudCBvbiBxdWVyaWVzLjoNUmVxdWVzdCBjb3VudEIybmV0d29ya3NlY3VyaXR5Lmdvb2dsZWFwaXMuY29tL2h0dHBzL3JlcXVlc3RfY291bnRSCggDEgIIPBoCCHgK9gEKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3NuYXBzaG90L2JhY2tsb2dfYnl0ZXMYASACKgJCeTI3VG90YWwgYnl0ZSBzaXplIG9mIHRoZSBtZXNzYWdlcyByZXRhaW5lZCBpbiBhIHNuYXBzaG90LjoWU25hcHNob3QgYmFja2xvZyBieXRlc0IscHVic3ViLmdvb2dsZWFwaXMuY29tL3NuYXBzaG90L2JhY2tsb2dfYnl0ZXNSCggDEgIIPBoCCHgK7gIKa3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3NuYXBzaG90L2JhY2tsb2dfYnl0ZXNfYnlfcmVnaW9uEjsKBnJlZ2lvbhoxVGhlIENsb3VkIHJlZ2lvbiBpbiB3aGljaCBtZXNzYWdlcyBhcmUgcGVyc2lzdGVkLhgBIAIqAkJ5MlRUb3RhbCBieXRlIHNpemUgb2YgdGhlIG1lc3NhZ2VzIHJldGFpbmVkIGluIGEgc25hcHNob3QsIGJyb2tlbiBkb3duIGJ5IENsb3VkIHJlZ2lvbi46IFNuYXBzaG90IGJhY2tsb2cgYnl0ZXMgYnkgcmVnaW9uQjZwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc25hcHNob3QvYmFja2xvZ19ieXRlc19ieV9yZWdpb25SCggDEgIIPBoCCHgK3gMKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3NuYXBzaG90L2NvbmZpZ191cGRhdGVzX2NvdW50EpQBCg1yZXNwb25zZV9jb2RlGoIBT3BlcmF0aW9uIHJlc3BvbnNlIGNvZGUgc3RyaW5nLCBkZXJpdmVkIGFzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgc3RhdHVzIGNvZGUgKGUuZy4sICdzdWNjZXNzJywgJ25vdF9mb3VuZCcsICd1bmF2YWlsYWJsZScpLhIuCg5vcGVyYXRpb25fdHlwZRocVHlwZSBvZiBvcGVyYXRpb24gcGVyZm9ybWVkLhgCIAIqATEyUEN1bXVsYXRpdmUgY291bnQgb2YgY29uZmlndXJhdGlvbiBjaGFuZ2VzLCBncm91cGVkIGJ5IG9wZXJhdGlvbiB0eXBlIGFuZCByZXN1bHQuOhBTbmFwc2hvdCB1cGRhdGVzQjNwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc25hcHNob3QvY29uZmlnX3VwZGF0ZXNfY291bnRSCwgDEgIIPBoDCPABCuEBCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zbmFwc2hvdC9udW1fbWVzc2FnZXMYASACKgExMipOdW1iZXIgb2YgbWVzc2FnZXMgcmV0YWluZWQgaW4gYSBzbmFwc2hvdC46EVNuYXBzaG90IG1lc3NhZ2VzQitwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc25hcHNob3QvbnVtX21lc3NhZ2VzUgoIAxICCDwaAgh4CtkCCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zbmFwc2hvdC9udW1fbWVzc2FnZXNfYnlfcmVnaW9uEjsKBnJlZ2lvbhoxVGhlIENsb3VkIHJlZ2lvbiBpbiB3aGljaCBtZXNzYWdlcyBhcmUgcGVyc2lzdGVkLhgBIAIqATEyR051bWJlciBvZiBtZXNzYWdlcyByZXRhaW5lZCBpbiBhIHNuYXBzaG90LCBicm9rZW4gZG93biBieSBDbG91ZCByZWdpb24uOhtTbmFwc2hvdCBtZXNzYWdlcyBieSByZWdpb25CNXB1YnN1Yi5nb29nbGVhcGlzLmNvbS9zbmFwc2hvdC9udW1fbWVzc2FnZXNfYnlfcmVnaW9uUgoIAxICCDwaAgh4CosCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zbmFwc2hvdC9vbGRlc3RfbWVzc2FnZV9hZ2UYASACKgFzMj5BZ2UgKGluIHNlY29uZHMpIG9mIHRoZSBvbGRlc3QgbWVzc2FnZSByZXRhaW5lZCBpbiBhIHNuYXBzaG90LjobT2xkZXN0IHNuYXBzaG90IG1lc3NhZ2UgYWdlQjFwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc25hcHNob3Qvb2xkZXN0X21lc3NhZ2VfYWdlUgoIAxICCDwaAgh4CoMDCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zbmFwc2hvdC9vbGRlc3RfbWVzc2FnZV9hZ2VfYnlfcmVnaW9uEjsKBnJlZ2lvbhoxVGhlIENsb3VkIHJlZ2lvbiBpbiB3aGljaCBtZXNzYWdlcyBhcmUgcGVyc2lzdGVkLhgBIAIqAXMyW0FnZSAoaW4gc2Vjb25kcykgb2YgdGhlIG9sZGVzdCBtZXNzYWdlIHJldGFpbmVkIGluIGEgc25hcHNob3QsIGJyb2tlbiBkb3duIGJ5IENsb3VkIHJlZ2lvbi46JU9sZGVzdCBzbmFwc2hvdCBtZXNzYWdlIGFnZSBieSByZWdpb25CO3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zbmFwc2hvdC9vbGRlc3RfbWVzc2FnZV9hZ2VfYnlfcmVnaW9uUgoIAxICCDwaAgh4CpgCCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vYmFja2xvZ19ieXRlcxgBIAIqAkJ5MltUb3RhbCBieXRlIHNpemUgb2YgdGhlIHVuYWNrbm93bGVkZ2VkIG1lc3NhZ2VzIChhLmsuYS4gYmFja2xvZyBtZXNzYWdlcykgaW4gYSBzdWJzY3JpcHRpb24uOgxCYWNrbG9nIHNpemVCMHB1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vYmFja2xvZ19ieXRlc1IKCAQSAgg8GgIIeArjAwphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL2J5dGVfY29zdBIuCg5vcGVyYXRpb25fdHlwZRocVHlwZSBvZiBvcGVyYXRpb24gcGVyZm9ybWVkLhKUAQoNcmVzcG9uc2VfY29kZRqCAU9wZXJhdGlvbiByZXNwb25zZSBjb2RlIHN0cmluZywgZGVyaXZlZCBhcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHN0YXR1cyBjb2RlIChlLmcuLCAnc3VjY2VzcycsICdub3RfZm91bmQnLCAndW5hdmFpbGFibGUnKS4YAiACKgJCeTJcQ3VtdWxhdGl2ZSBjb3N0IG9mIG9wZXJhdGlvbnMsIG1lYXN1cmVkIGluIGJ5dGVzLiBUaGlzIGlzIHVzZWQgdG8gbWVhc3VyZSBxdW90YSB1dGlsaXphdGlvbi46FlN1YnNjcmlwdGlvbiBieXRlIGNvc3RCLHB1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vYnl0ZV9jb3N0UgsIBBICCDwaAwjwAQqABApscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL2NvbmZpZ191cGRhdGVzX2NvdW50EpQBCg1yZXNwb25zZV9jb2RlGoIBT3BlcmF0aW9uIHJlc3BvbnNlIGNvZGUgc3RyaW5nLCBkZXJpdmVkIGFzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgc3RhdHVzIGNvZGUgKGUuZy4sICdzdWNjZXNzJywgJ25vdF9mb3VuZCcsICd1bmF2YWlsYWJsZScpLhIuCg5vcGVyYXRpb25fdHlwZRocVHlwZSBvZiBvcGVyYXRpb24gcGVyZm9ybWVkLhgCIAIqATEyZkN1bXVsYXRpdmUgY291bnQgb2YgY29uZmlndXJhdGlvbiBjaGFuZ2VzIGZvciBlYWNoIHN1YnNjcmlwdGlvbiwgZ3JvdXBlZCBieSBvcGVyYXRpb24gdHlwZSBhbmQgcmVzdWx0LjoUU3Vic2NyaXB0aW9uIHVwZGF0ZXNCN3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vY29uZmlnX3VwZGF0ZXNfY291bnRSCwgEEgIIPBoDCPABCu8DCoABcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL21vZF9hY2tfZGVhZGxpbmVfbWVzc2FnZV9vcGVyYXRpb25fY291bnQSlAEKDXJlc3BvbnNlX2NvZGUaggFPcGVyYXRpb24gcmVzcG9uc2UgY29kZSBzdHJpbmcsIGRlcml2ZWQgYXMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBzdGF0dXMgY29kZSAoZS5nLiwgJ3N1Y2Nlc3MnLCAnbm90X2ZvdW5kJywgJ3VuYXZhaWxhYmxlJykuGAIgAioBMTJMQ3VtdWxhdGl2ZSBjb3VudCBvZiBNb2RpZnlBY2tEZWFkbGluZSBtZXNzYWdlIG9wZXJhdGlvbnMsIGdyb3VwZWQgYnkgcmVzdWx0LjokTW9kaWZ5QWNrRGVhZGxpbmUgbWVzc2FnZSBvcGVyYXRpb25zQktwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL21vZF9hY2tfZGVhZGxpbmVfbWVzc2FnZV9vcGVyYXRpb25fY291bnRSCwgEEgIIPBoDCPABCrsECnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vbW9kX2Fja19kZWFkbGluZV9yZXF1ZXN0X2NvdW50EnQKDnJlc3BvbnNlX2NsYXNzGmJBIGNsYXNzaWZpY2F0aW9uIGdyb3VwIGZvciB0aGUgcmVzcG9uc2UgY29kZS4gSXQgY2FuIGJlIG9uZSBvZiBbJ3N1Y2Nlc3MnLCAnaW52YWxpZCcsICdpbnRlcm5hbCddLhKUAQoNcmVzcG9uc2VfY29kZRqCAU9wZXJhdGlvbiByZXNwb25zZSBjb2RlIHN0cmluZywgZGVyaXZlZCBhcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHN0YXR1cyBjb2RlIChlLmcuLCAnc3VjY2VzcycsICdub3RfZm91bmQnLCAndW5hdmFpbGFibGUnKS4YAiACKgExMkJDdW11bGF0aXZlIGNvdW50IG9mIE1vZGlmeUFja0RlYWRsaW5lIHJlcXVlc3RzLCBncm91cGVkIGJ5IHJlc3VsdC46Gk1vZGlmeUFja0RlYWRsaW5lIHJlcXVlc3RzQkFwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL21vZF9hY2tfZGVhZGxpbmVfcmVxdWVzdF9jb3VudFIKCAQSAgg8GgIIeAq5AgpwcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL251bV9vdXRzdGFuZGluZ19tZXNzYWdlcxgBIAIqATEyWU51bWJlciBvZiBtZXNzYWdlcyBkZWxpdmVyZWQgdG8gYSBzdWJzY3JpcHRpb24ncyBwdXNoIGVuZHBvaW50LCBidXQgbm90IHlldCBhY2tub3dsZWRnZWQuOhlPdXRzdGFuZGluZyBwdXNoIG1lc3NhZ2VzQjtwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL251bV9vdXRzdGFuZGluZ19tZXNzYWdlc1ILCAQSAgg8GgMI8AEKngIKc3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9udW1fcmV0YWluZWRfYWNrZWRfbWVzc2FnZXMYASACKgExMjtOdW1iZXIgb2YgYWNrbm93bGVkZ2VkIG1lc3NhZ2VzIHJldGFpbmVkIGluIGEgc3Vic2NyaXB0aW9uLjoXUmV0YWluZWQgYWNrZWQgbWVzc2FnZXNCPnB1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vbnVtX3JldGFpbmVkX2Fja2VkX21lc3NhZ2VzUgoIAhICCDwaAgh4CpYDCn1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vbnVtX3JldGFpbmVkX2Fja2VkX21lc3NhZ2VzX2J5X3JlZ2lvbhI7CgZyZWdpb24aMVRoZSBDbG91ZCByZWdpb24gaW4gd2hpY2ggbWVzc2FnZXMgYXJlIHBlcnNpc3RlZC4YASACKgExMlhOdW1iZXIgb2YgYWNrbm93bGVkZ2VkIG1lc3NhZ2VzIHJldGFpbmVkIGluIGEgc3Vic2NyaXB0aW9uLCBicm9rZW4gZG93biBieSBDbG91ZCByZWdpb24uOiFSZXRhaW5lZCBhY2tlZCBtZXNzYWdlcyBieSByZWdpb25CSHB1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vbnVtX3JldGFpbmVkX2Fja2VkX21lc3NhZ2VzX2J5X3JlZ2lvblIKCAISAgg8GgIIeAr6Agp2cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL251bV91bmFja2VkX21lc3NhZ2VzX2J5X3JlZ2lvbhI7CgZyZWdpb24aMVRoZSBDbG91ZCByZWdpb24gaW4gd2hpY2ggbWVzc2FnZXMgYXJlIHBlcnNpc3RlZC4YASACKgExMlFOdW1iZXIgb2YgdW5hY2tub3dsZWRnZWQgbWVzc2FnZXMgaW4gYSBzdWJzY3JpcHRpb24sIGJyb2tlbiBkb3duIGJ5IENsb3VkIHJlZ2lvbi46GlVuYWNrZWQgbWVzc2FnZXMgYnkgcmVnaW9uQkFwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL251bV91bmFja2VkX21lc3NhZ2VzX2J5X3JlZ2lvblIKCAISAgg8GgIIeAqkAgpwcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL251bV91bmRlbGl2ZXJlZF9tZXNzYWdlcxgBIAIqATEyTk51bWJlciBvZiB1bmFja25vd2xlZGdlZCBtZXNzYWdlcyAoYS5rLmEuIGJhY2tsb2cgbWVzc2FnZXMpIGluIGEgc3Vic2NyaXB0aW9uLjoQVW5hY2tlZCBtZXNzYWdlc0I7cHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9udW1fdW5kZWxpdmVyZWRfbWVzc2FnZXNSCggEEgIIPBoCCHgKyAIKeXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9vbGRlc3RfcmV0YWluZWRfYWNrZWRfbWVzc2FnZV9hZ2UYASACKgFzMk9BZ2UgKGluIHNlY29uZHMpIG9mIHRoZSBvbGRlc3QgYWNrbm93bGVkZ2VkIG1lc3NhZ2UgcmV0YWluZWQgaW4gYSBzdWJzY3JpcHRpb24uOiFPbGRlc3QgcmV0YWluZWQgYWNrZWQgbWVzc2FnZSBhZ2VCRHB1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vb2xkZXN0X3JldGFpbmVkX2Fja2VkX21lc3NhZ2VfYWdlUgoIAhICCDwaAgh4CsEDCoMBcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL29sZGVzdF9yZXRhaW5lZF9hY2tlZF9tZXNzYWdlX2FnZV9ieV9yZWdpb24SOwoGcmVnaW9uGjFUaGUgQ2xvdWQgcmVnaW9uIGluIHdoaWNoIG1lc3NhZ2VzIGFyZSBwZXJzaXN0ZWQuGAEgAioBczJsQWdlIChpbiBzZWNvbmRzKSBvZiB0aGUgb2xkZXN0IGFja25vd2xlZGdlZCBtZXNzYWdlIHJldGFpbmVkIGluIGEgc3Vic2NyaXB0aW9uLCBicm9rZW4gZG93biBieSBDbG91ZCByZWdpb24uOitPbGRlc3QgcmV0YWluZWQgYWNrZWQgbWVzc2FnZSBhZ2UgYnkgcmVnaW9uQk5wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL29sZGVzdF9yZXRhaW5lZF9hY2tlZF9tZXNzYWdlX2FnZV9ieV9yZWdpb25SCggCEgIIPBoCCHgKxQIKcnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9vbGRlc3RfdW5hY2tlZF9tZXNzYWdlX2FnZRgBIAIqAXMyYUFnZSAoaW4gc2Vjb25kcykgb2YgdGhlIG9sZGVzdCB1bmFja25vd2xlZGdlZCBtZXNzYWdlIChhLmsuYS4gYmFja2xvZyBtZXNzYWdlKSBpbiBhIHN1YnNjcmlwdGlvbi46Gk9sZGVzdCB1bmFja2VkIG1lc3NhZ2UgYWdlQj1wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL29sZGVzdF91bmFja2VkX21lc3NhZ2VfYWdlUgoIBBICCDwaAgh4CqQDCnxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vb2xkZXN0X3VuYWNrZWRfbWVzc2FnZV9hZ2VfYnlfcmVnaW9uEjsKBnJlZ2lvbhoxVGhlIENsb3VkIHJlZ2lvbiBpbiB3aGljaCBtZXNzYWdlcyBhcmUgcGVyc2lzdGVkLhgBIAIqAXMyZUFnZSAoaW4gc2Vjb25kcykgb2YgdGhlIG9sZGVzdCB1bmFja25vd2xlZGdlZCBtZXNzYWdlIGluIGEgc3Vic2NyaXB0aW9uLCBicm9rZW4gZG93biBieSBDbG91ZCByZWdpb24uOiRPbGRlc3QgdW5hY2tlZCBtZXNzYWdlIGFnZSBieSByZWdpb25CR3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vb2xkZXN0X3VuYWNrZWRfbWVzc2FnZV9hZ2VfYnlfcmVnaW9uUgoIAhICCDwaAgh4CssECnhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vcHVsbF9hY2tfbWVzc2FnZV9vcGVyYXRpb25fY291bnQSlAEKDXJlc3BvbnNlX2NvZGUaggFPcGVyYXRpb24gcmVzcG9uc2UgY29kZSBzdHJpbmcsIGRlcml2ZWQgYXMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBzdGF0dXMgY29kZSAoZS5nLiwgJ3N1Y2Nlc3MnLCAnbm90X2ZvdW5kJywgJ3VuYXZhaWxhYmxlJykuGAIgAioBMTK+AUN1bXVsYXRpdmUgY291bnQgb2YgYWNrbm93bGVkZ2UgbWVzc2FnZSBvcGVyYXRpb25zLCBncm91cGVkIGJ5IHJlc3VsdC4gRm9yIGEgZGVmaW5pdGlvbiBvZiBtZXNzYWdlIG9wZXJhdGlvbnMsIHNlZSBDbG91ZCBQdWIvU3ViIG1ldHJpYyBzdWJzY3JpcHRpb24vbW9kX2Fja19kZWFkbGluZV9tZXNzYWdlX29wZXJhdGlvbl9jb3VudC46HkFja25vd2xlZGdlIG1lc3NhZ2Ugb3BlcmF0aW9uc0JDcHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9wdWxsX2Fja19tZXNzYWdlX29wZXJhdGlvbl9jb3VudFILCAQSAgg8GgMI8AEKnwQKbnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9wdWxsX2Fja19yZXF1ZXN0X2NvdW50EnQKDnJlc3BvbnNlX2NsYXNzGmJBIGNsYXNzaWZpY2F0aW9uIGdyb3VwIGZvciB0aGUgcmVzcG9uc2UgY29kZS4gSXQgY2FuIGJlIG9uZSBvZiBbJ3N1Y2Nlc3MnLCAnaW52YWxpZCcsICdpbnRlcm5hbCddLhKUAQoNcmVzcG9uc2VfY29kZRqCAU9wZXJhdGlvbiByZXNwb25zZSBjb2RlIHN0cmluZywgZGVyaXZlZCBhcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHN0YXR1cyBjb2RlIChlLmcuLCAnc3VjY2VzcycsICdub3RfZm91bmQnLCAndW5hdmFpbGFibGUnKS4YAiACKgExMjxDdW11bGF0aXZlIGNvdW50IG9mIGFja25vd2xlZGdlIHJlcXVlc3RzLCBncm91cGVkIGJ5IHJlc3VsdC46FEFja25vd2xlZGdlIHJlcXVlc3RzQjlwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3B1bGxfYWNrX3JlcXVlc3RfY291bnRSCggEEgIIPBoCCHgKrQQKdHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9wdWxsX21lc3NhZ2Vfb3BlcmF0aW9uX2NvdW50EpQBCg1yZXNwb25zZV9jb2RlGoIBT3BlcmF0aW9uIHJlc3BvbnNlIGNvZGUgc3RyaW5nLCBkZXJpdmVkIGFzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgc3RhdHVzIGNvZGUgKGUuZy4sICdzdWNjZXNzJywgJ25vdF9mb3VuZCcsICd1bmF2YWlsYWJsZScpLhgCIAIqATEytwFDdW11bGF0aXZlIGNvdW50IG9mIHB1bGwgbWVzc2FnZSBvcGVyYXRpb25zLCBncm91cGVkIGJ5IHJlc3VsdC4gRm9yIGEgZGVmaW5pdGlvbiBvZiBtZXNzYWdlIG9wZXJhdGlvbnMsIHNlZSBDbG91ZCBQdWIvU3ViIG1ldHJpYyBzdWJzY3JpcHRpb24vbW9kX2Fja19kZWFkbGluZV9tZXNzYWdlX29wZXJhdGlvbl9jb3VudC46D1B1bGwgb3BlcmF0aW9uc0I/cHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9wdWxsX21lc3NhZ2Vfb3BlcmF0aW9uX2NvdW50UgsIBBICCDwaAwjwAQqJBApqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3B1bGxfcmVxdWVzdF9jb3VudBJ0Cg5yZXNwb25zZV9jbGFzcxpiQSBjbGFzc2lmaWNhdGlvbiBncm91cCBmb3IgdGhlIHJlc3BvbnNlIGNvZGUuIEl0IGNhbiBiZSBvbmUgb2YgWydzdWNjZXNzJywgJ2ludmFsaWQnLCAnaW50ZXJuYWwnXS4SlAEKDXJlc3BvbnNlX2NvZGUaggFPcGVyYXRpb24gcmVzcG9uc2UgY29kZSBzdHJpbmcsIGRlcml2ZWQgYXMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBzdGF0dXMgY29kZSAoZS5nLiwgJ3N1Y2Nlc3MnLCAnbm90X2ZvdW5kJywgJ3VuYXZhaWxhYmxlJykuGAIgAioBMTI1Q3VtdWxhdGl2ZSBjb3VudCBvZiBwdWxsIHJlcXVlc3RzLCBncm91cGVkIGJ5IHJlc3VsdC46DVB1bGwgcmVxdWVzdHNCNXB1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vcHVsbF9yZXF1ZXN0X2NvdW50UgoIBBICCDwaAgh4CtIGCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vcHVzaF9yZXF1ZXN0X2NvdW50Er8BCg5yZXNwb25zZV9jbGFzcxqsAUEgY2xhc3NpZmljYXRpb24gZ3JvdXAgZm9yIHRoZSByZXNwb25zZSBjb2RlLiBJdCBjYW4gYmUgb25lIG9mIFsnYWNrJywgJ2RlYWRsaW5lX2V4Y2VlZGVkJywgJ2ludGVybmFsJywgJ2ludmFsaWQnLCAncmVtb3RlX3NlcnZlcl80eHgnLCAncmVtb3RlX3NlcnZlcl81eHgnLCAndW5yZWFjaGFibGUnXS4SlAEKDXJlc3BvbnNlX2NvZGUaggFPcGVyYXRpb24gcmVzcG9uc2UgY29kZSBzdHJpbmcsIGRlcml2ZWQgYXMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBzdGF0dXMgY29kZSAoZS5nLiwgJ3N1Y2Nlc3MnLCAnbm90X2ZvdW5kJywgJ3VuYXZhaWxhYmxlJykuEikKDWRlbGl2ZXJ5X3R5cGUaGFB1c2ggZGVsaXZlcnkgbWVjaGFuaXNtLhgCIAIqATEyhgJDdW11bGF0aXZlIGNvdW50IG9mIHB1c2ggYXR0ZW1wdHMsIGdyb3VwZWQgYnkgcmVzdWx0LiBVbmxpa2UgcHVsbHMsIHRoZSBwdXNoIHNlcnZlciBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdCBiYXRjaCB1c2VyIG1lc3NhZ2VzLiBTbyBlYWNoIHJlcXVlc3Qgb25seSBjb250YWlucyBvbmUgdXNlciBtZXNzYWdlLiBUaGUgcHVzaCBzZXJ2ZXIgcmV0cmllcyBvbiBlcnJvcnMsIHNvIGEgZ2l2ZW4gdXNlciBtZXNzYWdlIGNhbiBhcHBlYXIgbXVsdGlwbGUgdGltZXMuOg1QdXNoIHJlcXVlc3RzQjVwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3B1c2hfcmVxdWVzdF9jb3VudFIKCAQSAgg8GgIIeAreAwpucHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3B1c2hfcmVxdWVzdF9sYXRlbmNpZXMSlAEKDXJlc3BvbnNlX2NvZGUaggFPcGVyYXRpb24gcmVzcG9uc2UgY29kZSBzdHJpbmcsIGRlcml2ZWQgYXMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBzdGF0dXMgY29kZSAoZS5nLiwgJ3N1Y2Nlc3MnLCAnbm90X2ZvdW5kJywgJ3VuYXZhaWxhYmxlJykuEikKDWRlbGl2ZXJ5X3R5cGUaGFB1c2ggZGVsaXZlcnkgbWVjaGFuaXNtLhgCIAUqAnVzMkxEaXN0cmlidXRpb24gb2YgcHVzaCByZXF1ZXN0IGxhdGVuY2llcyAoaW4gbWljcm9zZWNvbmRzKSwgZ3JvdXBlZCBieSByZXN1bHQuOgxQdXNoIGxhdGVuY3lCOXB1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vcHVzaF9yZXF1ZXN0X2xhdGVuY2llc1ILCAQSAgg8GgMI8AEKmwIKbHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9yZXRhaW5lZF9hY2tlZF9ieXRlcxgBIAIqAkJ5MkhUb3RhbCBieXRlIHNpemUgb2YgdGhlIGFja25vd2xlZGdlZCBtZXNzYWdlcyByZXRhaW5lZCBpbiBhIHN1YnNjcmlwdGlvbi46FFJldGFpbmVkIGFja2VkIGJ5dGVzQjdwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3JldGFpbmVkX2Fja2VkX2J5dGVzUgoIAhICCDwaAgh4CpMDCnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vcmV0YWluZWRfYWNrZWRfYnl0ZXNfYnlfcmVnaW9uEjsKBnJlZ2lvbhoxVGhlIENsb3VkIHJlZ2lvbiBpbiB3aGljaCBtZXNzYWdlcyBhcmUgcGVyc2lzdGVkLhgBIAIqAkJ5MmVUb3RhbCBieXRlIHNpemUgb2YgdGhlIGFja25vd2xlZGdlZCBtZXNzYWdlcyByZXRhaW5lZCBpbiBhIHN1YnNjcmlwdGlvbiwgYnJva2VuIGRvd24gYnkgQ2xvdWQgcmVnaW9uLjoeUmV0YWluZWQgYWNrZWQgYnl0ZXMgYnkgcmVnaW9uQkFwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3JldGFpbmVkX2Fja2VkX2J5dGVzX2J5X3JlZ2lvblIKCAISAgg8GgIIeAqUAwpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3NlZWtfcmVxdWVzdF9jb3VudBKUAQoNcmVzcG9uc2VfY29kZRqCAU9wZXJhdGlvbiByZXNwb25zZSBjb2RlIHN0cmluZywgZGVyaXZlZCBhcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHN0YXR1cyBjb2RlIChlLmcuLCAnc3VjY2VzcycsICdub3RfZm91bmQnLCAndW5hdmFpbGFibGUnKS4YAiACKgExMjVDdW11bGF0aXZlIGNvdW50IG9mIHNlZWsgYXR0ZW1wdHMsIGdyb3VwZWQgYnkgcmVzdWx0LjoNU2VlayByZXF1ZXN0c0I1cHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9zZWVrX3JlcXVlc3RfY291bnRSCwgDEgIIPBoDCPABCu0ECoIBcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3N0cmVhbWluZ19wdWxsX2Fja19tZXNzYWdlX29wZXJhdGlvbl9jb3VudBKGAQoNcmVzcG9uc2VfY29kZRp1T3BlcmF0aW9uIHJlc3BvbnNlIGNvZGUgc3RyaW5nLCBkZXJpdmVkIGFzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgc3RhdHVzIGNvZGUgKGUuZy4sICdzdWNjZXNzJywgJ3VuYXZhaWxhYmxlJykuGAIgAioBMTLMAUN1bXVsYXRpdmUgY291bnQgb2YgU3RyZWFtaW5nUHVsbCBhY2tub3dsZWRnZSBtZXNzYWdlIG9wZXJhdGlvbnMsIGdyb3VwZWQgYnkgcmVzdWx0LiBGb3IgYSBkZWZpbml0aW9uIG9mIG1lc3NhZ2Ugb3BlcmF0aW9ucywgc2VlIENsb3VkIFB1Yi9TdWIgbWV0cmljIHN1YnNjcmlwdGlvbi9tb2RfYWNrX2RlYWRsaW5lX21lc3NhZ2Vfb3BlcmF0aW9uX2NvdW50LjosU3RyZWFtaW5nUHVsbCBBY2tub3dsZWRnZSBtZXNzYWdlIG9wZXJhdGlvbnNCTXB1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vc3RyZWFtaW5nX3B1bGxfYWNrX21lc3NhZ2Vfb3BlcmF0aW9uX2NvdW50UgoIBBICCDwaAgh4CtUECnhwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vc3RyZWFtaW5nX3B1bGxfYWNrX3JlcXVlc3RfY291bnQSdAoOcmVzcG9uc2VfY2xhc3MaYkEgY2xhc3NpZmljYXRpb24gZ3JvdXAgZm9yIHRoZSByZXNwb25zZSBjb2RlLiBJdCBjYW4gYmUgb25lIG9mIFsnc3VjY2VzcycsICdpbnZhbGlkJywgJ2ludGVybmFsJ10uEoYBCg1yZXNwb25zZV9jb2RlGnVPcGVyYXRpb24gcmVzcG9uc2UgY29kZSBzdHJpbmcsIGRlcml2ZWQgYXMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBzdGF0dXMgY29kZSAoZS5nLiwgJ3N1Y2Nlc3MnLCAndW5hdmFpbGFibGUnKS4YAiACKgExMl5DdW11bGF0aXZlIGNvdW50IG9mIHN0cmVhbWluZyBwdWxsIHJlcXVlc3RzIHdpdGggbm9uLWVtcHR5IGFja25vd2xlZGdlIGlkcywgZ3JvdXBlZCBieSByZXN1bHQuOiJTdHJlYW1pbmdQdWxsIEFja25vd2xlZGdlIHJlcXVlc3RzQkNwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3N0cmVhbWluZ19wdWxsX2Fja19yZXF1ZXN0X2NvdW50UgoIBBICCDwaAgh4CtoECn5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vc3RyZWFtaW5nX3B1bGxfbWVzc2FnZV9vcGVyYXRpb25fY291bnQShgEKDXJlc3BvbnNlX2NvZGUadU9wZXJhdGlvbiByZXNwb25zZSBjb2RlIHN0cmluZywgZGVyaXZlZCBhcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHN0YXR1cyBjb2RlIChlLmcuLCAnc3VjY2VzcycsICd1bmF2YWlsYWJsZScpLhgCIAIqATEyzgFDdW11bGF0aXZlIGNvdW50IG9mIHN0cmVhbWluZyBwdWxsIG1lc3NhZ2Ugb3BlcmF0aW9ucywgZ3JvdXBlZCBieSByZXN1bHQuIEZvciBhIGRlZmluaXRpb24gb2YgbWVzc2FnZSBvcGVyYXRpb25zLCBzZWUgQ2xvdWQgUHViL1N1YiBtZXRyaWMgPGNvZGU+c3Vic2NyaXB0aW9uL21vZF9hY2tfZGVhZGxpbmVfbWVzc2FnZV9vcGVyYXRpb25fY291bnQ8L2NvZGU+LjogU3RyZWFtaW5nUHVsbCBtZXNzYWdlIG9wZXJhdGlvbnNCSXB1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vc3RyZWFtaW5nX3B1bGxfbWVzc2FnZV9vcGVyYXRpb25fY291bnRSCggEEgIIPBoCCHgKiwUKjwFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vc3RyZWFtaW5nX3B1bGxfbW9kX2Fja19kZWFkbGluZV9tZXNzYWdlX29wZXJhdGlvbl9jb3VudBKGAQoNcmVzcG9uc2VfY29kZRp1T3BlcmF0aW9uIHJlc3BvbnNlIGNvZGUgc3RyaW5nLCBkZXJpdmVkIGFzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgc3RhdHVzIGNvZGUgKGUuZy4sICdzdWNjZXNzJywgJ3VuYXZhaWxhYmxlJykuGAIgAioBMTLKAUN1bXVsYXRpdmUgY291bnQgb2YgU3RyZWFtaW5nUHVsbCBNb2RpZnlBY2tEZWFkbGluZSBvcGVyYXRpb25zLCBncm91cGVkIGJ5IHJlc3VsdC4gRm9yIGEgZGVmaW5pdGlvbiBvZiBtZXNzYWdlIG9wZXJhdGlvbnMsIHNlZSBDbG91ZCBQdWIvU3ViIG1ldHJpYyBzdWJzY3JpcHRpb24vbW9kX2Fja19kZWFkbGluZV9tZXNzYWdlX29wZXJhdGlvbl9jb3VudC46MlN0cmVhbWluZ1B1bGwgTW9kaWZ5QWNrRGVhZGxpbmUgbWVzc2FnZSBvcGVyYXRpb25zQlpwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3N0cmVhbWluZ19wdWxsX21vZF9hY2tfZGVhZGxpbmVfbWVzc2FnZV9vcGVyYXRpb25fY291bnRSCggEEgIIPBoCCHgK/wQKhQFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vc3RyZWFtaW5nX3B1bGxfbW9kX2Fja19kZWFkbGluZV9yZXF1ZXN0X2NvdW50EnQKDnJlc3BvbnNlX2NsYXNzGmJBIGNsYXNzaWZpY2F0aW9uIGdyb3VwIGZvciB0aGUgcmVzcG9uc2UgY29kZS4gSXQgY2FuIGJlIG9uZSBvZiBbJ3N1Y2Nlc3MnLCAnaW52YWxpZCcsICdpbnRlcm5hbCddLhKGAQoNcmVzcG9uc2VfY29kZRp1T3BlcmF0aW9uIHJlc3BvbnNlIGNvZGUgc3RyaW5nLCBkZXJpdmVkIGFzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgc3RhdHVzIGNvZGUgKGUuZy4sICdzdWNjZXNzJywgJ3VuYXZhaWxhYmxlJykuGAIgAioBMTJnQ3VtdWxhdGl2ZSBjb3VudCBvZiBzdHJlYW1pbmcgcHVsbCByZXF1ZXN0cyB3aXRoIG5vbi1lbXB0eSBNb2RpZnlBY2tEZWFkbGluZSBmaWVsZHMsIGdyb3VwZWQgYnkgcmVzdWx0LjooU3RyZWFtaW5nUHVsbCBNb2RpZnlBY2tEZWFkbGluZSByZXF1ZXN0c0JQcHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9zdHJlYW1pbmdfcHVsbF9tb2RfYWNrX2RlYWRsaW5lX3JlcXVlc3RfY291bnRSCggEEgIIPBoCCHgKpgQKdXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3N1YnNjcmlwdGlvbi9zdHJlYW1pbmdfcHVsbF9yZXNwb25zZV9jb3VudBJ0Cg5yZXNwb25zZV9jbGFzcxpiQSBjbGFzc2lmaWNhdGlvbiBncm91cCBmb3IgdGhlIHJlc3BvbnNlIGNvZGUuIEl0IGNhbiBiZSBvbmUgb2YgWydzdWNjZXNzJywgJ2ludmFsaWQnLCAnaW50ZXJuYWwnXS4ShgEKDXJlc3BvbnNlX2NvZGUadU9wZXJhdGlvbiByZXNwb25zZSBjb2RlIHN0cmluZywgZGVyaXZlZCBhcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHN0YXR1cyBjb2RlIChlLmcuLCAnc3VjY2VzcycsICd1bmF2YWlsYWJsZScpLhgCIAIqATEyQEN1bXVsYXRpdmUgY291bnQgb2Ygc3RyZWFtaW5nIHB1bGwgcmVzcG9uc2VzLCBncm91cGVkIGJ5IHJlc3VsdC46F1N0cmVhbWluZ1B1bGwgcmVzcG9uc2VzQkBwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3N0cmVhbWluZ19wdWxsX3Jlc3BvbnNlX2NvdW50UgoIBBICCDwaAgh4CvcCCm9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS9zdWJzY3JpcHRpb24vdW5hY2tlZF9ieXRlc19ieV9yZWdpb24SOwoGcmVnaW9uGjFUaGUgQ2xvdWQgcmVnaW9uIGluIHdoaWNoIG1lc3NhZ2VzIGFyZSBwZXJzaXN0ZWQuGAEgAioCQnkyXlRvdGFsIGJ5dGUgc2l6ZSBvZiB0aGUgdW5hY2tub3dsZWRnZWQgbWVzc2FnZXMgaW4gYSBzdWJzY3JpcHRpb24sIGJyb2tlbiBkb3duIGJ5IENsb3VkIHJlZ2lvbi46F1VuYWNrZWQgYnl0ZXMgYnkgcmVnaW9uQjpwdWJzdWIuZ29vZ2xlYXBpcy5jb20vc3Vic2NyaXB0aW9uL3VuYWNrZWRfYnl0ZXNfYnlfcmVnaW9uUgoIAhICCDwaAgh4CsgDClpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS90b3BpYy9ieXRlX2Nvc3QSLgoOb3BlcmF0aW9uX3R5cGUaHFR5cGUgb2Ygb3BlcmF0aW9uIHBlcmZvcm1lZC4SlAEKDXJlc3BvbnNlX2NvZGUaggFPcGVyYXRpb24gcmVzcG9uc2UgY29kZSBzdHJpbmcsIGRlcml2ZWQgYXMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBzdGF0dXMgY29kZSAoZS5nLiwgJ3N1Y2Nlc3MnLCAnbm90X2ZvdW5kJywgJ3VuYXZhaWxhYmxlJykuGAIgAioCQnkyVkNvc3Qgb2Ygb3BlcmF0aW9ucywgbWVhc3VyZWQgaW4gYnl0ZXMuIFRoaXMgaXMgdXNlZCB0byBtZWFzdXJlIHV0aWxpemF0aW9uIGZvciBxdW90YXMuOg9Ub3BpYyBieXRlIGNvc3RCJXB1YnN1Yi5nb29nbGVhcGlzLmNvbS90b3BpYy9ieXRlX2Nvc3RSCwgEEgIIPBoDCPABCtUDCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS90b3BpYy9jb25maWdfdXBkYXRlc19jb3VudBKUAQoNcmVzcG9uc2VfY29kZRqCAU9wZXJhdGlvbiByZXNwb25zZSBjb2RlIHN0cmluZywgZGVyaXZlZCBhcyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHN0YXR1cyBjb2RlIChlLmcuLCAnc3VjY2VzcycsICdub3RfZm91bmQnLCAndW5hdmFpbGFibGUnKS4SLgoOb3BlcmF0aW9uX3R5cGUaHFR5cGUgb2Ygb3BlcmF0aW9uIHBlcmZvcm1lZC4YAiACKgExMlBDdW11bGF0aXZlIGNvdW50IG9mIGNvbmZpZ3VyYXRpb24gY2hhbmdlcywgZ3JvdXBlZCBieSBvcGVyYXRpb24gdHlwZSBhbmQgcmVzdWx0LjoNVG9waWMgdXBkYXRlc0IwcHVic3ViLmdvb2dsZWFwaXMuY29tL3RvcGljL2NvbmZpZ191cGRhdGVzX2NvdW50UgsIBBICCDwaAwjwAQrpAQpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vdG9waWMvbWVzc2FnZV9zaXplcxgCIAUqAkJ5MjFEaXN0cmlidXRpb24gb2YgcHVibGlzaCBtZXNzYWdlIHNpemVzIChpbiBieXRlcykuOhRQdWJsaXNoIG1lc3NhZ2Ugc2l6ZUIpcHVic3ViLmdvb2dsZWFwaXMuY29tL3RvcGljL21lc3NhZ2Vfc2l6ZXNSCwgEEgIIPBoDCPABCoEDCnZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS90b3BpYy9udW1fcmV0YWluZWRfYWNrZWRfbWVzc2FnZXNfYnlfcmVnaW9uEjsKBnJlZ2lvbhoxVGhlIENsb3VkIHJlZ2lvbiBpbiB3aGljaCBtZXNzYWdlcyBhcmUgcGVyc2lzdGVkLhgBIAIqATEyUU51bWJlciBvZiBhY2tub3dsZWRnZWQgbWVzc2FnZXMgcmV0YWluZWQgaW4gYSB0b3BpYywgYnJva2VuIGRvd24gYnkgQ2xvdWQgcmVnaW9uLjohUmV0YWluZWQgYWNrZWQgbWVzc2FnZXMgYnkgcmVnaW9uQkFwdWJzdWIuZ29vZ2xlYXBpcy5jb20vdG9waWMvbnVtX3JldGFpbmVkX2Fja2VkX21lc3NhZ2VzX2J5X3JlZ2lvblIKCAISAgg8GgIIeArlAgpvcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vdG9waWMvbnVtX3VuYWNrZWRfbWVzc2FnZXNfYnlfcmVnaW9uEjsKBnJlZ2lvbhoxVGhlIENsb3VkIHJlZ2lvbiBpbiB3aGljaCBtZXNzYWdlcyBhcmUgcGVyc2lzdGVkLhgBIAIqATEySk51bWJlciBvZiB1bmFja25vd2xlZGdlZCBtZXNzYWdlcyBpbiBhIHRvcGljLCBicm9rZW4gZG93biBieSBDbG91ZCByZWdpb24uOhpVbmFja2VkIG1lc3NhZ2VzIGJ5IHJlZ2lvbkI6cHVic3ViLmdvb2dsZWFwaXMuY29tL3RvcGljL251bV91bmFja2VkX21lc3NhZ2VzX2J5X3JlZ2lvblIKCAISAgg8GgIIeAqrAwp8cHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9wdWJzdWIuZ29vZ2xlYXBpcy5jb20vdG9waWMvb2xkZXN0X3JldGFpbmVkX2Fja2VkX21lc3NhZ2VfYWdlX2J5X3JlZ2lvbhI7CgZyZWdpb24aMVRoZSBDbG91ZCByZWdpb24gaW4gd2hpY2ggbWVzc2FnZXMgYXJlIHBlcnNpc3RlZC4YASACKgFzMmVBZ2UgKGluIHNlY29uZHMpIG9mIHRoZSBvbGRlc3QgYWNrbm93bGVkZ2VkIG1lc3NhZ2UgcmV0YWluZWQgaW4gYSB0b3BpYywgYnJva2VuIGRvd24gYnkgQ2xvdWQgcmVnaW9uLjorT2xkZXN0IHJldGFpbmVkIGFja2VkIG1lc3NhZ2UgYWdlIGJ5IHJlZ2lvbkJHcHVic3ViLmdvb2dsZWFwaXMuY29tL3RvcGljL29sZGVzdF9yZXRhaW5lZF9hY2tlZF9tZXNzYWdlX2FnZV9ieV9yZWdpb25SCggCEgIIPBoCCHgKjwMKdXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3RvcGljL29sZGVzdF91bmFja2VkX21lc3NhZ2VfYWdlX2J5X3JlZ2lvbhI7CgZyZWdpb24aMVRoZSBDbG91ZCByZWdpb24gaW4gd2hpY2ggbWVzc2FnZXMgYXJlIHBlcnNpc3RlZC4YASACKgFzMl5BZ2UgKGluIHNlY29uZHMpIG9mIHRoZSBvbGRlc3QgdW5hY2tub3dsZWRnZWQgbWVzc2FnZSBpbiBhIHRvcGljLCBicm9rZW4gZG93biBieSBDbG91ZCByZWdpb24uOiRPbGRlc3QgdW5hY2tlZCBtZXNzYWdlIGFnZSBieSByZWdpb25CQHB1YnN1Yi5nb29nbGVhcGlzLmNvbS90b3BpYy9vbGRlc3RfdW5hY2tlZF9tZXNzYWdlX2FnZV9ieV9yZWdpb25SCggCEgIIPBoCCHgK/gIKb3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3RvcGljL3JldGFpbmVkX2Fja2VkX2J5dGVzX2J5X3JlZ2lvbhI7CgZyZWdpb24aMVRoZSBDbG91ZCByZWdpb24gaW4gd2hpY2ggbWVzc2FnZXMgYXJlIHBlcnNpc3RlZC4YASACKgJCeTJeVG90YWwgYnl0ZSBzaXplIG9mIHRoZSBhY2tub3dsZWRnZWQgbWVzc2FnZXMgcmV0YWluZWQgaW4gYSB0b3BpYywgYnJva2VuIGRvd24gYnkgQ2xvdWQgcmVnaW9uLjoeUmV0YWluZWQgYWNrZWQgYnl0ZXMgYnkgcmVnaW9uQjpwdWJzdWIuZ29vZ2xlYXBpcy5jb20vdG9waWMvcmV0YWluZWRfYWNrZWRfYnl0ZXNfYnlfcmVnaW9uUgoIAhICCDwaAgh4Cq0ECm1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3B1YnN1Yi5nb29nbGVhcGlzLmNvbS90b3BpYy9zZW5kX21lc3NhZ2Vfb3BlcmF0aW9uX2NvdW50EpQBCg1yZXNwb25zZV9jb2RlGoIBT3BlcmF0aW9uIHJlc3BvbnNlIGNvZGUgc3RyaW5nLCBkZXJpdmVkIGFzIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgc3RhdHVzIGNvZGUgKGUuZy4sICdzdWNjZXNzJywgJ25vdF9mb3VuZCcsICd1bmF2YWlsYWJsZScpLhgCIAIqATEyugFDdW11bGF0aXZlIGNvdW50IG9mIHB1Ymxpc2ggbWVzc2FnZSBvcGVyYXRpb25zLCBncm91cGVkIGJ5IHJlc3VsdC4gRm9yIGEgZGVmaW5pdGlvbiBvZiBtZXNzYWdlIG9wZXJhdGlvbnMsIHNlZSBDbG91ZCBQdWIvU3ViIG1ldHJpYyBzdWJzY3JpcHRpb24vbW9kX2Fja19kZWFkbGluZV9tZXNzYWdlX29wZXJhdGlvbl9jb3VudC46GlB1Ymxpc2ggbWVzc2FnZSBvcGVyYXRpb25zQjhwdWJzdWIuZ29vZ2xlYXBpcy5jb20vdG9waWMvc2VuZF9tZXNzYWdlX29wZXJhdGlvbl9jb3VudFILCAQSAgg8GgMI8AEKgQQKY3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3RvcGljL3NlbmRfcmVxdWVzdF9jb3VudBJ0Cg5yZXNwb25zZV9jbGFzcxpiQSBjbGFzc2lmaWNhdGlvbiBncm91cCBmb3IgdGhlIHJlc3BvbnNlIGNvZGUuIEl0IGNhbiBiZSBvbmUgb2YgWydzdWNjZXNzJywgJ2ludmFsaWQnLCAnaW50ZXJuYWwnXS4SlAEKDXJlc3BvbnNlX2NvZGUaggFPcGVyYXRpb24gcmVzcG9uc2UgY29kZSBzdHJpbmcsIGRlcml2ZWQgYXMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBzdGF0dXMgY29kZSAoZS5nLiwgJ3N1Y2Nlc3MnLCAnbm90X2ZvdW5kJywgJ3VuYXZhaWxhYmxlJykuGAIgAioBMTI4Q3VtdWxhdGl2ZSBjb3VudCBvZiBwdWJsaXNoIHJlcXVlc3RzLCBncm91cGVkIGJ5IHJlc3VsdC46EFB1Ymxpc2ggcmVxdWVzdHNCLnB1YnN1Yi5nb29nbGVhcGlzLmNvbS90b3BpYy9zZW5kX3JlcXVlc3RfY291bnRSCggEEgIIPBoCCHgK4gIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcHVic3ViLmdvb2dsZWFwaXMuY29tL3RvcGljL3VuYWNrZWRfYnl0ZXNfYnlfcmVnaW9uEjsKBnJlZ2lvbhoxVGhlIENsb3VkIHJlZ2lvbiBpbiB3aGljaCBtZXNzYWdlcyBhcmUgcGVyc2lzdGVkLhgBIAIqAkJ5MldUb3RhbCBieXRlIHNpemUgb2YgdGhlIHVuYWNrbm93bGVkZ2VkIG1lc3NhZ2VzIGluIGEgdG9waWMsIGJyb2tlbiBkb3duIGJ5IENsb3VkIHJlZ2lvbi46F1VuYWNrZWQgYnl0ZXMgYnkgcmVnaW9uQjNwdWJzdWIuZ29vZ2xlYXBpcy5jb20vdG9waWMvdW5hY2tlZF9ieXRlc19ieV9yZWdpb25SCggCEgIIPBoCCHgKwQEKWXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcmVkaXMuZ29vZ2xlYXBpcy5jb20vY2xpZW50cy9ibG9ja2VkGAEgAioBMTIZTnVtYmVyIG9mIGJsb2NrZWQgY2xpZW50czoPQmxvY2tlZCBDbGllbnRzQiRyZWRpcy5nb29nbGVhcGlzLmNvbS9jbGllbnRzL2Jsb2NrZWRSCwgDEgIIPBoDCLQBCsoBCltwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3JlZGlzLmdvb2dsZWFwaXMuY29tL2NsaWVudHMvY29ubmVjdGVkGAEgAioBMTIcTnVtYmVyIG9mIGNsaWVudCBjb25uZWN0aW9uczoRQ29ubmVjdGVkIENsaWVudHNCJnJlZGlzLmdvb2dsZWFwaXMuY29tL2NsaWVudHMvY29ubmVjdGVkUgsIAxICCDwaAwi0AQrgAQpYcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yZWRpcy5nb29nbGVhcGlzLmNvbS9jb21tYW5kcy9jYWxscxIcCgNjbWQaFVRoZSBjb21tYW5kIGV4ZWN1dGVkLhgCIAIqATEyJlRvdGFsIG51bWJlciBvZiBjYWxscyBmb3IgdGhpcyBjb21tYW5kOgVDYWxsc0IjcmVkaXMuZ29vZ2xlYXBpcy5jb20vY29tbWFuZHMvY2FsbHNSCwgDEgIIPBoDCLQBCp8CCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3JlZGlzLmdvb2dsZWFwaXMuY29tL2NvbW1hbmRzL3RvdGFsX3RpbWUSHAoDY21kGhVUaGUgY29tbWFuZCBleGVjdXRlZC4YAiACKgJ1czJMVGhlIGFtb3VudCBvZiB0aW1lIGluIG1pY3Jvc2Vjb25kcyB0aGF0IHRoaXMgY29tbWFuZCB0b29rIGluIHRoZSBsYXN0IHNlY29uZDoTVG90YWwgVGltZSBvZiBDYWxsc0IocmVkaXMuZ29vZ2xlYXBpcy5jb20vY29tbWFuZHMvdG90YWxfdGltZVILCAMSAgg8GgMItAEKgAIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcmVkaXMuZ29vZ2xlYXBpcy5jb20vY29tbWFuZHMvdXNlY19wZXJfY2FsbBIcCgNjbWQaFVRoZSBjb21tYW5kIGV4ZWN1dGVkLhgBIAMqATEyLkF2ZXJhZ2UgdGltZSBwZXIgY2FsbCBvdmVyIDEgbWludXRlIGJ5IGNvbW1hbmQ6DVRpbWUgcGVyIENhbGxCK3JlZGlzLmdvb2dsZWFwaXMuY29tL2NvbW1hbmRzL3VzZWNfcGVyX2NhbGxSCwgDEgIIPBoDCLQBCvwBClpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3JlZGlzLmdvb2dsZWFwaXMuY29tL2tleXNwYWNlL2F2Z190dGwSLgoCZGIaKFRoZSBpbmRleCBvZiB0aGUgZGF0YWJhc2UsIGRlZmF1bHQgb2YgMC4YASADKgJtczIlQXZlcmFnZSBUVEwgZm9yIGtleXMgaW4gdGhpcyBkYXRhYmFzZToLQXZlcmFnZSBUVExCJXJlZGlzLmdvb2dsZWFwaXMuY29tL2tleXNwYWNlL2F2Z190dGxSCwgDEgIIPBoDCLQBCu8BCldwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3JlZGlzLmdvb2dsZWFwaXMuY29tL2tleXNwYWNlL2tleXMSLgoCZGIaKFRoZSBpbmRleCBvZiB0aGUgZGF0YWJhc2UsIGRlZmF1bHQgb2YgMC4YASACKgExMiZOdW1iZXIgb2Yga2V5cyBzdG9yZWQgaW4gdGhpcyBkYXRhYmFzZToES2V5c0IicmVkaXMuZ29vZ2xlYXBpcy5jb20va2V5c3BhY2Uva2V5c1ILCAMSAgg8GgMItAEKpQIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcmVkaXMuZ29vZ2xlYXBpcy5jb20va2V5c3BhY2Uva2V5c193aXRoX2V4cGlyYXRpb24SLgoCZGIaKFRoZSBpbmRleCBvZiB0aGUgZGF0YWJhc2UsIGRlZmF1bHQgb2YgMC4YASACKgExMjJOdW1iZXIgb2Yga2V5cyB3aXRoIGFuIGV4cGlyYXRpb24gaW4gdGhpcyBkYXRhYmFzZToORXhwaXJhYmxlIEtleXNCMnJlZGlzLmdvb2dsZWFwaXMuY29tL2tleXNwYWNlL2tleXNfd2l0aF9leHBpcmF0aW9uUgsIAxICCDwaAwi0AQrqAQpscHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yZWRpcy5nb29nbGVhcGlzLmNvbS9wZXJzaXN0ZW5jZS9yZGIvYmdzYXZlX2luX3Byb2dyZXNzGAEgASoBMTImRmxhZyBpbmRpY2F0aW5nIGEgUkRCIHNhdmUgaXMgb24tZ29pbmc6DlBlcnNpc3RpbmcgUkRCQjdyZWRpcy5nb29nbGVhcGlzLmNvbS9wZXJzaXN0ZW5jZS9yZGIvYmdzYXZlX2luX3Byb2dyZXNzUgIIAwqjAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yZWRpcy5nb29nbGVhcGlzLmNvbS9yZXBsaWNhdGlvbi9tYXN0ZXIvc2xhdmVzL2xhZxIzCgVzbGF2ZRoqVGhlIGluZGV4IG9mIHNsYXZlIG9uIGEgcGFydGljdWxhciBtYXN0ZXIuGAEgAioCQnkyK1RoZSBudW1iZXIgb2YgYnl0ZXMgdGhhdCByZXBsaWNhIGlzIGJlaGluZC46DUJ5dGVzIGxhZ2dpbmdCMnJlZGlzLmdvb2dsZWFwaXMuY29tL3JlcGxpY2F0aW9uL21hc3Rlci9zbGF2ZXMvbGFnUgsIAxICCDwaAwi0AQrOAgpqcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yZWRpcy5nb29nbGVhcGlzLmNvbS9yZXBsaWNhdGlvbi9tYXN0ZXIvc2xhdmVzL29mZnNldBIzCgVzbGF2ZRoqVGhlIGluZGV4IG9mIHNsYXZlIG9uIGEgcGFydGljdWxhciBtYXN0ZXIuGAEgAioCQnkyPFRoZSBudW1iZXIgb2YgYnl0ZXMgdGhhdCBoYXZlIGJlZW4gYWNrbm93bGVkZ2VkIGJ5IHJlcGxpY2FzLjohUmVwbGljYXRpb24gYnl0ZSBvZmZzZXQgKFJlcGxpY2EpQjVyZWRpcy5nb29nbGVhcGlzLmNvbS9yZXBsaWNhdGlvbi9tYXN0ZXIvc2xhdmVzL29mZnNldFILCAMSAgg8GgMItAEK0gIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcmVkaXMuZ29vZ2xlYXBpcy5jb20vcmVwbGljYXRpb24vbWFzdGVyX3JlcGxfb2Zmc2V0GAEgAioCQnkyelRoZSBudW1iZXIgb2YgYnl0ZXMgdGhhdCBtYXN0ZXIgaGFzIHByb2R1Y2VkIGFuZCBzZW50IHRvIHJlcGxpY2FzLiBUbyBiZSBjb21wYXJlZCB3aXRoIHJlcGxpY2F0aW9uIGJ5dGUgb2Zmc2V0IG9mIHJlcGxpY2EuOiBSZXBsaWNhdGlvbiBieXRlIG9mZnNldCAoTWFzdGVyKUIzcmVkaXMuZ29vZ2xlYXBpcy5jb20vcmVwbGljYXRpb24vbWFzdGVyX3JlcGxfb2Zmc2V0UgsIAxICCDwaAwi0AQrrAgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yZWRpcy5nb29nbGVhcGlzLmNvbS9yZXBsaWNhdGlvbi9vZmZzZXRfZGlmZhgBIAIqAkJ5MqcBVGhlIG51bWJlciBvZiBieXRlcyB0aGF0IGhhdmUgbm90IGJlZW4gcmVwbGljYXRlZCB0byB0aGUgcmVwbGljYS4gVGhpcyBpcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHJlcGxpY2F0aW9uIGJ5dGUgb2Zmc2V0IChtYXN0ZXIpIGFuZCByZXBsaWNhdGlvbiBieXRlIG9mZnNldCAocmVwbGljYSk6GUJ5dGVzIHBlbmRpbmcgcmVwbGljYXRpb25CLHJlZGlzLmdvb2dsZWFwaXMuY29tL3JlcGxpY2F0aW9uL29mZnNldF9kaWZmUgsIAxICCDwaAwi0AQr5AQpacHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yZWRpcy5nb29nbGVhcGlzLmNvbS9yZXBsaWNhdGlvbi9yb2xlGAEgAioBMTJVUmV0dXJucyBhIHZhbHVlIGluZGljYXRpbmcgdGhlIG5vZGUgcm9sZS4gMSBpbmRpY2F0ZXMgbWFzdGVyIGFuZCAwIGluZGljYXRlcyByZXBsaWNhLjoJTm9kZSBSb2xlQiVyZWRpcy5nb29nbGVhcGlzLmNvbS9yZXBsaWNhdGlvbi9yb2xlUgsIAxICCDwaAwi0AQqsAQpXcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yZWRpcy5nb29nbGVhcGlzLmNvbS9zZXJ2ZXIvdXB0aW1lGAEgAioBczIRVXB0aW1lIGluIHNlY29uZHM6BlVwdGltZUIicmVkaXMuZ29vZ2xlYXBpcy5jb20vc2VydmVyL3VwdGltZVILCAMSAgg8GgMItAEK0QEKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcmVkaXMuZ29vZ2xlYXBpcy5jb20vc3RhdHMvY2FjaGVfaGl0X3JhdGlvGAEgAyoBMTIdQ2FjaGUgSGl0IHJhdGlvIGFzIGEgZnJhY3Rpb246D0NhY2hlIEhpdCByYXRpb0IqcmVkaXMuZ29vZ2xlYXBpcy5jb20vc3RhdHMvY2FjaGVfaGl0X3JhdGlvUgsIAxICCDwaAwi0AQr1AQphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yZWRpcy5nb29nbGVhcGlzLmNvbS9zdGF0cy9jb25uZWN0aW9ucy90b3RhbBgCIAIqATEyMlRvdGFsIG51bWJlciBvZiBjb25uZWN0aW9ucyBhY2NlcHRlZCBieSB0aGUgc2VydmVyOhpUb3RhbCBDb25uZWN0aW9ucyBSZWNlaXZlZEIscmVkaXMuZ29vZ2xlYXBpcy5jb20vc3RhdHMvY29ubmVjdGlvbnMvdG90YWxSCwgDEgIIPBoDCLQBCqMDCl9wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3JlZGlzLmdvb2dsZWFwaXMuY29tL3N0YXRzL2NwdV91dGlsaXphdGlvbhItCgljcHUvc3BhY2UaIFRoZSBzcGFjZSB0aGF0IENQVSB3YXMgc3BlbnQgaW4uEksKEGNwdS9yZWxhdGlvbnNoaXAaN1RoZSBwYXJlbnQvY2hpbGQgcmVsYXRpb25zaGlwIG9mIHRoZSBwcm9jZXNzIHVzaW5nIGNwdS4YAiADKgZDeWNsZXMydUNQVSwgaW4gdXRpbGl6YXRpb24gcGVyY2VudGFnZSwgY29uc3VtZWQgYnkgdGhlIFJlZGlzIHNlcnZlciBicm9rZW4gZG93biBieSBTeXN0ZW0vVXNlciBhbmQgUGFyZW50L0NoaWxkIHJlbGF0aW9uc2hpcDoIQ1BVKHN5cylCKnJlZGlzLmdvb2dsZWFwaXMuY29tL3N0YXRzL2NwdV91dGlsaXphdGlvblILCAMSAgg8GgMItAEK2AEKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcmVkaXMuZ29vZ2xlYXBpcy5jb20vc3RhdHMvZXZpY3RlZF9rZXlzGAIgAioBMTItTnVtYmVyIG9mIGV2aWN0ZWQga2V5cyBkdWUgdG8gbWF4bWVtb3J5IGxpbWl0OgxFdmljdGVkIEtleXNCJ3JlZGlzLmdvb2dsZWFwaXMuY29tL3N0YXRzL2V2aWN0ZWRfa2V5c1ILCAMSAgg8GgMItAEK0AEKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcmVkaXMuZ29vZ2xlYXBpcy5jb20vc3RhdHMvZXhwaXJlZF9rZXlzGAIgAioBMTIlVG90YWwgbnVtYmVyIG9mIGtleSBleHBpcmF0aW9uIGV2ZW50czoMRXhwaXJlZCBLZXlzQidyZWRpcy5nb29nbGVhcGlzLmNvbS9zdGF0cy9leHBpcmVkX2tleXNSCwgDEgIIPBoDCLQBCt8BCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3JlZGlzLmdvb2dsZWFwaXMuY29tL3N0YXRzL2tleXNwYWNlX2hpdHMYAiACKgExMjpOdW1iZXIgb2Ygc3VjY2Vzc2Z1bCBsb29rdXAgb2Yga2V5cyBpbiB0aGUgbWFpbiBkaWN0aW9uYXJ5OgRIaXRzQihyZWRpcy5nb29nbGVhcGlzLmNvbS9zdGF0cy9rZXlzcGFjZV9oaXRzUgsIAxICCDwaAwi0AQrhAQpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yZWRpcy5nb29nbGVhcGlzLmNvbS9zdGF0cy9rZXlzcGFjZV9taXNzZXMYAiACKgExMjZOdW1iZXIgb2YgZmFpbGVkIGxvb2t1cCBvZiBrZXlzIGluIHRoZSBtYWluIGRpY3Rpb25hcnk6Bk1pc3Nlc0IqcmVkaXMuZ29vZ2xlYXBpcy5jb20vc3RhdHMva2V5c3BhY2VfbWlzc2VzUgsIAxICCDwaAwi0AQrgAQpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yZWRpcy5nb29nbGVhcGlzLmNvbS9zdGF0cy9tZW1vcnkvbWF4bWVtb3J5GAEgAioCQnkyKk1heGltdW0gYW1vdW50IG9mIG1lbW9yeSBSZWRpcyBjYW4gY29uc3VtZToOTWF4aW11bSBNZW1vcnlCK3JlZGlzLmdvb2dsZWFwaXMuY29tL3N0YXRzL21lbW9yeS9tYXhtZW1vcnlSCwgDEgIIPBoDCLQBCpACCnBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3JlZGlzLmdvb2dsZWFwaXMuY29tL3N0YXRzL21lbW9yeS9zeXN0ZW1fbWVtb3J5X3VzYWdlX3JhdGlvGAEgAyoBMTIwTWVtb3J5IHVzYWdlIGFzIGEgcmF0aW8gb2YgbWF4aW11bSBzeXN0ZW0gbWVtb3J5OhlTeXN0ZW0gTWVtb3J5IFVzYWdlIFJhdGlvQjtyZWRpcy5nb29nbGVhcGlzLmNvbS9zdGF0cy9tZW1vcnkvc3lzdGVtX21lbW9yeV91c2FnZV9yYXRpb1ILCAMSAgg8GgMItAEK0wEKXHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcmVkaXMuZ29vZ2xlYXBpcy5jb20vc3RhdHMvbWVtb3J5L3VzYWdlGAEgAioCQnkyKFRvdGFsIG51bWJlciBvZiBieXRlcyBhbGxvY2F0ZWQgYnkgUmVkaXM6C1VzZWQgTWVtb3J5QidyZWRpcy5nb29nbGVhcGlzLmNvbS9zdGF0cy9tZW1vcnkvdXNhZ2VSCwgDEgIIPBoDCLQBCuYBCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3JlZGlzLmdvb2dsZWFwaXMuY29tL3N0YXRzL21lbW9yeS91c2FnZV9yYXRpbxgBIAMqATEyKU1lbW9yeSB1c2FnZSBhcyBhIHJhdGlvIG9mIG1heGltdW0gbWVtb3J5OhJNZW1vcnkgVXNhZ2UgUmF0aW9CLXJlZGlzLmdvb2dsZWFwaXMuY29tL3N0YXRzL21lbW9yeS91c2FnZV9yYXRpb1ILCAMSAgg8GgMItAEK8QIKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcmVkaXMuZ29vZ2xlYXBpcy5jb20vc3RhdHMvbmV0d29ya190cmFmZmljEkMKDW5ldC9kaXJlY3Rpb24aMlRoZSBkaXJlY3Rpb24gb2YgdGhlIHRyYWZmaWMsIGluYm91bmQgb3Igb3V0Ym91bmQuGAIgAioCQnkycFRvdGFsIG51bWJlciBvZiBieXRlcyBzZW50IHRvL2Zyb20gcmVkaXMgKGluY2x1ZGVzIGJ5dGVzIGZyb20gY29tbWFuZHMgdGhlbXNlbHZlcywgcGF5bG9hZCBkYXRhLCBhbmQgZGVsaW1pdGVycyk6FlRvdGFsIHRyYWZmaWMgdG8gUmVkaXNCKnJlZGlzLmdvb2dsZWFwaXMuY29tL3N0YXRzL25ldHdvcmtfdHJhZmZpY1ILCAMSAgg8GgMItAEK7wEKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcmVkaXMuZ29vZ2xlYXBpcy5jb20vc3RhdHMvcHVic3ViL2NoYW5uZWxzGAEgAioBMTI7R2xvYmFsIG51bWJlciBvZiBwdWIvc3ViIGNoYW5uZWxzIHdpdGggY2xpZW50IHN1YnNjcmlwdGlvbnM6D1B1YnN1YiBDaGFubmVsc0IqcmVkaXMuZ29vZ2xlYXBpcy5jb20vc3RhdHMvcHVic3ViL2NoYW5uZWxzUgsIAxICCDwaAwi0AQruAQpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yZWRpcy5nb29nbGVhcGlzLmNvbS9zdGF0cy9wdWJzdWIvcGF0dGVybnMYASACKgExMjpHbG9iYWwgbnVtYmVyIG9mIHB1Yi9zdWIgcGF0dGVybiB3aXRoIGNsaWVudCBzdWJzY3JpcHRpb25zOg9QdWJzdWIgUGF0dGVybnNCKnJlZGlzLmdvb2dsZWFwaXMuY29tL3N0YXRzL3B1YnN1Yi9wYXR0ZXJuc1ILCAMSAgg8GgMItAEKhQIKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcmVkaXMuZ29vZ2xlYXBpcy5jb20vc3RhdHMvcmVqZWN0X2Nvbm5lY3Rpb25zX2NvdW50GAIgAioBMTI6TnVtYmVyIG9mIGNvbm5lY3Rpb25zIHJlamVjdGVkIGJlY2F1c2Ugb2YgbWF4Y2xpZW50cyBsaW1pdDoUUmVqZWN0ZWQgQ29ubmVjdGlvbnNCM3JlZGlzLmdvb2dsZWFwaXMuY29tL3N0YXRzL3JlamVjdF9jb25uZWN0aW9uc19jb3VudFILCAMSAgg8GgMItAEK9wEKZXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcm91dGVyLmdvb2dsZWFwaXMuY29tL2Jlc3RfcmVjZWl2ZWRfcm91dGVzX2NvdW50GAEgAioBMTIxQ3VycmVudCBudW1iZXIgb2YgYmVzdCByb3V0ZXMgcmVjZWl2ZWQgYnkgcm91dGVyLjoVUmVjZWl2ZWQgcm91dGVzIGNvdW50QjByb3V0ZXIuZ29vZ2xlYXBpcy5jb20vYmVzdF9yZWNlaXZlZF9yb3V0ZXNfY291bnRSCwgEEgIIPBoDCLQBCqoCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3JvdXRlci5nb29nbGVhcGlzLmNvbS9iZ3AvcmVjZWl2ZWRfcm91dGVzX2NvdW50Ei0KDWJncF9wZWVyX25hbWUaHFRoZSBuYW1lIG9mIHRoZSBiZ3Agc2Vzc2lvbi4YASACKgExMjNDdXJyZW50IG51bWJlciBvZiByb3V0ZXMgcmVjZWl2ZWQgb24gYSBiZ3Agc2Vzc2lvbi46GUJHUCByZWNlaXZlZCByb3V0ZXMgY291bnRCL3JvdXRlci5nb29nbGVhcGlzLmNvbS9iZ3AvcmVjZWl2ZWRfcm91dGVzX2NvdW50UgsIBBICCDwaAwi0AQqaAgpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yb3V0ZXIuZ29vZ2xlYXBpcy5jb20vYmdwL3NlbnRfcm91dGVzX2NvdW50Ei0KDWJncF9wZWVyX25hbWUaHFRoZSBuYW1lIG9mIHRoZSBiZ3Agc2Vzc2lvbi4YASACKgExMi9DdXJyZW50IG51bWJlciBvZiByb3V0ZXMgc2VudCBvbiBhIGJncCBzZXNzaW9uLjoVQkdQIHNlbnQgcm91dGVzIGNvdW50Qityb3V0ZXIuZ29vZ2xlYXBpcy5jb20vYmdwL3NlbnRfcm91dGVzX2NvdW50UgsIBBICCDwaAwi0AQqNAgpZcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9yb3V0ZXIuZ29vZ2xlYXBpcy5jb20vYmdwL3Nlc3Npb25fdXASLQoNYmdwX3BlZXJfbmFtZRocVGhlIG5hbWUgb2YgdGhlIGJncCBzZXNzaW9uLhgBIAIqATEyM0luZGljYXRvciBmb3Igc3VjY2Vzc2Z1bCBiZ3Agc2Vzc2lvbiBlc3RhYmxpc2htZW50LjoSQkdQIHNlc3Npb24gc3RhdHVzQiRyb3V0ZXIuZ29vZ2xlYXBpcy5jb20vYmdwL3Nlc3Npb25fdXBSCwgEEgIIPBoDCLQBCvUBCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3JvdXRlci5nb29nbGVhcGlzLmNvbS9iZ3Bfc2Vzc2lvbnNfZG93bl9jb3VudBgBIAIqATEyM051bWJlciBvZiBCR1Agc2Vzc2lvbnMgb24gdGhlIHJvdXRlciB0aGF0IGFyZSBkb3duLjoXQkdQIHNlc3Npb25zIGRvd24gY291bnRCLXJvdXRlci5nb29nbGVhcGlzLmNvbS9iZ3Bfc2Vzc2lvbnNfZG93bl9jb3VudFILCAQSAgg8GgMItAEK7QEKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcm91dGVyLmdvb2dsZWFwaXMuY29tL2JncF9zZXNzaW9uc191cF9jb3VudBgBIAIqATEyMU51bWJlciBvZiBCR1Agc2Vzc2lvbnMgb24gdGhlIHJvdXRlciB0aGF0IGFyZSB1cC46FUJHUCBzZXNzaW9ucyB1cCBjb3VudEIrcm91dGVyLmdvb2dsZWFwaXMuY29tL2JncF9zZXNzaW9uc191cF9jb3VudFILCAQSAgg8GgMItAEKtQEKVHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcm91dGVyLmdvb2dsZWFwaXMuY29tL3JvdXRlcl91cBgBIAIqATEyGVJvdXRlciBzdGF0dXMsIHVwIG9yIGRvd246DVJvdXRlciBzdGF0dXNCH3JvdXRlci5nb29nbGVhcGlzLmNvbS9yb3V0ZXJfdXBSCwgEEgIIPBoDCLQBCtgBClxwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3JvdXRlci5nb29nbGVhcGlzLmNvbS9zZW50X3JvdXRlc19jb3VudBgBIAIqATEyKEN1cnJlbnQgbnVtYmVyIG9mIHJvdXRlcyBzZW50IGJ5IHJvdXRlci46EVNlbnQgcm91dGVzIGNvdW50Qidyb3V0ZXIuZ29vZ2xlYXBpcy5jb20vc2VudF9yb3V0ZXNfY291bnRSCwgEEgIIPBoDCLQBCv0BCmVwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3J1bi5nb29nbGVhcGlzLmNvbS9jb250YWluZXIvY3B1L2FsbG9jYXRpb25fdGltZRgCIAMqAXMyNENvbnRhaW5lciBDUFUgYWxsb2NhdGlvbiBvZiB0aGUgcmV2aXNpb24gaW4gc2Vjb25kcy46GENvbnRhaW5lciBDUFUgQWxsb2NhdGlvbkIwcnVuLmdvb2dsZWFwaXMuY29tL2NvbnRhaW5lci9jcHUvYWxsb2NhdGlvbl90aW1lUgsIAxICCDwaAwi0AQqYAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9ydW4uZ29vZ2xlYXBpcy5jb20vY29udGFpbmVyL21lbW9yeS9hbGxvY2F0aW9uX3RpbWUYAiADKgZHaUJ5LnMyQUNvbnRhaW5lciBtZW1vcnkgYWxsb2NhdGlvbiBvZiB0aGUgcmV2aXNpb24gaW4gR2lnYWJ5dGVzLXNlY29uZHMuOhtDb250YWluZXIgTWVtb3J5IEFsbG9jYXRpb25CM3J1bi5nb29nbGVhcGlzLmNvbS9jb250YWluZXIvbWVtb3J5L2FsbG9jYXRpb25fdGltZVILCAMSAgg8GgMItAEK3QIKVXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvcnVuLmdvb2dsZWFwaXMuY29tL3JlcXVlc3RfY291bnQSLAoNcmVzcG9uc2VfY29kZRobUmVzcG9uc2UgY29kZSBvZiBhIHJlcXVlc3QuEjgKE3Jlc3BvbnNlX2NvZGVfY2xhc3MaIVJlc3BvbnNlIGNvZGUgY2xhc3Mgb2YgYSByZXF1ZXN0LhIsCgVyb3V0ZRojUm91dGUgbmFtZSB0aGF0IGZvcndhcmRzIGEgcmVxdWVzdC4YAiACKgExMilOdW1iZXIgb2YgcmVxdWVzdHMgcmVhY2hpbmcgdGhlIHJldmlzaW9uLjoNUmVxdWVzdCBDb3VudEIgcnVuLmdvb2dsZWFwaXMuY29tL3JlcXVlc3RfY291bnRSCwgDEgIIPBoDCLQBCoUDCllwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3J1bi5nb29nbGVhcGlzLmNvbS9yZXF1ZXN0X2xhdGVuY2llcxIsCg1yZXNwb25zZV9jb2RlGhtSZXNwb25zZSBjb2RlIG9mIGEgcmVxdWVzdC4SOAoTcmVzcG9uc2VfY29kZV9jbGFzcxohUmVzcG9uc2UgY29kZSBjbGFzcyBvZiBhIHJlcXVlc3QuEiwKBXJvdXRlGiNSb3V0ZSBuYW1lIHRoYXQgZm9yd2FyZHMgYSByZXF1ZXN0LhgCIAUqAm1zMkREaXN0cmlidXRpb24gb2YgcmVxdWVzdCB0aW1lcyBpbiBtaWxsaXNlY29uZHMgcmVhY2hpbmcgdGhlIHJldmlzaW9uLjoRUmVxdWVzdCBMYXRlbmNpZXNCJHJ1bi5nb29nbGVhcGlzLmNvbS9yZXF1ZXN0X2xhdGVuY2llc1ILCAMSAgg8GgMItAEKuAYKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc2VydmljZXJ1bnRpbWUuZ29vZ2xlYXBpcy5jb20vYXBpL3JlcXVlc3RfY291bnQSPAoIcHJvdG9jb2waMFRoZSBwcm90b2NvbCBvZiB0aGUgcmVxdWVzdCwgZS5nLiAiaHR0cCIsICJncnBjIhLGAQoNcmVzcG9uc2VfY29kZRq0AVRoZSBIVFRQIHJlc3BvbnNlIGNvZGUgZm9yIEhUVFAgcmVxdWVzdHMsIG9yIEhUVFAgZXF1aXZhbGVudCBjb2RlIGZvciBnUlBDIHJlcXVlc3RzLiBTZWUgY29kZSBtYXBwaW5nIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVhcGlzL2dvb2dsZWFwaXMvYmxvYi9tYXN0ZXIvZ29vZ2xlL3JwYy9jb2RlLnByb3RvLhJ/ChNyZXNwb25zZV9jb2RlX2NsYXNzGmhUaGUgcmVzcG9uc2UgY29kZSBjbGFzcyBmb3IgSFRUUCByZXF1ZXN0cywgb3IgSFRUUCBlcXVpdmFsZW50IGNsYXNzIGZvciBnUlBDIHJlcXVlc3RzLCBlLmcuICIyeHgiLCAiNHh4IhLRAQoQZ3JwY19zdGF0dXNfY29kZRq8AVRoZSBudW1lcmljIGdSUEMgcmVzcG9uc2UgY29kZSBmb3IgZ1JQQyByZXF1ZXN0cywgb3IgZ1JQQyBlcXVpdmFsZW50IGNvZGUgZm9yIEhUVFAgcmVxdWVzdHMuIFNlZSBjb2RlIG1hcHBpbmcgaW4gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZWFwaXMvZ29vZ2xlYXBpcy9ibG9iL21hc3Rlci9nb29nbGUvcnBjL2NvZGUucHJvdG8uGAIgAioBMTIgVGhlIGNvdW50IG9mIGNvbXBsZXRlZCByZXF1ZXN0cy46DVJlcXVlc3QgY291bnRCL3NlcnZpY2VydW50aW1lLmdvb2dsZWFwaXMuY29tL2FwaS9yZXF1ZXN0X2NvdW50UgsIBBICCDwaAwi0AQqIAgpocHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9zZXJ2aWNlcnVudGltZS5nb29nbGVhcGlzLmNvbS9hcGkvcmVxdWVzdF9sYXRlbmNpZXMYAiAFKgFzMkBEaXN0cmlidXRpb24gb2YgbGF0ZW5jaWVzIGluIHNlY29uZHMgZm9yIG5vbi1zdHJlYW1pbmcgcmVxdWVzdHMuOhFSZXF1ZXN0IGxhdGVuY2llc0Izc2VydmljZXJ1bnRpbWUuZ29vZ2xlYXBpcy5jb20vYXBpL3JlcXVlc3RfbGF0ZW5jaWVzUgsIBBICCDwaAwi0AQqoAgpwcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9zZXJ2aWNlcnVudGltZS5nb29nbGVhcGlzLmNvbS9hcGkvcmVxdWVzdF9sYXRlbmNpZXNfYmFja2VuZBgCIAUqAXMySERpc3RyaWJ1dGlvbiBvZiBiYWNrZW5kIGxhdGVuY2llcyBpbiBzZWNvbmRzIGZvciBub24tc3RyZWFtaW5nIHJlcXVlc3RzLjoZUmVxdWVzdCBiYWNrZW5kIGxhdGVuY2llc0I7c2VydmljZXJ1bnRpbWUuZ29vZ2xlYXBpcy5jb20vYXBpL3JlcXVlc3RfbGF0ZW5jaWVzX2JhY2tlbmRSCwgEEgIIPBoDCLQBCsECCnFwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3NlcnZpY2VydW50aW1lLmdvb2dsZWFwaXMuY29tL2FwaS9yZXF1ZXN0X2xhdGVuY2llc19vdmVyaGVhZBgCIAUqAXMyXkRpc3RyaWJ1dGlvbiBvZiByZXF1ZXN0IGxhdGVuY2llcyBpbiBzZWNvbmRzIGZvciBub24tc3RyZWFtaW5nIHJlcXVlc3RzIGV4Y2x1ZGluZyB0aGUgYmFja2VuZC46GlJlcXVlc3Qgb3ZlcmhlYWQgbGF0ZW5jaWVzQjxzZXJ2aWNlcnVudGltZS5nb29nbGVhcGlzLmNvbS9hcGkvcmVxdWVzdF9sYXRlbmNpZXNfb3ZlcmhlYWRSCwgEEgIIPBoDCLQBCoMCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3NlcnZpY2VydW50aW1lLmdvb2dsZWFwaXMuY29tL2FwaS9yZXF1ZXN0X3NpemVzGAIgBSoCQnkyRkRpc3RyaWJ1dGlvbiBvZiByZXF1ZXN0IHNpemVzIGluIGJ5dGVzIHJlY29yZGVkIGF0IHJlcXVlc3QgY29tcGxldGlvbi46DVJlcXVlc3Qgc2l6ZXNCL3NlcnZpY2VydW50aW1lLmdvb2dsZWFwaXMuY29tL2FwaS9yZXF1ZXN0X3NpemVzUgsIBBICCDwaAwi0AQqHAgplcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9zZXJ2aWNlcnVudGltZS5nb29nbGVhcGlzLmNvbS9hcGkvcmVzcG9uc2Vfc2l6ZXMYAiAFKgJCeTJHRGlzdHJpYnV0aW9uIG9mIHJlc3BvbnNlIHNpemVzIGluIGJ5dGVzIHJlY29yZGVkIGF0IHJlcXVlc3QgY29tcGxldGlvbi46DlJlc3BvbnNlIHNpemVzQjBzZXJ2aWNlcnVudGltZS5nb29nbGVhcGlzLmNvbS9hcGkvcmVzcG9uc2Vfc2l6ZXNSCwgEEgIIPBoDCLQBCqoCCmlwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3NlcnZpY2VydW50aW1lLmdvb2dsZWFwaXMuY29tL3F1b3RhL2FsbG9jYXRpb24vdXNhZ2USOAoMcXVvdGFfbWV0cmljGihUaGUgbmFtZSBvZiBxdW90YSBtZXRyaWMgb3IgcXVvdGEgZ3JvdXAuGAEgAioBMTIkVGhlIHRvdGFsIGNvbnN1bWVkIGFsbG9jYXRpb24gcXVvdGEuOhZBbGxvY2F0aW9uIHF1b3RhIHVzYWdlQjRzZXJ2aWNlcnVudGltZS5nb29nbGVhcGlzLmNvbS9xdW90YS9hbGxvY2F0aW9uL3VzYWdlUggIBBIECICjBQr9AgphcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9zZXJ2aWNlcnVudGltZS5nb29nbGVhcGlzLmNvbS9xdW90YS9leGNlZWRlZBJYCgpsaW1pdF9uYW1lGkpUaGUgcXVvdGEgbGltaXQgbmFtZSwgc3VjaCBhcyAiUmVxdWVzdHMgcGVyIGRheSIgb3IgIkluLXVzZSBJUCBhZGRyZXNzZXMiLhI4CgxxdW90YV9tZXRyaWMaKFRoZSBuYW1lIG9mIHF1b3RhIG1ldHJpYyBvciBxdW90YSBncm91cC4YASABKgExMjVUaGUgZXJyb3IgaGFwcGVuZWQgd2hlbiB0aGUgcXVvdGEgbGltaXQgd2FzIGV4Y2VlZGVkLjoUUXVvdGEgZXhjZWVkZWQgZXJyb3JCLHNlcnZpY2VydW50aW1lLmdvb2dsZWFwaXMuY29tL3F1b3RhL2V4Y2VlZGVkUgIIBArXAgpecHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9zZXJ2aWNlcnVudGltZS5nb29nbGVhcGlzLmNvbS9xdW90YS9saW1pdBJYCgpsaW1pdF9uYW1lGkpUaGUgcXVvdGEgbGltaXQgbmFtZSwgc3VjaCBhcyAiUmVxdWVzdHMgcGVyIGRheSIgb3IgIkluLXVzZSBJUCBhZGRyZXNzZXMiLhI4CgxxdW90YV9tZXRyaWMaKFRoZSBuYW1lIG9mIHF1b3RhIG1ldHJpYyBvciBxdW90YSBncm91cC4YASACKgExMhhUaGUgbGltaXQgZm9yIHRoZSBxdW90YS46C1F1b3RhIGxpbWl0QilzZXJ2aWNlcnVudGltZS5nb29nbGVhcGlzLmNvbS9xdW90YS9saW1pdFIICAQSBAiAowUK0wIKZ3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc2VydmljZXJ1bnRpbWUuZ29vZ2xlYXBpcy5jb20vcXVvdGEvcmF0ZS9uZXRfdXNhZ2USNAoGbWV0aG9kGipUaGUgQVBJIG1ldGhvZCBuYW1lLCBzdWNoIGFzICJkaXNrcy5saXN0Ii4SOAoMcXVvdGFfbWV0cmljGihUaGUgbmFtZSBvZiBxdW90YSBtZXRyaWMgb3IgcXVvdGEgZ3JvdXAuGAIgAioBMTIeVGhlIHRvdGFsIGNvbnN1bWVkIHJhdGUgcXVvdGEuOhBSYXRlIHF1b3RhIHVzYWdlQjJzZXJ2aWNlcnVudGltZS5nb29nbGVhcGlzLmNvbS9xdW90YS9yYXRlL25ldF91c2FnZVILCAQSAgg8GgMI8AEKxwIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc3Bhbm5lci5nb29nbGVhcGlzLmNvbS9hcGkvcmVjZWl2ZWRfYnl0ZXNfY291bnQSHAoIZGF0YWJhc2UaEFRhcmdldCBkYXRhYmFzZS4SIwoGbWV0aG9kGhlDbG91ZCBTcGFubmVyIEFQSSBtZXRob2QuGAIgAioCQnkyNVVuY29tcHJlc3NlZCByZXF1ZXN0IGJ5dGVzIHJlY2VpdmVkIGJ5IENsb3VkIFNwYW5uZXIuOiBCeXRlcyByZWNlaXZlZCBieSBDbG91ZCBTcGFubmVyLkIvc3Bhbm5lci5nb29nbGVhcGlzLmNvbS9hcGkvcmVjZWl2ZWRfYnl0ZXNfY291bnRSCggEEgIIPBoCCHgKxAIKXXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc3Bhbm5lci5nb29nbGVhcGlzLmNvbS9hcGkvcmVxdWVzdF9jb3VudBIcCghkYXRhYmFzZRoQVGFyZ2V0IGRhdGFiYXNlLhIqCgZzdGF0dXMaIFJlcXVlc3QgY2FsbCByZXN1bHQsIG9rPXN1Y2Nlc3MuEiMKBm1ldGhvZBoZQ2xvdWQgU3Bhbm5lciBBUEkgbWV0aG9kLhgBIAMqAzEvczIjUmF0ZSBvZiBDbG91ZCBTcGFubmVyIEFQSSByZXF1ZXN0cy46EEFQSSByZXF1ZXN0IHJhdGVCKHNwYW5uZXIuZ29vZ2xlYXBpcy5jb20vYXBpL3JlcXVlc3RfY291bnRSCggEEgIIPBoCCHgK3QMKYXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc3Bhbm5lci5nb29nbGVhcGlzLmNvbS9hcGkvcmVxdWVzdF9sYXRlbmNpZXMSHAoIZGF0YWJhc2UaEFRhcmdldCBkYXRhYmFzZS4SIwoGbWV0aG9kGhlDbG91ZCBTcGFubmVyIEFQSSBtZXRob2QuGAIgBSoBczLgAURpc3RyaWJ1dGlvbiBvZiBzZXJ2ZXIgcmVxdWVzdCBsYXRlbmNpZXMgZm9yIGEgZGF0YWJhc2UuIFRoaXMgaW5jbHVkZXMgbGF0ZW5jeSBvZiByZXF1ZXN0IHByb2Nlc3NpbmcgaW4gQ2xvdWQgU3Bhbm5lciBiYWNrZW5kcyBhbmQgQVBJIGxheWVyLiBJdCBkb2VzIG5vdCBpbmNsdWRlIG5ldHdvcmsgb3IgcmV2ZXJzZS1wcm94eSBvdmVyaGVhZCBiZXR3ZWVuIGNsaWVudHMgYW5kIHNlcnZlcnMuOhFSZXF1ZXN0IGxhdGVuY2llc0Isc3Bhbm5lci5nb29nbGVhcGlzLmNvbS9hcGkvcmVxdWVzdF9sYXRlbmNpZXNSCggEEgIIPBoCCHgKuAIKYHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc3Bhbm5lci5nb29nbGVhcGlzLmNvbS9hcGkvc2VudF9ieXRlc19jb3VudBIcCghkYXRhYmFzZRoQVGFyZ2V0IGRhdGFiYXNlLhIjCgZtZXRob2QaGUNsb3VkIFNwYW5uZXIgQVBJIG1ldGhvZC4YAiACKgJCeTIyVW5jb21wcmVzc2VkIHJlc3BvbnNlIGJ5dGVzIHNlbnQgYnkgQ2xvdWQgU3Bhbm5lci46HEJ5dGVzIHNlbnQgYnkgQ2xvdWQgU3Bhbm5lci5CK3NwYW5uZXIuZ29vZ2xlYXBpcy5jb20vYXBpL3NlbnRfYnl0ZXNfY291bnRSCggEEgIIPBoCCHgKvAIKbXByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc3Bhbm5lci5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9jcHUvc21vb3RoZWRfdXRpbGl6YXRpb24SHAoIZGF0YWJhc2UaEFRhcmdldCBkYXRhYmFzZS4YASADKgYxMF4yLiUyQTI0LWhvdXIgc21vb3RoZWQgdXRpbGl6YXRpb24gb2YgcHJvdmlzaW9uZWQgQ1BVLCBiZXR3ZWVuIDAgYW5kIDEuOhhTbW9vdGhlZCBDUFUgdXRpbGl6YXRpb25COHNwYW5uZXIuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvY3B1L3Ntb290aGVkX3V0aWxpemF0aW9uUgoIBBICCDwaAgh4CpACCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3NwYW5uZXIuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvY3B1L3V0aWxpemF0aW9uEhwKCGRhdGFiYXNlGhBUYXJnZXQgZGF0YWJhc2UuGAEgAyoGMTBeMi4lMjBVdGlsaXphdGlvbiBvZiBwcm92aXNpb25lZCBDUFUsIGJldHdlZW4gMCBhbmQgMS46D0NQVSB1dGlsaXphdGlvbkIvc3Bhbm5lci5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9jcHUvdXRpbGl6YXRpb25SCggEEgIIPBoCCHgKvwEKX3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc3Bhbm5lci5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9ub2RlX2NvdW50GAEgAioBMTIWVG90YWwgbnVtYmVyIG9mIG5vZGVzLjoFTm9kZXNCKnNwYW5uZXIuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2Uvbm9kZV9jb3VudFIKCAQSAgg8GgIIeArqAQpicHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9zcGFubmVyLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL3Nlc3Npb25fY291bnQSHAoIZGF0YWJhc2UaEFRhcmdldCBkYXRhYmFzZS4YASACKgExMhpOdW1iZXIgb2Ygc2Vzc2lvbnMgaW4gdXNlLjoIU2Vzc2lvbnNCLXNwYW5uZXIuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2Uvc2Vzc2lvbl9jb3VudFIKCAQSAgg8GgIIeAqWAgpncHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9zcGFubmVyLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL3N0b3JhZ2UvdXNlZF9ieXRlcxIcCghkYXRhYmFzZRoQVGFyZ2V0IGRhdGFiYXNlLhIeCg1zdG9yYWdlX2NsYXNzGg1TdG9yYWdlIHR5cGUuGAEgAioCQnkyFlN0b3JhZ2UgdXNlZCBpbiBieXRlcy46DVN0b3JhZ2UgdXNlZC5CMnNwYW5uZXIuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2Uvc3RvcmFnZS91c2VkX2J5dGVzUgoIBBICCDwaAgh4CtsCCl1wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vYXBpL3JlcXVlc3RfY291bnQSMwoNcmVzcG9uc2VfY29kZRoiVGhlIHJlc3BvbnNlIGNvZGUgb2YgdGhlIHJlcXVlc3RzLhIsCgZtZXRob2QaIlRoZSBuYW1lIG9mIHRoZSBBUEkgbWV0aG9kIGNhbGxlZC4YAiACKgExMktEZWx0YSBjb3VudCBvZiBBUEkgY2FsbHMsIGdyb3VwZWQgYnkgdGhlIEFQSSBtZXRob2QgbmFtZSBhbmQgcmVzcG9uc2UgY29kZS46DVJlcXVlc3QgY291bnRCKHN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vYXBpL3JlcXVlc3RfY291bnRSCggEEgIIPBoCCHgKwQIKb3Byb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9hdXRoei9hY2xfYmFzZWRfb2JqZWN0X2FjY2Vzc19jb3VudBgCIAIqATEyYERlbHRhIGNvdW50IG9mIHJlcXVlc3RzIHRoYXQgcmVzdWx0IGluIGFuIG9iamVjdCBiZWluZyBncmFudGVkIGFjY2VzcyBzb2xlbHkgZHVlIHRvIG9iamVjdCBBQ0xzLjodT2JqZWN0LUFDTCBiYXNlZCBhY2Nlc3MgY291bnRCOnN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vYXV0aHovYWNsX2Jhc2VkX29iamVjdF9hY2Nlc3NfY291bnRSCggDEgIIPBoCCHgKlAIKdHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9hdXRoei9vYmplY3Rfc3BlY2lmaWNfYWNsX211dGF0aW9uX2NvdW50GAIgAioBMTI0RGVsdGEgY291bnQgb2YgY2hhbmdlcyBtYWRlIHRvIG9iamVjdCBzcGVjaWZpYyBBQ0xzLjoST2JqZWN0IEFDTCBjaGFuZ2VzQj9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL2F1dGh6L29iamVjdF9zcGVjaWZpY19hY2xfbXV0YXRpb25fY291bnRSCggDEgIIPBoCCHgKiQMKaHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3JlY2VpdmVkX2J5dGVzX2NvdW50EjMKDXJlc3BvbnNlX2NvZGUaIlRoZSByZXNwb25zZSBjb2RlIG9mIHRoZSByZXF1ZXN0cy4SLAoGbWV0aG9kGiJUaGUgbmFtZSBvZiB0aGUgQVBJIG1ldGhvZCBjYWxsZWQuGAIgAioCQnkyYURlbHRhIGNvdW50IG9mIGJ5dGVzIHJlY2VpdmVkIG92ZXIgdGhlIG5ldHdvcmssIGdyb3VwZWQgYnkgdGhlIEFQSSBtZXRob2QgbmFtZSBhbmQgcmVzcG9uc2UgY29kZS46DlJlY2VpdmVkIGJ5dGVzQjNzdG9yYWdlLmdvb2dsZWFwaXMuY29tL25ldHdvcmsvcmVjZWl2ZWRfYnl0ZXNfY291bnRSCggEEgIIPBoCCHgK+QIKZHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3NlbnRfYnl0ZXNfY291bnQSMwoNcmVzcG9uc2VfY29kZRoiVGhlIHJlc3BvbnNlIGNvZGUgb2YgdGhlIHJlcXVlc3RzLhIsCgZtZXRob2QaIlRoZSBuYW1lIG9mIHRoZSBBUEkgbWV0aG9kIGNhbGxlZC4YAiACKgJCeTJdRGVsdGEgY291bnQgb2YgYnl0ZXMgc2VudCBvdmVyIHRoZSBuZXR3b3JrLCBncm91cGVkIGJ5IHRoZSBBUEkgbWV0aG9kIG5hbWUgYW5kIHJlc3BvbnNlIGNvZGUuOgpTZW50IGJ5dGVzQi9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL25ldHdvcmsvc2VudF9ieXRlc19jb3VudFIKCAQSAgg8GgIIeArAAgpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3N0b3JhZ2Uvb2JqZWN0X2NvdW50EisKDXN0b3JhZ2VfY2xhc3MaGlN0b3JhZ2UgY2xhc3Mgb2YgdGhlIGRhdGEuGAEgAioBMTJfVG90YWwgbnVtYmVyIG9mIG9iamVjdHMgcGVyIGJ1Y2tldCwgZ3JvdXBlZCBieSBzdG9yYWdlIGNsYXNzLiBWYWx1ZXMgYXJlIG1lYXN1cmVkIG9uY2UgcGVyIGRheS46DE9iamVjdCBjb3VudEIrc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9zdG9yYWdlL29iamVjdF9jb3VudFIMCAQSAwisAhoDCNgECukCCmZwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS90b3RhbF9ieXRlX3NlY29uZHMSKwoNc3RvcmFnZV9jbGFzcxoaU3RvcmFnZSBjbGFzcyBvZiB0aGUgZGF0YS4YASADKgRCeS5zMnNUb3RhbCBkYWlseSBzdG9yYWdlIGluIGJ5dGUqc2Vjb25kcyB1c2VkIGJ5IHRoZSBidWNrZXQsIGdyb3VwZWQgYnkgc3RvcmFnZSBjbGFzcy4gVmFsdWVzIGFyZSBtZWFzdXJlZCBvbmNlIHBlciBkYXkuOhJUb3RhbCBieXRlIHNlY29uZHNCMXN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS90b3RhbF9ieXRlX3NlY29uZHNSDAgEEgMIrAIaAwjYBArDAgpfcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3N0b3JhZ2UvdG90YWxfYnl0ZXMSKwoNc3RvcmFnZV9jbGFzcxoaU3RvcmFnZSBjbGFzcyBvZiB0aGUgZGF0YS4YASADKgJCeTJkVG90YWwgc2l6ZSBvZiBhbGwgb2JqZWN0cyBpbiB0aGUgYnVja2V0LCBncm91cGVkIGJ5IHN0b3JhZ2UgY2xhc3MuIFZhbHVlcyBhcmUgbWVhc3VyZWQgb25jZSBwZXIgZGF5LjoLVG90YWwgYnl0ZXNCKnN0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS90b3RhbF9ieXRlc1IMCAQSAwisAhoDCNgECvUBCldwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3RwdS5nb29nbGVhcGlzLmNvbS9jcHUvdXRpbGl6YXRpb24SHAoEY29yZRoUVGhlIENQVSBjb3JlIGluIHVzZS4YASADKgExMjNVdGlsaXphdGlvbiBvZiBDUFVzIG9uIHRoZSBUUFUgV29ya2VyIGFzIGEgcGVyY2VudC46D0NQVSB1dGlsaXphdGlvbkIidHB1Lmdvb2dsZWFwaXMuY29tL2NwdS91dGlsaXphdGlvblILCAMSAgg8GgMItAEKsgEKVHByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvdHB1Lmdvb2dsZWFwaXMuY29tL21lbW9yeS91c2FnZRgBIAIqAkJ5MhZNZW1vcnkgdXNhZ2UgaW4gYnl0ZXMuOgxNZW1vcnkgdXNhZ2VCH3RwdS5nb29nbGVhcGlzLmNvbS9tZW1vcnkvdXNhZ2VSCwgDEgIIPBoDCLQBCokCCmRwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3RwdS5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3JlY2VpdmVkX2J5dGVzX2NvdW50GAIgAioCQnkyQ0N1bXVsYXRpdmUgYnl0ZXMgb2YgZGF0YSB0aGlzIHNlcnZlciBoYXMgcmVjZWl2ZWQgb3ZlciB0aGUgbmV0d29yay46Fk5ldHdvcmsgYnl0ZXMgcmVjZWl2ZWRCL3RwdS5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3JlY2VpdmVkX2J5dGVzX2NvdW50UgsIAxICCDwaAwi0AQr5AQpgcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy90cHUuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9zZW50X2J5dGVzX2NvdW50GAIgAioCQnkyP0N1bXVsYXRpdmUgYnl0ZXMgb2YgZGF0YSB0aGlzIHNlcnZlciBoYXMgc2VudCBvdmVyIHRoZSBuZXR3b3JrLjoSTmV0d29yayBieXRlcyBzZW50Qit0cHUuZ29vZ2xlYXBpcy5jb20vbmV0d29yay9zZW50X2J5dGVzX2NvdW50UgsIAxICCDwaAwi0AQrcAwpbcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy92cG4uZ29vZ2xlYXBpcy5jb20vZ2F0ZXdheS9jb25uZWN0aW9ucxJOChJjb25maWd1cmVkX2Zvcl9zbGEQARo2V2hldGhlciB0aGUgSEEgY29ubmVjdGlvbiBpcyBmdWxseSBjb25maWd1cmVkIGZvciBTTEEuElYKEmdjcF9zZXJ2aWNlX2hlYWx0aBABGj5XaGV0aGVyIHRoZSBHQ1Agc2lkZSBvZiB0aGUgSEEgY29ubmVjdGlvbiBpcyBmdWxseSBmdW5jdGlvbmFsLhJKChFlbmRfdG9fZW5kX2hlYWx0aBABGjNXaGV0aGVyIHRoZSBIQSBjb25uZWN0aW9uIGlzIGZ1bmN0aW9uYWwgZW5kLXRvLWVuZC4YASACKgExMjdJbmRpY2F0ZXMgdGhlIG51bWJlciBvZiBIQSBjb25uZWN0aW9ucyBwZXIgVlBOIGdhdGV3YXkuOhVOdW1iZXIgb2YgY29ubmVjdGlvbnNCJnZwbi5nb29nbGVhcGlzLmNvbS9nYXRld2F5L2Nvbm5lY3Rpb25zUgoIAxICCDwaAgg8Cv0CCm5wcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3Zwbi5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2Ryb3BwZWRfcmVjZWl2ZWRfcGFja2V0c19jb3VudBImCgt0dW5uZWxfbmFtZRoXVGhlIG5hbWUgb2YgdGhlIHR1bm5lbC4SPAoMZ2F0ZXdheV9uYW1lGixUaGUgbmFtZSBvZiB0aGUgZ2F0ZXdheSBtYW5hZ2luZyB0aGUgdHVubmVsLhgCIAIqATEyPEluZ3Jlc3MgKHJlY2VpdmVkIGZyb20gcGVlciBWUE4pIHBhY2tldHMgZHJvcHBlZCBmb3IgdHVubmVsLjoYSW5jb21pbmcgcGFja2V0cyBkcm9wcGVkQjl2cG4uZ29vZ2xlYXBpcy5jb20vbmV0d29yay9kcm9wcGVkX3JlY2VpdmVkX3BhY2tldHNfY291bnRSCwgEEgIIPBoDCLQBCvICCmpwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3Zwbi5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2Ryb3BwZWRfc2VudF9wYWNrZXRzX2NvdW50EiYKC3R1bm5lbF9uYW1lGhdUaGUgbmFtZSBvZiB0aGUgdHVubmVsLhI8CgxnYXRld2F5X25hbWUaLFRoZSBuYW1lIG9mIHRoZSBnYXRld2F5IG1hbmFnaW5nIHRoZSB0dW5uZWwuGAIgAioBMTI5RWdyZXNzIChkaXJlY3RlZCB0byBwZWVyIFZQTikgcGFja2V0cyBkcm9wcGVkIGZvciB0dW5uZWwuOhhPdXRnb2luZyBwYWNrZXRzIGRyb3BwZWRCNXZwbi5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL2Ryb3BwZWRfc2VudF9wYWNrZXRzX2NvdW50UgsIBBICCDwaAwi0AQrWAgpkcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy92cG4uZ29vZ2xlYXBpcy5jb20vbmV0d29yay9yZWNlaXZlZF9ieXRlc19jb3VudBImCgt0dW5uZWxfbmFtZRoXVGhlIG5hbWUgb2YgdGhlIHR1bm5lbC4SPAoMZ2F0ZXdheV9uYW1lGixUaGUgbmFtZSBvZiB0aGUgZ2F0ZXdheSBtYW5hZ2luZyB0aGUgdHVubmVsLhgCIAIqAkJ5MjJJbmdyZXNzIChyZWNlaXZlZCBmcm9tIHBlZXIgVlBOKSBieXRlcyBmb3IgdHVubmVsLjoOUmVjZWl2ZWQgYnl0ZXNCL3Zwbi5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3JlY2VpdmVkX2J5dGVzX2NvdW50UgsIBBICCDwaAwi0AQrwAgpmcHJvamVjdHMvaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNS9tZXRyaWNEZXNjcmlwdG9ycy92cG4uZ29vZ2xlYXBpcy5jb20vbmV0d29yay9yZWNlaXZlZF9wYWNrZXRzX2NvdW50EkgKBnN0YXR1cxo+RGVsaXZlcnkgc3RhdHVzIGUuZy4gJ3N1Y2Nlc3NmdWwnLCAnZXhjZWVkc19tdHUnLCAndGhyb3R0bGVkJy4SJgoLdHVubmVsX25hbWUaF1RoZSBuYW1lIG9mIHRoZSB0dW5uZWwuGAIgAioJe3BhY2tldHN9MjRJbmdyZXNzIChyZWNlaXZlZCBmcm9tIHBlZXIgVlBOKSBwYWNrZXRzIGZvciB0dW5uZWwuOhBSZWNlaXZlZCBwYWNrZXRzQjF2cG4uZ29vZ2xlYXBpcy5jb20vbmV0d29yay9yZWNlaXZlZF9wYWNrZXRzX2NvdW50UgoIBBICCDwaAgg8CscCCmBwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3Zwbi5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3NlbnRfYnl0ZXNfY291bnQSJgoLdHVubmVsX25hbWUaF1RoZSBuYW1lIG9mIHRoZSB0dW5uZWwuEjwKDGdhdGV3YXlfbmFtZRosVGhlIG5hbWUgb2YgdGhlIGdhdGV3YXkgbWFuYWdpbmcgdGhlIHR1bm5lbC4YAiACKgJCeTIvRWdyZXNzIChkaXJlY3RlZCB0byBwZWVyIFZQTikgYnl0ZXMgZm9yIHR1bm5lbC46ClNlbnQgYnl0ZXNCK3Zwbi5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3NlbnRfYnl0ZXNfY291bnRSCwgEEgIIPBoDCLQBCuECCmJwcm9qZWN0cy9ob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1L21ldHJpY0Rlc2NyaXB0b3JzL3Zwbi5nb29nbGVhcGlzLmNvbS9uZXR3b3JrL3NlbnRfcGFja2V0c19jb3VudBJICgZzdGF0dXMaPkRlbGl2ZXJ5IHN0YXR1cyBlLmcuICdzdWNjZXNzZnVsJywgJ2V4Y2VlZHNfbXR1JywgJ3Rocm90dGxlZCcuEiYKC3R1bm5lbF9uYW1lGhdUaGUgbmFtZSBvZiB0aGUgdHVubmVsLhgCIAIqCXtwYWNrZXRzfTIxRWdyZXNzIChkaXJlY3RlZCB0byBwZWVyIFZQTikgcGFja2V0cyBmb3IgdHVubmVsLjoMU2VudCBwYWNrZXRzQi12cG4uZ29vZ2xlYXBpcy5jb20vbmV0d29yay9zZW50X3BhY2tldHNfY291bnRSCggEEgIIPBoCCDwKxAIKWnByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUvbWV0cmljRGVzY3JpcHRvcnMvdnBuLmdvb2dsZWFwaXMuY29tL3R1bm5lbF9lc3RhYmxpc2hlZBImCgt0dW5uZWxfbmFtZRoXVGhlIG5hbWUgb2YgdGhlIHR1bm5lbC4SPAoMZ2F0ZXdheV9uYW1lGixUaGUgbmFtZSBvZiB0aGUgZ2F0ZXdheSBtYW5hZ2luZyB0aGUgdHVubmVsLhgBIAMqATEyMUluZGljYXRlcyBzdWNjZXNzZnVsIHR1bm5lbCBlc3RhYmxpc2htZW50IGlmID4gMC46ElR1bm5lbCBlc3RhYmxpc2hlZEIldnBuLmdvb2dsZWFwaXMuY29tL3R1bm5lbF9lc3RhYmxpc2hlZFILCAQSAgg8GgMItAE=",
        "encodedBody" : true,
        "templated" : false,
        "headers" : {
          "Alt-Svc" : [ "quic=\":443\"; ma=2592000; v=\"46,44,43,39\"" ],
          "Content-Disposition" : [ "attachment" ],
          "Content-Type" : [ "application/grpc" ],
          "Date" : [ "Tue, 09 Apr 2019 12:51:26 GMT" ],
          "Grpc-Status" : [ "0" ],
          "Hoverfly" : [ "Was-Here" ],
          "Trailer" : [ "Content-Disposition", "Grpc-Status" ]
        }
      }
    }, {
      "request" : {
        "path" : [ {
          "matcher" : "exact",
          "value" : "/google.monitoring.v3.MetricService/ListTimeSeries"
        } ],
        "method" : [ {
          "matcher" : "exact",
          "value" : "POST"
        } ],
        "destination" : [ {
          "matcher" : "exact",
          "value" : "monitoring.googleapis.com:443"
        } ],
        "scheme" : [ {
          "matcher" : "exact",
          "value" : "https"
        } ],
        "query" : { },
        "body" : [ {
          "matcher" : "exact",
          "value" : "AAAAAHUSPW1ldHJpYy50eXBlPSJjb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbiIiEAoGCNCT8OQFEgYIgJ3w5AVSInByb2plY3RzL2hvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTU="
        } ]
      },
      "response" : {
        "status" : 200,
        "body" : "AAAAFBsK3gYKdxJECg1pbnN0YW5jZV9uYW1lEjNna2UtaG92ZXJmbHktY2xvdWQtY2x1c3QtZGVmYXVsdC1wb29sLWZjNTRjYTdhLXQzcjgaL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvY3B1L3V0aWxpemF0aW9uEnMKDGdjZV9pbnN0YW5jZRIiCgtpbnN0YW5jZV9pZBITMjM4NjU4NjYxODQ5Mzc1MDA5NxIWCgR6b25lEg5ldXJvcGUtd2VzdDEtYhInCgpwcm9qZWN0X2lkEhlob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1GAEgAyodChAKBgiAnfDkBRIGCICd8OQFEgkZ7+7u2lAQwD8qHQoQCgYIxJzw5AUSBgjEnPDkBRIJGTMzs9IPbL8/Kh0KEAoGCIic8OQFEgYIiJzw5AUSCRmZmZn0TjK/PyodChAKBgjMm/DkBRIGCMyb8OQFEgkZiIgIXP+Qvz8qHQoQCgYIkJvw5AUSBgiQm/DkBRIJGRERkVxEVr8/Kh0KEAoGCNSa8OQFEgYI1Jrw5AUSCRnNzEyJ2pK/PyodChAKBgiYmvDkBRIGCJia8OQFEgkZAAAASxEevz8qHQoQCgYI3Jnw5AUSBgjcmfDkBRIJGauqqkaR574/Kh0KEAoGCKCZ8OQFEgYIoJnw5AUSCRkRERH8uxu/PyodChAKBgjkmPDkBRIGCOSY8OQFEgkZRETE87eRvz8qHQoQCgYIqJjw5AUSBgiomPDkBRIJGWZmZrnr/L8/Kh0KEAoGCOyX8OQFEgYI7Jfw5AUSCRkzMzMG/Vy/PyodChAKBgiwl/DkBRIGCLCX8OQFEgkZ3t3dlYoNvz8qHQoQCgYI9Jbw5AUSBgj0lvDkBRIJGZmZmQKYEr8/Kh0KEAoGCLiW8OQFEgYIuJbw5AUSCRlVVVWoCMa/PyodChAKBgj8lfDkBRIGCPyV8OQFEgkZZmbmBoUKwD8qHQoQCgYIwJXw5AUSBgjAlfDkBRIJGZqZWZcfNsA/Kh0KEAoGCISV8OQFEgYIhJXw5AUSCRlVVdWG7Me/PyodChAKBgjIlPDkBRIGCMiU8OQFEgkZd3f34FgBvz8qHQoQCgYIjJTw5AUSBgiMlPDkBRIJGZmZmWWjN78/Ct4GCncSRAoNaW5zdGFuY2VfbmFtZRIzZ2tlLWhvdmVyZmx5LWNsb3VkLWNsdXN0LWRlZmF1bHQtcG9vbC1mYzU0Y2E3YS1qOG5tGi9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbhJzCgxnY2VfaW5zdGFuY2USIgoLaW5zdGFuY2VfaWQSEzQwMzEwODA0MjczNDY1NDU0ODkSFgoEem9uZRIOZXVyb3BlLXdlc3QxLWISJwoKcHJvamVjdF9pZBIZaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNRgBIAMqHQoQCgYIgJ3w5AUSBgiAnfDkBRIJGTMz81kjvcE/Kh0KEAoGCMSc8OQFEgYIxJzw5AUSCRm8u3vmELLBPyodChAKBgiInPDkBRIGCIic8OQFEgkZVVUVXKrjwT8qHQoQCgYIzJvw5AUSBgjMm/DkBRIJGYiIyOucl8E/Kh0KEAoGCJCb8OQFEgYIkJvw5AUSCRkiImJsyFDCPyodChAKBgjUmvDkBRIGCNSa8OQFEgkZZmamB5HHwT8qHQoQCgYImJrw5AUSBgiYmvDkBRIJGSIiYpATlME/Kh0KEAoGCNyZ8OQFEgYI3Jnw5AUSCRkAAABO3LDBPyodChAKBgigmfDkBRIGCKCZ8OQFEgkZd3c3/YD5wT8qHQoQCgYI5Jjw5AUSBgjkmPDkBRIJGXd3dwBJRsI/Kh0KEAoGCKiY8OQFEgYIqJjw5AUSCRlmZiaszpfBPyodChAKBgjsl/DkBRIGCOyX8OQFEgkZvLv7wHH2wT8qHQoQCgYIsJfw5AUSBgiwl/DkBRIJGTMzc9fqisE/Kh0KEAoGCPSW8OQFEgYI9Jbw5AUSCRne3d1sibTBPyodChAKBgi4lvDkBRIGCLiW8OQFEgkZZmbm/72zwT8qHQoQCgYI/JXw5AUSBgj8lfDkBRIJGZqZmXvVAcI/Kh0KEAoGCMCV8OQFEgYIwJXw5AUSCRlEREQcDn7CPyodChAKBgiElfDkBRIGCISV8OQFEgkZ3t1dd/MGwj8qHQoQCgYIyJTw5AUSBgjIlPDkBRIJGZqZGeElJMI/Kh0KEAoGCIyU8OQFEgYIjJTw5AUSCRmrqqplCLvBPwqzBgpMEhkKDWluc3RhbmNlX25hbWUSCGRlcGxveWVyGi9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbhJzCgxnY2VfaW5zdGFuY2USIgoLaW5zdGFuY2VfaWQSEzgxMjYzNTIyODY5MjAwODkxODQSFgoEem9uZRIOZXVyb3BlLXdlc3QxLWISJwoKcHJvamVjdF9pZBIZaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNRgBIAMqHQoQCgYIgJ3w5AUSBgiAnfDkBRIJGby7u2xPl58/Kh0KEAoGCMSc8OQFEgYIxJzw5AUSCRnNzMzraLiePyodChAKBgiInPDkBRIGCIic8OQFEgkZmZmZJNJ/nz8qHQoQCgYIzJvw5AUSBgjMm/DkBRIJGSIiojxmFqA/Kh0KEAoGCJCb8OQFEgYIkJvw5AUSCRlERETalAGePyodChAKBgjUmvDkBRIGCNSa8OQFEgkZMzMzjwCInz8qHQoQCgYImJrw5AUSBgiYmvDkBRIJGXd3d8JKeZ4/Kh0KEAoGCNyZ8OQFEgYI3Jnw5AUSCRkAAADgm/KePyodChAKBgigmfDkBRIGCKCZ8OQFEgkZvLu7iUZOoD8qHQoQCgYI5Jjw5AUSBgjkmPDkBRIJGYiIiFhS5J0/Kh0KEAoGCKiY8OQFEgYIqJjw5AUSCRlERESL5qifPyodChAKBgjsl/DkBRIGCOyX8OQFEgkZmZmZepmtnz8qHQoQCgYIsJfw5AUSBgiwl/DkBRIJGauqKosCJKA/Kh0KEAoGCPSW8OQFEgYI9Jbw5AUSCRkzMzPsf6GfPyodChAKBgi4lvDkBRIGCLiW8OQFEgkZzczMngOinT8qHQoQCgYI/JXw5AUSBgj8lfDkBRIJGc3MzATW1Z8/Kh0KEAoGCMCV8OQFEgYIwJXw5AUSCRkiImLuZFnZPyodChAKBgiElfDkBRIGCISV8OQFEgkZRESEU54Vtj8qHQoQCgYIyJTw5AUSBgjIlPDkBRIJGWZmZmiRNp8/Kh0KEAoGCIyU8OQFEgYIjJTw5AUSCRmIiIi1YSGfPwreBgp3EkQKDWluc3RhbmNlX25hbWUSM2drZS1ob3ZlcmZseS1jbG91ZC1jbHVzdC1kZWZhdWx0LXBvb2wtZmM1NGNhN2EtMjQ1ZBovY29tcHV0ZS5nb29nbGVhcGlzLmNvbS9pbnN0YW5jZS9jcHUvdXRpbGl6YXRpb24ScwoMZ2NlX2luc3RhbmNlEiIKC2luc3RhbmNlX2lkEhM4NDg2MzkyNzI5NTA0MzM3MjI1EhYKBHpvbmUSDmV1cm9wZS13ZXN0MS1iEicKCnByb2plY3RfaWQSGWhvdmVyZmx5LWNsb3VkLWRldi0xNjI4MTUYASADKh0KEAoGCICd8OQFEgYIgJ3w5AUSCRnNzMzYwujAPyodChAKBgjEnPDkBRIGCMSc8OQFEgkZ3t29M1H7wD8qHQoQCgYIiJzw5AUSBgiInPDkBRIJGby7y7cXDsE/Kh0KEAoGCMyb8OQFEgYIzJvw5AUSCRkzM+OHNHrAPyodChAKBgiQm/DkBRIGCJCb8OQFEgkZIiLiukVOwD8qHQoQCgYI1Jrw5AUSBgjUmvDkBRIJGauqKtoTTMA/Kh0KEAoGCJia8OQFEgYImJrw5AUSCRkAAJD1QU3APyodChAKBgjcmfDkBRIGCNyZ8OQFEgkZq6pq/f2YwD8qHQoQCgYIoJnw5AUSBgigmfDkBRIJGZqZeUp1hMA/Kh0KEAoGCOSY8OQFEgYI5Jjw5AUSCRm8u3v7JYzAPyodChAKBgiomPDkBRIGCKiY8OQFEgkZ3t3dulNLwD8qHQoQCgYI7Jfw5AUSBgjsl/DkBRIJGby7K8R8P8A/Kh0KEAoGCLCX8OQFEgYIsJfw5AUSCRlEROQwZXjAPyodChAKBgj0lvDkBRIGCPSW8OQFEgkZEREhdwSCwD8qHQoQCgYIuJbw5AUSBgi4lvDkBRIJGURExMdDQcA/Kh0KEAoGCPyV8OQFEgYI/JXw5AUSCRlmZva1XkPAPyodChAKBgjAlfDkBRIGCMCV8OQFEgkZ3t3Ned0ywT8qHQoQCgYIhJXw5AUSBgiElfDkBRIJGd7dHR+FB8E/Kh0KEAoGCMiU8OQFEgYIyJTw5AUSCRkzM2NqlKrAPyodChAKBgiMlPDkBRIGCIyU8OQFEgkZzcyMaQ9JwD8K3gYKdxJECg1pbnN0YW5jZV9uYW1lEjNna2UtaG92ZXJmbHktY2xvdWQtY2x1c3QtZGVmYXVsdC1wb29sLWZjNTRjYTdhLXA5ZDcaL2NvbXB1dGUuZ29vZ2xlYXBpcy5jb20vaW5zdGFuY2UvY3B1L3V0aWxpemF0aW9uEnMKDGdjZV9pbnN0YW5jZRIWCgR6b25lEg5ldXJvcGUtd2VzdDEtYhInCgpwcm9qZWN0X2lkEhlob3ZlcmZseS1jbG91ZC1kZXYtMTYyODE1EiIKC2luc3RhbmNlX2lkEhM4OTAxODA4NjQwNzkzODU2ODQ5GAEgAyodChAKBgiAnfDkBRIGCICd8OQFEgkZiIgoct8OyT8qHQoQCgYIxJzw5AUSBgjEnPDkBRIJGURE5Cai18g/Kh0KEAoGCIic8OQFEgYIiJzw5AUSCRne3R21TdXIPyodChAKBgjMm/DkBRIGCMyb8OQFEgkZd3eXBFmmyD8qHQoQCgYIkJvw5AUSBgiQm/DkBRIJGYiIyL1Nz8g/Kh0KEAoGCNSa8OQFEgYI1Jrw5AUSCRmamXkn/eLIPyodChAKBgiYmvDkBRIGCJia8OQFEgkZ3t0dZxgJyT8qHQoQCgYI3Jnw5AUSBgjcmfDkBRIJGauqynowscg/Kh0KEAoGCKCZ8OQFEgYIoJnw5AUSCRl3d7eJE07IPyodChAKBgjkmPDkBRIGCOSY8OQFEgkZERFxp9hsyD8qHQoQCgYIqJjw5AUSBgiomPDkBRIJGby7G2xfyMg/Kh0KEAoGCOyX8OQFEgYI7Jfw5AUSCRkRERFD6wfJPyodChAKBgiwl/DkBRIGCLCX8OQFEgkZREQE9LPCyD8qHQoQCgYI9Jbw5AUSBgj0lvDkBRIJGSIi4nVVjMg/Kh0KEAoGCLiW8OQFEgYIuJbw5AUSCRkAAKCHN9PIPyodChAKBgj8lfDkBRIGCPyV8OQFEgkZIiKiiSTIyj8qHQoQCgYIwJXw5AUSBgjAlfDkBRIJGXd3B41DJts/Kh0KEAoGCISV8OQFEgYIhJXw5AUSCRlVVVWYtc/mPyodChAKBgjIlPDkBRIGCMiU8OQFEgkZ3t2lb7Rh5j8qHQoQCgYIjJTw5AUSBgiMlPDkBRIJGd7dZbx7S+M/Ct4GCncSRAoNaW5zdGFuY2VfbmFtZRIzZ2tlLWhvdmVyZmx5LWNsb3VkLWNsdXN0LWRlZmF1bHQtcG9vbC1mYzU0Y2E3YS14Mms5Gi9jb21wdXRlLmdvb2dsZWFwaXMuY29tL2luc3RhbmNlL2NwdS91dGlsaXphdGlvbhJzCgxnY2VfaW5zdGFuY2USIgoLaW5zdGFuY2VfaWQSEzkwNzg1ODMyMjgzMzk5MzE5ODUSFgoEem9uZRIOZXVyb3BlLXdlc3QxLWISJwoKcHJvamVjdF9pZBIZaG92ZXJmbHktY2xvdWQtZGV2LTE2MjgxNRgBIAMqHQoQCgYIgJ3w5AUSBgiAnfDkBRIJGQAAAFd9Fb8/Kh0KEAoGCMSc8OQFEgYIxJzw5AUSCRl3dzfh9A2/PyodChAKBgiInPDkBRIGCIic8OQFEgkZAACA+NC7vj8qHQoQCgYIzJvw5AUSBgjMm/DkBRIJGc3MTENCCb8/Kh0KEAoGCJCb8OQFEgYIkJvw5AUSCRnNzMwNJrW+PyodChAKBgjUmvDkBRIGCNSa8OQFEgkZVVWV4gtPvz8qHQoQCgYImJrw5AUSBgiYmvDkBRIJGZmZWRj/n74/Kh0KEAoGCNyZ8OQFEgYI3Jnw5AUSCRlVVZXty6C/PyodChAKBgigmfDkBRIGCKCZ8OQFEgkZVVVVM5jJvz8qHQoQCgYI5Jjw5AUSBgjkmPDkBRIJGSIiYmrPf78/Kh0KEAoGCKiY8OQFEgYIqJjw5AUSCRm8u5tLCB7APyodChAKBgjsl/DkBRIGCOyX8OQFEgkZREQEInlawD8qHQoQCgYIsJfw5AUSBgiwl/DkBRIJGXd3twdMfcA/Kh0KEAoGCPSW8OQFEgYI9Jbw5AUSCRlERMSQHIG/PyodChAKBgi4lvDkBRIGCLiW8OQFEgkZ7+4OCdBWwD8qHQoQCgYI/JXw5AUSBgj8lfDkBRIJGUREBFU2Xb8/Kh0KEAoGCMCV8OQFEgYIwJXw5AUSCRmIiIg0Ble+PyodChAKBgiElfDkBRIGCISV8OQFEgkZREQEBDBvwD8qHQoQCgYIyJTw5AUSBgjIlPDkBRIJGWZmpnHKXL8/Kh0KEAoGCIyU8OQFEgYIjJTw5AUSCRl3d/dcYQC+Pw==",
        "encodedBody" : true,
        "templated" : false,
        "headers" : {
          "Alt-Svc" : [ "quic=\":443\"; ma=2592000; v=\"46,44,43,39\"" ],
          "Content-Disposition" : [ "attachment" ],
          "Content-Type" : [ "application/grpc" ],
          "Date" : [ "Tue, 09 Apr 2019 12:51:32 GMT" ],
          "Grpc-Status" : [ "0" ],
          "Hoverfly" : [ "Was-Here" ],
          "Trailer" : [ "Grpc-Status", "Content-Disposition" ]
        }
      }
    } ],
    "globalActions" : {
      "delays" : [ ]
    }
  },
  "meta" : {
    "schemaVersion" : "v5",
    "hoverflyVersion" : "v1.0.0-rc.2",
    "timeExported" : "2019-04-09T13:51:32+01:00"
  }
}